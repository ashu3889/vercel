{"version":3,"file":"static/js/json_index.e6c1a987.chunk.js","mappings":"sJA0FM,MAAOA,UAAgBC,EAAAA,EAA7BC,WAAAA,G,oBAKCC,OAAAC,eAAA,iB,gDAA4BC,KAAKC,MAAMC,UAAUC,iBAAYC,IA4G9D,CAtGQC,QAAAA,GAGN,GAFAC,MAAMD,WAEFL,KAAKO,QAAQ,SAAU,CAC1B,MAAMC,EAAQR,KAAKS,IAAI,SACvBT,KAAKU,SAASF,MAAQG,EAAAA,GAAeH,GAASA,OAAQJ,C,CAGvD,GAAIJ,KAAKO,QAAQ,UAAW,CAC3B,MAAMK,EAASZ,KAAKS,IAAI,UACxBT,KAAKU,SAASE,OAASD,EAAAA,GAAeC,GAAUA,OAASR,C,CAG1D,GAAIJ,KAAKO,QAAQ,eAAgB,CAChCP,KAAKU,SAASG,QACd,MAAMC,EAAcd,KAAKS,IAAI,eAC7BT,KAAKU,SAASI,YAA6B,MAAfA,OAAsBV,EAAYU,C,CAG3Dd,KAAKO,QAAQ,gBAChBP,KAAKU,SAASG,QACdb,KAAKU,SAASK,WAAaf,KAAKS,IAAI,eAGjCT,KAAKO,QAAQ,mBAChBP,KAAKU,SAASG,QACdb,KAAKU,SAASM,cAAgBhB,KAAKS,IAAI,kBAGpCT,KAAKO,QAAQ,mBAChBP,KAAKU,SAASG,QACdb,KAAKU,SAASO,cAAgBjB,KAAKS,IAAI,kBAGpCT,KAAKO,QAAQ,mBAChBP,KAAKU,SAASG,QACdb,KAAKU,SAASQ,cAAgBlB,KAAKS,IAAI,mBAGpCT,KAAKO,QAAQ,QAAUP,KAAKO,QAAQ,WACvCP,KAAKU,SAASG,QACdb,KAAKmB,QAEP,CAEUA,KAAAA,GACT,MAAMC,EAAMpB,KAAKS,IAAI,OACrB,GAAIW,EAAK,CACR,MAAMC,EAAQ,IAAIC,MAClBD,EAAME,YAAcvB,KAAKS,IAAI,OAAQ,aACrCY,EAAMD,IAAMA,EACZ,MAAMI,EAASxB,KAAKwB,OAEpBH,EAAMI,SAASC,MAAK,KACnB1B,KAAKU,SAASW,MAAQA,EACtBrB,KAAK2B,eACAH,EAAOI,cAAgBJ,EAAOK,UAAU,WAC5CL,EAAOM,SAAS,SAAU,CAAEC,KAAM,SAAUC,OAAQhC,M,IAEnDiC,OAAOC,KACJV,EAAOI,cAAgBJ,EAAOK,UAAU,cAC5CL,EAAOM,SAAS,YAAa,CAAEC,KAAM,YAAaC,OAAQhC,M,IAK9D,CAEO2B,WAAAA,GACNrB,MAAMqB,cAEN,MAAMN,EAAQrB,KAAKU,SAASW,MAC5B,GAAIA,EAAO,CACV,IAAIc,EAAInC,KAAKoC,WAAW,QAASpC,KAAKS,IAAI,UACtC4B,EAAIrC,KAAKoC,WAAW,SAAUpC,KAAKS,IAAI,WAC3C,MAAM6B,EAAIjB,EAAMb,OAASa,EAAMT,OAASS,EAAMb,MAAQa,EAAMT,OAAS,EAEjED,EAAAA,GAAewB,IAAMxB,EAAAA,GAAe0B,IACvCrC,KAAKU,SAASF,MAAQ2B,EACtBnC,KAAKU,SAASE,OAASyB,GAEf1B,EAAAA,GAAewB,IAAMG,EAC7BD,EAAIF,EAAIG,EAEA3B,EAAAA,GAAe0B,IAAMC,EAC7BH,EAAIE,EAAIC,GAGRH,EAAId,EAAMb,MACV6B,EAAIhB,EAAMT,QAGPD,EAAAA,GAAewB,KAClBnC,KAAKU,SAASF,MAAQ2B,GAEnBxB,EAAAA,GAAe0B,KAClBrC,KAAKU,SAASE,OAASyB,GAExBrC,KAAKuC,kBACLvC,KAAKwC,W,CAEP,EAzGA1C,OAAAC,eAAAJ,EAAA,a,gDAAkC,YAClCG,OAAAC,eAAAJ,EAAA,c,gDAA0CC,EAAAA,EAAO6C,WAAWC,OAAO,CAAC/C,EAAQgD,a,wFCjEvE,MAAOC,UAAkBC,EAAAA,EAA/BhD,WAAAA,G,oBASCC,OAAAC,eAAA,mB,gDAAqCC,KAAK8C,SAASC,KAAKC,EAAAA,EAAOC,IAAIjD,KAAKC,MAAO,CAAEO,MAAO,GAAII,OAAQ,GAAIsC,UAAW,CAAC,aAKpHpD,OAAAC,eAAA,mB,gDAAqCC,KAAK8C,SAASC,KAAKC,EAAAA,EAAOC,IAAIjD,KAAKC,MAAO,CAAEO,MAAO,GAAII,OAAQ,GAAIsC,UAAW,CAAC,aAKpHpD,OAAAC,eAAA,oB,gDAAsCC,KAAK8C,SAASC,KAAKC,EAAAA,EAAOC,IAAIjD,KAAKC,MAAO,CAAEO,MAAO,GAAII,OAAQ,GAAIsC,UAAW,CAAC,cAKrHpD,OAAAC,eAAA,kB,yDACAD,OAAAC,eAAA,wB,wDA+ED,CA7EWoD,SAAAA,GACT7C,MAAM6C,YAENnD,KAAKoD,IAAI,WAAY,YAErBpD,KAAKoD,IAAI,SAAUpD,KAAKC,MAAMoD,gBAC9BrD,KAAKsD,OAAO,aAEZtD,KAAKuD,WAAWC,OAAO,CACtBC,KAAMC,EAAAA,EAAST,IAAIjD,KAAKC,MAAO,CAAEiD,UAAW,CAAC,UAC7CS,YAAQvD,IAGTJ,KAAK4D,YAAYJ,OAAO,CACvBC,KAAMC,EAAAA,EAAST,IAAIjD,KAAKC,MAAO,CAAEiD,UAAW,CAAC,UAC7CS,YAAQvD,IAGTJ,KAAK6D,WAAWL,OAAO,CACtBC,KAAMC,EAAAA,EAAST,IAAIjD,KAAKC,MAAO,CAAEiD,UAAW,CAAC,UAC7CS,YAAQvD,GAEV,CAEO0D,gBAAAA,GAGN,GAFAxD,MAAMwD,mBAEF9D,KAAKO,QAAQ,UAAW,CAC3B,MAAMyB,EAAShC,KAAKS,IAAI,UAElBsD,EAAW/D,KAAKgE,cAAchC,OAChCA,IACCA,aAAkBiC,EAAAA,IACrBjE,KAAKkE,gBAAkBlE,KAAKmE,YAAYnC,EAAOoC,SAASC,GAAG,SAAUC,IAChEA,GAAStC,EAAOvB,IAAI,gBACvBT,KAAK4D,YAAYR,IAAI,YAAY,GAGjCpD,KAAK4D,YAAYR,IAAI,YAAY,GAG9BkB,GAAStC,EAAOvB,IAAI,gBACvBT,KAAKuD,WAAWH,IAAI,YAAY,GAGhCpD,KAAKuD,WAAWH,IAAI,YAAY,E,KAGlCpD,KAAKuE,KAAK/C,OAAOgD,KAAK,cAAc,KAC/BxC,EAAOvB,IAAI,UAAYuB,EAAOvB,IAAI,iBACrCT,KAAK4D,YAAYR,IAAI,YAAY,E,KAKpCpD,KAAKyE,UAAY,IAAIC,EAAAA,GAAc,CAClC1E,KAAKuD,WAAW/B,OAAO6C,GAAG,SAAS,KAClCrC,EAAO2C,QAAQ,IAEhB3E,KAAK4D,YAAYpC,OAAO6C,GAAG,SAAS,KACnCrC,EAAO4C,SAAS,IAEjB5E,KAAK6D,WAAWrC,OAAO6C,GAAG,SAAS,KAClCrC,EAAO6C,QAAQ,OAIdd,IACC/D,KAAKyE,WACRzE,KAAKyE,UAAUK,UAEZ9E,KAAKkE,iBACRlE,KAAKkE,gBAAgBY,U,CAIzB,EArGAhF,OAAAC,eAAA6C,EAAA,a,gDAAkC,cAClC9C,OAAAC,eAAA6C,EAAA,c,gDAA0CC,EAAAA,EAAUJ,WAAWC,OAAO,CAACE,EAAUD,a,oHC8C5E,MAAOsB,UAA0BpB,EAAAA,EAAvChD,WAAAA,G,oBAQCC,OAAAC,eAAA,Y,yDACAD,OAAAC,eAAA,a,yDACAD,OAAAC,eAAA,a,yDAGAD,OAAAC,eAAA,oB,gDAAqD,CAAC,IACtDD,OAAAC,eAAA,mB,gDAA+B,IAC/BD,OAAAC,eAAA,e,gDAA2B,IAC3BD,OAAAC,eAAA,e,gDAA2B,IAE3BD,OAAAC,eAAA,iB,yDAQAD,OAAAC,eAAA,iB,gDAAkBC,KAAK8C,SAASC,KAAKF,EAAAA,EAAUI,IAAIjD,KAAKC,MAAO,CAC9DO,MAAOuE,EAAAA,GACPnE,OAAQmE,EAAAA,GACRC,EAAG,EACHC,EAAG,EACHC,WAAW,EACXC,WAAYC,EAAAA,EAAUnC,IAAIjD,KAAKC,MAAO,CACrCoF,MAAMC,EAAAA,EAAAA,IAAM,UACZC,YAAa,SAIfzF,OAAAC,eAAA,iB,wDA6SD,CA3SWoD,SAAAA,GACT7C,MAAM6C,YAEN,MAAM3B,EAASxB,KAAKoE,SAAS5C,OAE7BxB,KAAKwF,WAAWzC,KAAKvB,EAAO6C,GAAG,eAAgBoB,IAC9CzF,KAAK0F,gBAAgBD,EAAM,KAG5BzF,KAAKwF,WAAWzC,KAAKvB,EAAO6C,GAAG,mBAAoBoB,IAClDzF,KAAK2F,cAAcF,EAAM,KAG1BzF,KAAKwF,WAAWzC,KAAKvB,EAAO6C,GAAG,qBAAsBoB,IACpDzF,KAAK4F,gBAAgBH,EAAM,KAG5B,MAAMI,EAAK7F,KAAKoE,SAAS3D,IAAI,cACzBoF,IACHA,EAAGC,SAASC,IAAI,SAAUvF,GACF,EAAhBwF,OAAOxF,KAEfqF,EAAGC,SAASC,IAAI,UAAWnF,GACF,EAAjBoF,OAAOpF,KAEfiF,EAAGC,SAASC,IAAI,KAAMf,GACdgB,OAAOhB,GAAKa,EAAGrF,QAAU,EAAI,IAErCqF,EAAGC,SAASC,IAAI,KAAMd,GACde,OAAOf,GAAKY,EAAGjF,SAAW,EAAI,KAIvC,MAAMwD,EAAWpE,KAAKoE,SAEtBA,EAAS0B,SAASC,IAAI,KAAMf,IAC3B,GAAGrE,EAAAA,GAAeqE,GAAG,CACpB,IAAIiB,EAAYjG,KAAKS,IAAI,YAAa,IAClC0B,EAAIiC,EAAS5D,QAEjBwE,EAAIkB,KAAKC,IAAIhE,EAAI8D,EAAWjB,GAC5BA,EAAIkB,KAAKE,IAAIpG,KAAKQ,QAAU2B,EAAIiC,EAAS3D,IAAI,QAAS,IAAM,EAAIwF,GAAYjB,E,CAE7E,OAAOA,CAAC,IAGTZ,EAAS0B,SAASC,IAAI,KAAMd,IAC3B,GAAGtE,EAAAA,GAAesE,GAAG,CACpB,IAAIgB,EAAYjG,KAAKS,IAAI,YAAa,IAClC4B,EAAI+B,EAASxD,SAEjBqE,EAAIiB,KAAKC,IAAI9D,EAAI4D,EAAWhB,GAC5BA,EAAIiB,KAAKE,IAAIpG,KAAKY,SAAWyB,EAAI+B,EAAS3D,IAAI,QAAS,IAAM,EAAIwF,GAAYhB,E,CAE9E,OAAOA,CAAC,GAEV,CAEOnB,gBAAAA,GACNxD,MAAMwD,mBACF9D,KAAKO,QAAQ,cAChBP,KAAKqG,kBAGNrG,KAAKoE,SAAS1D,SAAS4F,YAActG,KAAKS,IAAI,aAAa,EAC5D,CAGU4F,eAAAA,GACLrG,KAAKS,IAAI,cACRT,KAAKuG,UACRvG,KAAKuG,SAASzB,UAGf9E,KAAKuG,SAAWvG,KAAKwB,OAAO6C,GAAG,SAAUoB,IACxC,MAAMe,EAAaf,EAAMgB,cAIzB,IAAIC,EAAAA,GAAoBF,EAAYxG,MAInC,OAHAwG,EAAWG,iBAMZ,MAAMC,EAAQ5G,KAAK6G,QAAQpB,EAAMmB,OAEjC5G,KAAK8G,iBAAiBN,EAAWO,OAAQH,EAAM,IAGhD5G,KAAKwF,WAAWzC,KAAK/C,KAAKuG,WAGtBvG,KAAKuG,UACRvG,KAAKuG,SAASzB,SAGjB,CAEUgC,gBAAAA,CAAiBE,EAAeJ,GACzC,IAAIK,EAAOjH,KAAKS,IAAI,WAAY,GAC5ByG,EAAYlH,KAAKoE,SAAS3D,IAAI,QAAS,GAEvC0G,EAAeD,EACfF,EAAQ,EACXG,EAAeD,EAAYD,EAEnBD,EAAQ,IAChBG,EAAeD,EAAYD,GAGxBE,GAAgBD,GACnBlH,KAAKoH,YAAYR,EAAOO,EAE1B,CASOC,WAAAA,CAAYR,EAAeS,GAC7BA,IACHA,EAAQC,EAAAA,GAAiBD,EAAOrH,KAAKS,IAAI,eAAgB,GAAIT,KAAKS,IAAI,eAAgB,MAGvF,MAAMyG,EAAYlH,KAAKoE,SAAS3D,IAAI,QAAS,GAE7C,IAAIuE,EAAI4B,EAAM5B,EACVC,EAAI2B,EAAM3B,EAEVsC,EAAKvC,EACLwC,EAAKvC,EAET,MAAMb,EAAWpE,KAAKoE,SAEtB,IAGIqD,EAAKF,GAAOvC,EAHPZ,EAASY,KAGQkC,EAAYG,EAClCK,EAAKF,GAAOvC,EAHPb,EAASa,KAGQiC,EAAYG,EAItC,OAFArH,KAAK2H,WAAWF,EAAIC,EAAIL,GAEjBrH,KAAK4H,GACb,CAOOjD,MAAAA,GACN,OAAO3E,KAAKoH,YAAY,CAAEpC,EAAGhF,KAAKQ,QAAU,EAAGyE,EAAGjF,KAAKY,SAAW,GAAKZ,KAAKoE,SAAS3D,IAAI,QAAS,GAAKT,KAAKS,IAAI,WAAY,GAC7H,CAOOmE,OAAAA,GACN,OAAO5E,KAAKoH,YAAY,CAAEpC,EAAGhF,KAAKQ,QAAU,EAAGyE,EAAGjF,KAAKY,SAAW,GAAKZ,KAAKoE,SAAS3D,IAAI,QAAS,GAAKT,KAAKS,IAAI,WAAY,GAC7H,CAOOoE,MAAAA,GACN,OAAO7E,KAAK2H,WAAW,EAAG,EAAG,EAC9B,CAEUA,UAAAA,CAAW3C,EAAWC,EAAWX,GAC1C,MAAMuD,EAAW7H,KAAKS,IAAI,oBAAqB,GACzCqH,EAAS9H,KAAKS,IAAI,mBAElB2D,EAAWpE,KAAKoE,SACtBpE,KAAK+H,KAAO3D,EAAS4D,QAAQ,CAAEC,IAAK,IAAKC,GAAIlD,EAAG6C,SAAUA,EAAUC,OAAQA,IAC5E9H,KAAKmI,KAAO/D,EAAS4D,QAAQ,CAAEC,IAAK,IAAKC,GAAIjD,EAAG4C,SAAUA,EAAUC,OAAQA,IAC5E9H,KAAK4H,IAAMxD,EAAS4D,QAAQ,CAAEC,IAAK,QAASC,GAAI5D,EAAOuD,SAAUA,EAAUC,OAAQA,GACpF,CAGUnC,aAAAA,CAAcyC,GACvBpI,KAAKqI,YAAc,CAAC,CACrB,CAEU3C,eAAAA,CAAgBD,GAEzB,MAAMrB,EAAWpE,KAAKoE,SAEtBpE,KAAKsI,WAAalE,EAAS3D,IAAI,QAAS,GACxC,MAAM8H,EAAanE,EAASiE,YAE5B,IAAIG,EAAQC,EAAAA,GAAaF,GAAYG,OAErC,GAAa,GAATF,EAAY,CAEf,IAAIG,EAAYJ,EAAW,GACtBI,IACJA,EAAYJ,EAAW,IAGpBI,GAAcA,EAAU3D,GAAKS,EAAMmB,MAAM5B,GAAK2D,EAAU1D,GAAKQ,EAAMmB,MAAM3B,IAC5EuD,EAAQ,E,CAIV,GAAIA,EAAQ,EAAG,CACdxI,KAAK4I,OAASxE,EAASY,IACvBhF,KAAK6I,OAASzE,EAASa,IAEvB,MAAM6D,EAAS1E,EAAS2E,kBACxB,GAAID,EAAQ,CACX,IAAIE,EAAYhJ,KAAKiJ,YAAYH,GAC7BE,IACH5E,EAASiE,YAAYS,GAAUE,E,EAInC,CAGUpD,eAAAA,CAAgBH,GACzB,MAEMyD,EAFgBzD,EAAMgB,cAEIyC,UAE5BlJ,KAAKS,IAAI,cACRyI,IACHlJ,KAAKiJ,YAAYC,GAAazD,EAAMmB,MAEhC6B,EAAAA,GAAazI,KAAKoE,SAASiE,aAAaK,OAAS,IACpD1I,KAAKmJ,cAKT,CAEUA,YAAAA,GACT,IAAIC,EAAI,EACJb,EAA4B,GAC5Bc,EAA4B,GAWhC,GATAZ,EAAAA,GAAazI,KAAKoE,SAASiE,aAAa,CAACiB,EAAG1C,KAC3C2B,EAAWa,GAAKxC,EAChB,IAAIoC,EAAYhJ,KAAKiJ,YAAYK,GAC7BN,IACHK,EAAWD,GAAKJ,GAEjBI,GAAG,IAGAb,EAAWG,OAAS,GAAKW,EAAWX,OAAS,EAAG,CAEnD1I,KAAKoE,SAASmF,aAAc,EAE5B,IAAIC,EAAajB,EAAW,GACxBkB,EAAalB,EAAW,GAExBmB,EAAaL,EAAW,GACxBM,EAAaN,EAAW,GAE5B,GAAIG,GAAcC,GAAcC,GAAcC,EAAY,CACzDH,EAAaxJ,KAAK6G,QAAQ2C,GAC1BC,EAAazJ,KAAK6G,QAAQ4C,GAE1BC,EAAa1J,KAAK6G,QAAQ6C,GAC1BC,EAAa3J,KAAK6G,QAAQ8C,GAE1B,IAAIC,EAAkB1D,KAAK2D,MAAMJ,EAAWzE,EAAIwE,EAAWxE,EAAGyE,EAAWxE,EAAIuE,EAAWvE,GAGpFoC,EAFkBnB,KAAK2D,MAAMF,EAAW3E,EAAI0E,EAAW1E,EAAG2E,EAAW1E,EAAIyE,EAAWzE,GAE1D2E,EAAkB5J,KAAKsI,WACjDwB,EAAa,CAAE9E,EAAG0E,EAAW1E,GAAK2E,EAAW3E,EAAI0E,EAAW1E,GAAK,EAAGC,EAAGyE,EAAWzE,GAAK0E,EAAW1E,EAAIyE,EAAWzE,GAAK,GACtH8E,EAAa,CAAE/E,EAAGwE,EAAWxE,GAAKyE,EAAWzE,EAAIwE,EAAWxE,GAAK,EAAGC,EAAGuE,EAAWvE,GAAKwE,EAAWxE,EAAIuE,EAAWvE,GAAK,GAEtH+E,EAAKhK,KAAK4I,QAAU,EACpBqB,EAAKjK,KAAK6I,QAAU,EAEpB3B,EAAYlH,KAAKsI,WAEjBb,EAAKqC,EAAW9E,IAAOgF,EAAKD,EAAW/E,GAAKkC,EAAYG,EACxDK,EAAKoC,EAAW7E,IAAOgF,EAAKF,EAAW9E,GAAKiC,EAAYG,EAE5DrH,KAAKoE,SAASZ,OAAO,CACpBwB,EAAGyC,EACHxC,EAAGyC,EACHpD,MAAO+C,G,EAIX,EAjVAvH,OAAAC,eAAAkE,EAAA,a,gDAAkC,sBAClCnE,OAAAC,eAAAkE,EAAA,c,gDAA0CpB,EAAAA,EAAUJ,WAAWC,OAAO,CAACuB,EAAkBtB,a,gDCrDpF,MAAgBuH,UAAiBC,EAAAA,GAQ5BhH,SAAAA,GAET7C,MAAM8J,sBACP,CAKOC,OAAAA,CAAQC,GACd,MAAO,CACNC,aAAcA,CAACC,EAAiBC,KAAlBF,EAEhB,CAEOlK,QAAAA,GACNC,MAAMD,UAOP,CAKOqK,SAAAA,CAAU1I,GAChB,MAAM2I,EAAiB3K,KAAKS,IAAI,UAChC,GAAIkK,EAAgB,CACnB,IAAIC,EAASD,EAAeE,eAE5B,MAAMC,EAAK9I,EAAO6E,QAAQ,CAAE7B,EAAG4F,EAAOG,KAAM9F,EAAG2F,EAAOI,MAChDC,EAAKjJ,EAAO6E,QAAQ,CAAE7B,EAAG4F,EAAOM,MAAOjG,EAAG2F,EAAOI,MACjDG,EAAKnJ,EAAO6E,QAAQ,CAAE7B,EAAG4F,EAAOM,MAAOjG,EAAG2F,EAAOQ,SACjDC,EAAKrJ,EAAO6E,QAAQ,CAAE7B,EAAG4F,EAAOG,KAAM9F,EAAG2F,EAAOQ,SAEtD,MAAO,CACNL,KAAM7E,KAAKC,IAAI2E,EAAG9F,EAAGiG,EAAGjG,EAAGmG,EAAGnG,EAAGqG,EAAGrG,GACpCgG,IAAK9E,KAAKC,IAAI2E,EAAG7F,EAAGgG,EAAGhG,EAAGkG,EAAGlG,EAAGoG,EAAGpG,GACnCiG,MAAOhF,KAAKE,IAAI0E,EAAG9F,EAAGiG,EAAGjG,EAAGmG,EAAGnG,EAAGqG,EAAGrG,GACrCoG,OAAQlF,KAAKE,IAAI0E,EAAG7F,EAAGgG,EAAGhG,EAAGkG,EAAGlG,EAAGoG,EAAGpG,G,CAGxC,OAAOjD,EAAOtB,SAAS4K,gBACxB,EAhDAxL,OAAAC,eAAAmK,EAAA,a,gDAAkC,aAClCpK,OAAAC,eAAAmK,EAAA,c,gDAA0CC,EAAAA,GAAO1H,WAAWC,OAAO,CAACwH,EAASvH,a,uFCPxE,MAAO4I,UAAuBrB,EAAAA,EAW5BG,OAAAA,CAAQrI,GACd,MAAMwJ,EAAWxL,KAAKS,IAAI,WAAY,GACtC,IAAImK,EAAS5K,KAAK0K,UAAU1I,GAExByJ,EAAIb,EAAOG,MAAQ,EACnBzI,EAAIsI,EAAOM,OAAS,EACpBQ,EAAId,EAAOI,KAAO,EAClBW,EAAIf,EAAOQ,QAAU,EAErBQ,EAAMtE,EAAAA,GAAUkE,GAChBK,EAAMvE,EAAAA,GAAUkE,GAEhBrJ,EAAIyJ,GAAOtJ,EAAImJ,GACfpJ,EAAIwJ,GAAOF,EAAID,GAEV,GAALvJ,IACHA,EAAI,GAGI,GAALE,IACHA,EAAI,GAGL,IAAIyJ,EAAS5F,KAAKE,IAAIjE,EAAGE,GAEzB,MAAM0J,EAAW/L,KAAKC,MAAMC,UAAU8L,qBACrCP,EACAC,EACAD,EAAIK,EAASF,EACbF,EAAII,EAASD,GAGRI,EAAQjM,KAAKS,IAAI,SACvB,GAAIwL,EAAO,CACV,IAAI7C,EAAI,EACR8C,EAAAA,GAAYD,GAAQE,IAEnB,IAAIC,EAASD,EAAKC,OAEbzL,EAAAA,GAAeyL,KACnBA,EAAShD,GAAK6C,EAAMvD,OAAS,IAG9B,IAAI2D,EAAUF,EAAKE,QAEd1L,EAAAA,GAAe0L,KACnBA,EAAU,GAGX,IAAI/G,EAAQ6G,EAAK7G,MAEjB,GAAIA,EAAO,CAEV,MAAMgH,EAAUH,EAAKG,QACjBA,IACHhH,EAAQiH,EAAAA,GAAMD,QAAQhH,EAAOgH,IAG9B,MAAME,EAAWL,EAAKK,SAClBA,IACHlH,EAAQiH,EAAAA,GAAMC,SAASlH,EAAOkH,IAG/BT,EAASxB,aAAa6B,EAAQ,QAAU9G,EAAMhD,EAAI,IAAMgD,EAAMmH,EAAI,IAAMnH,EAAMqG,EAAI,IAAMU,EAAU,I,CAEnGjD,GAAG,G,CAGL,OAAO2C,CACR,EA3EAjM,OAAAC,eAAAwL,EAAA,a,gDAAkC,mBAClCzL,OAAAC,eAAAwL,EAAA,c,gDAA0CrB,EAAAA,EAASzH,WAAWC,OAAO,CAAC6I,EAAe5I,a,ojCCJhF,MAAO+J,UAAahJ,EAAAA,EAQlBiJ,cAAAA,GACNrM,MAAMqM,kBAEF3M,KAAKO,QAAQ,WAAaP,KAAKO,QAAQ,gBAAkBP,KAAKO,QAAQ,aACzEP,KAAK4M,QAAS,EAEhB,CAEOvM,QAAAA,GAGN,GAFAC,MAAMD,WAEFL,KAAK4M,OAAQ,CAChB,MAAMC,EAAU7M,KAAKU,SACf4B,EAAItC,KAAKS,IAAI,SAAU,GACvBqM,EAAKpG,EAAAA,GAAuB1G,KAAKS,IAAI,cAAe,GAAI6B,GACxDyK,EAAS/M,KAAKS,IAAI,SAAU,GAC5BwG,EAAOf,KAAK8G,GAAKD,EACvB,IAAIE,EAAQ/G,KAAK8G,GAAK,EAAI,EAE1BH,EAAQK,OAAO,GAAK5K,GAEpB,IAAK,IAAI8G,EAAI,EAAGA,EAAI2D,EAAQ3D,IAC3ByD,EAAQM,OAAOjH,KAAK0F,IAAIqB,GAAS3K,EAAG4D,KAAK2F,IAAIoB,GAAS3K,GACtD2K,GAAShG,EAET4F,EAAQM,OAAOjH,KAAK0F,IAAIqB,GAASH,EAAI5G,KAAK2F,IAAIoB,GAASH,GACvDG,GAAShG,EAEV4F,EAAQM,OAAO,GAAI7K,GACnBuK,EAAQO,W,CAEV,EAlCAtN,OAAAC,eAAA2M,EAAA,a,gDAAkC,SAClC5M,OAAAC,eAAA2M,EAAA,c,gDAA0ChJ,EAAAA,EAASjB,WAAWC,OAAO,CAACgK,EAAK/J,c,sICkCtE,MAAO0K,UAAmBxK,EAAAA,EAAhChD,WAAAA,G,oBAOCC,OAAAC,eAAA,uB,gDAA4CC,KAAK8C,SAASC,KAAKF,EAAAA,EAAUI,IAAIjD,KAAKC,MAAO,CAAC,MAO1FH,OAAAC,eAAA,wB,gDAA6CC,KAAK8C,SAASC,KAAKF,EAAAA,EAAUI,IAAIjD,KAAKC,MAAO,CAAC,MAO3FH,OAAAC,eAAA,mB,gDAAoCC,KAAKsN,eAAexK,SAASC,KAAKwK,EAAAA,EAAMtK,IAAIjD,KAAKC,MAAO,CAAEiD,UAAW,CAAC,cAO1GpD,OAAAC,eAAA,iB,gDAAkCC,KAAKsN,eAAexK,SAASC,KAAKwK,EAAAA,EAAMtK,IAAIjD,KAAKC,MAAO,CAAEiD,UAAW,CAAC,YA+BxGpD,OAAAC,eAAA,gB,gDAA0D,IAAIyN,EAAAA,GAC7DC,EAAAA,GAASxK,IAAI,CAAC,IACd,IAAMyK,EAAAA,EAAiBC,KAAK3N,KAAKC,MAAO,CACvCiD,UAAWwD,EAAAA,GAAiB1G,KAAK4N,QAAQC,SAASpN,IAAI,YAAa,IAAK,CAACT,KAAKS,IAAI,eAAgB,aAAc,YAC9G,CAACT,KAAK4N,QAAQC,cA0InB,CApKW1K,SAAAA,GACTnD,KAAK8N,UAAU5K,UAAYwD,EAAAA,GAAiB1G,KAAK8N,UAAU5K,UAAW,CAAC,aAAclD,KAAK8N,UAAUC,cACpGzN,MAAM6C,YACNnD,KAAKoD,IAAI,UAAW4K,EAAAA,EAAQ/K,IAAIjD,KAAKC,MAAO,CAC3CiD,UAAW,CAAC,gBAEd,CAKO+K,UAAAA,GACN,MAAMC,EAASlO,KAAK4N,QAAQO,OAE5B,OADAD,EAAOE,OAAOC,OAAO,WAAY,CAAC,GAC3BH,CACR,CAwBOI,SAAAA,CAAUC,EAAeC,EAAelJ,GAC9C,MAAMmJ,EAAUzO,KAAK0O,aACrB,GAAID,GAAW9N,EAAAA,GAAe4N,GAAQ,CAErC,MAAMI,EAAa3O,KAAKS,IAAI,aAAc,GAG1C,IAAImO,GAAKL,EAAQI,IAFA3O,KAAKS,IAAI,WAAY,GAEKkO,IAExCC,GAAKC,KAAYD,IAAMC,KAAYC,MAAMF,MAC3CA,EAAI,IAGL,MAAMG,EAAa/O,KAAKS,IAAI,cACtBuO,EAAWhP,KAAKS,IAAI,YAW1B,IAAIwO,EATCT,IACJA,EAAOxO,KAAKkP,qBAAqBC,OAAOZ,IAGpCjJ,IACJA,EAAQiH,EAAAA,GAAM6C,YAAYR,EAAGG,EAAYC,IAG1CP,EAAQY,MAAMjM,IAAI,OAAQoL,GAIzBS,EAD8B,YAA3BjP,KAAKS,IAAI,eACRT,KAAKsP,gBAAgBC,SAAS,CAAEvK,EAAG,EAAGC,EAAGjF,KAAKwP,eAAiB,EAAIZ,KAGnE5O,KAAKsP,gBAAgBC,SAAS,CAAEvK,EAAGhF,KAAKyP,aAAeb,EAAG3J,EAAG,IAGlE,IAAIE,EAAasJ,EAAQhO,IAAI,cACzB0E,GACHA,EAAW/B,IAAI,OAAQkC,GAExBmJ,EAAQrL,IAAI,UAAW6L,GACvBR,EAAQiB,M,CAEV,CAEO5L,gBAAAA,GACNxD,MAAMwD,mBAEN,MAAMwJ,EAAiBtN,KAAKsN,eACtBS,EAAc/N,KAAKS,IAAI,eACvBkP,EAAa3P,KAAK2P,WAClBC,EAAW5P,KAAK4P,SAChBnB,EAAUzO,KAAK0O,aAyBrB,GAvBI1O,KAAKO,QAAQ,iBACG,YAAfwN,GACH/N,KAAKsP,gBAAgB9L,OAAO,CAAEG,OAAQ3D,KAAKC,MAAMoD,eAAgBzC,OAAQmE,EAAAA,KACzE/E,KAAKoD,IAAI,SAAUpD,KAAKC,MAAM4P,kBAC9BF,EAAWnM,OAAO,CAAEyB,EAAGF,EAAAA,GAAMC,OAAG5E,EAAW0P,QAAS/K,EAAAA,GAAMgL,QAAShL,EAAAA,KACnE6K,EAASpM,OAAO,CAAEyB,EAAG,EAAGD,OAAG5E,EAAW0P,QAAS,EAAGC,QAAShL,EAAAA,KAC3DuI,EAAe9J,OAAO,CAAE5C,OAAQmE,EAAAA,GAAMvE,WAAOJ,IACzCqO,GACHA,EAAQrL,IAAI,qBAAsB,gBAInCpD,KAAKsP,gBAAgB9L,OAAO,CAAEG,OAAQ3D,KAAKC,MAAM4P,iBAAkBrP,MAAOuE,EAAAA,KAC1E/E,KAAKoD,IAAI,SAAUpD,KAAKC,MAAMoD,gBAC9BsM,EAAWnM,OAAO,CAAEwB,EAAG,EAAGC,OAAG7E,EAAW2P,QAAS,EAAGD,QAAS,IAC7DF,EAASpM,OAAO,CAAEwB,EAAGD,EAAAA,GAAME,OAAG7E,EAAW2P,QAAShL,EAAAA,GAAM+K,QAAS,IACjExC,EAAe9J,OAAO,CAAEhD,MAAOuE,EAAAA,GAAMnE,YAAQR,IACzCqO,GACHA,EAAQrL,IAAI,qBAAsB,cAKjCpD,KAAKO,QAAQ,aAAc,CAC9B,MAAMyP,EAAYhQ,KAAKS,IAAI,YAAa,GAClCsO,EAAa/O,KAAKS,IAAI,cACtBuO,EAAWhP,KAAKS,IAAI,YAE1B,GADAT,KAAKsP,gBAAgBxM,SAASjC,QAC1BmP,EAAY,EACf,IAAK,IAAI5G,EAAI,EAAGA,EAAI4G,EAAW5G,IAAK,CACnC,MAAM8E,EAASlO,KAAKiO,aAED,YAAfF,EACH/N,KAAKsP,gBAAgBxM,SAASmN,UAAU/B,EAAQ,GAGhDlO,KAAKsP,gBAAgBxM,SAASC,KAAKmL,GAGhCa,GAAcC,GACjBd,EAAO9K,IAAI,OAAQmJ,EAAAA,GAAM6C,YAAYhG,EAAI4G,EAAWjB,EAAYC,G,MAI9D,GAAiB,GAAbgB,EAAgB,CACxB,MAAM9B,EAASlO,KAAKiO,aACpBjO,KAAKsP,gBAAgBxM,SAASC,KAAKmL,GACnC,MAAMnC,EAAWR,EAAAA,EAAetI,IAAIjD,KAAKC,MAAO,CAAEgM,MAAO,CAAC,CAAE3G,MAAOyJ,GAAc,CAAEzJ,MAAO0J,MAE1F,GAAmB,YAAfjB,EAA2B,CAC9BhC,EAAS3I,IAAI,WAAY,IACzB,IAAI6I,EAAQF,EAAStL,IAAI,SACrBwL,GACHA,EAAMiE,S,MAIPnE,EAAS3I,IAAI,WAAY,GAEtB2L,GAAcC,GACjBd,EAAO9K,IAAI,eAAgB2I,E,GAK1B/L,KAAKO,QAAQ,cAAgBP,KAAKO,QAAQ,gBAC7CoP,EAAWvM,IAAI,OAAQpD,KAAKS,IAAI,YAAaT,KAAKkP,qBAAqBC,OAAOnP,KAAKS,IAAI,aAAc,OAGlGT,KAAKO,QAAQ,YAAcP,KAAKO,QAAQ,cAC3CqP,EAASxM,IAAI,OAAQpD,KAAKS,IAAI,UAAWT,KAAKkP,qBAAqBC,OAAOnP,KAAKS,IAAI,WAAY,KAEjG,EA1KAX,OAAAC,eAAAsN,EAAA,a,gDAAkC,eAClCvN,OAAAC,eAAAsN,EAAA,c,gDAA0CxK,EAAAA,EAAUJ,WAAWC,OAAO,CAAC2K,EAAW1K,c,2HCxF7E,MAAOwN,UAAeC,EAAAA,EAUjBjN,SAAAA,GACTnD,KAAKqQ,uBACL/P,MAAM6C,YAENnD,KAAKsQ,QAAQC,WAAW,WAAW,GACnCvQ,KAAKwQ,MAAMD,WAAW,WAAW,EAClC,CAKOE,WAAAA,GACNnQ,MAAMmQ,cACN,MAAMC,EAAY1Q,KAAK0Q,UACvB1Q,KAAKsQ,QAAQ9M,OAAO,CAAEwB,EAAG0L,EAAU1L,IAAKC,EAAGyL,EAAUzL,MACrDjF,KAAK2Q,OAAO,MAAO3Q,KAAKS,IAAI,SAC7B,EApBAX,OAAAC,eAAAoQ,EAAA,a,gDAAkC,WAClCrQ,OAAAC,eAAAoQ,EAAA,c,gDAA0CC,EAAAA,EAAU3N,WAAWC,OAAO,CAACyN,EAAOxN,c,wGCwDzE,MAAOiO,UAAqBC,EAAAA,EAAlChR,WAAAA,G,oBAOCC,OAAAC,eAAA,e,gDAAmC+Q,SAASC,cAAc,YAC1DjR,OAAAC,eAAA,gB,gDAA2CC,KAAKgR,OAAOC,WAAW,QAElEnR,OAAAC,eAAA,oB,iDAAiC,GAmFlC,CAjFQ4M,cAAAA,GAEN3M,KAAKgR,OAAOxQ,MAAQR,KAAKS,IAAI,QAAS,KACtCT,KAAKgR,OAAOpQ,OAASZ,KAAKS,IAAI,SAAU,MAEpCT,KAAKO,QAAQ,SAAWP,KAAKO,QAAQ,YAAcP,KAAKO,QAAQ,eAAiBP,KAAKO,QAAQ,eAAiBP,KAAKO,QAAQ,WAAaP,KAAKO,QAAQ,kBAAoBP,KAAKO,QAAQ,kBAC1LP,KAAKkR,aAAc,GAEpB5Q,MAAMqM,gBACP,CAGOtM,QAAAA,GAGN,GAFAC,MAAMD,WAEFL,KAAKkR,YAAa,CACrB,MAAM1Q,EAAQR,KAAKS,IAAI,QAAS,KAC1BG,EAASZ,KAAKS,IAAI,SAAU,KAE5B0Q,EAAcnR,KAAKoR,QAAQC,aAAa,EAAG,EAAG7Q,EAAOI,GAErD0Q,EAAOpL,KAAKE,IAAI,EAAGpG,KAAKS,IAAI,OAAQ,IACpC8Q,EAAavR,KAAKS,IAAI,aAAc,GACpC+Q,EAAaxR,KAAKS,IAAI,aAAc,IAEpCgR,EAASzR,KAAKS,IAAI,SAAU,CAACT,KAAKS,IAAI,QAAS8L,EAAAA,GAAMmF,QAAQ,MAE7DC,EAAOnR,EAAQ8Q,EACfM,EAAOhR,EAAS0Q,EAChBO,EAAU7R,KAAKS,IAAI,UAAW,GAC9BqR,EAAgB9R,KAAKS,IAAI,gBAAiB,GAAK,EAC/CsR,EAAc/R,KAAKS,IAAI,cAAe,GAAK,EAEjD,IAAK,IAAI6B,EAAI,EAAGA,EAAIsP,EAAMtP,IAEzB,KAAIyP,EAAc,GACbzP,EAAIyP,GAAe7L,KAAK8L,MAAM1P,EAAIyP,IAKvC,IAAK,IAAInD,EAAI,EAAGA,EAAI+C,EAAM/C,IAAK,CAC9B,MAAMtJ,EAAQmM,EAAOvL,KAAK+L,MAAM/L,KAAKgM,SAAWT,EAAO/I,SACjDyJ,EAAmE,KAA1DZ,EAAarL,KAAKgM,UAAYV,EAAaD,IACpDa,EAAMlM,KAAKgM,SAEbJ,EAAgB,GACflD,EAAIkD,GAAiB5L,KAAK8L,MAAMpD,EAAIkD,IAKrCM,EAAMP,GACT7R,KAAKqS,aAAazD,EAAGtM,EAAGgP,EAAM9Q,EAAO2Q,EAAYmB,KAAMhN,EAAMhD,EAAGgD,EAAMmH,EAAGnH,EAAMqG,EAAGwG,E,CAKrFnS,KAAKoR,QAAQmB,aAAapB,EAAa,EAAG,GAC1CnR,KAAKwS,SAAWxS,KAAKoR,QAAQqB,cAAczS,KAAKgR,OAAQ,S,CAGzDhR,KAAKkR,aAAc,CACpB,CAEUwB,eAAAA,GACT,OAAO,CACR,CAEUL,YAAAA,CAAaM,EAAaC,EAAatB,EAAc9Q,EAAe8R,EAAyBO,EAAYC,EAAYC,EAAYC,GAC1I,IAAK,IAAIpE,EAAI+D,EAAMrB,EAAM1C,EAAI+D,EAAMrB,EAAOA,EAAM1C,IAC/C,IAAK,IAAItM,EAAIsQ,EAAMtB,EAAMhP,EAAIsQ,EAAMtB,EAAOA,EAAMhP,IAAK,CACpD,IAAI8G,EAAsB,GAAjB9G,EAAI9B,EAAQoO,GAErB0D,EAAKlJ,GAAKyJ,EACVP,EAAKlJ,EAAI,GAAK0J,EACdR,EAAKlJ,EAAI,GAAK2J,EACdT,EAAKlJ,EAAI,GAAK4J,C,CAGjB,EAxFAlT,OAAAC,eAAA6Q,EAAA,a,gDAAkC,iBAClC9Q,OAAAC,eAAA6Q,EAAA,c,gDAA0CC,EAAAA,EAAQpO,WAAWC,OAAO,CAACkO,EAAajO,c,wBC5C7E,MAAOsQ,UAAuB/I,EAAAA,EAW5BG,OAAAA,CAAQrI,GACd,MAAM4I,EAAS5K,KAAK0K,UAAU1I,GAE9B,IAAIgD,EAAI,EACJC,EAAI,EAEJwG,EAAIb,EAAOG,MAAQ,EACnBzI,EAAIsI,EAAOM,OAAS,EACpBQ,EAAId,EAAOI,KAAO,EAGtB,MAAMxK,EAAQ8B,EAAImJ,EACZ7K,GAHEgK,EAAOQ,QAAU,GAGNM,EAEnB,IAAIwH,EAASlR,EAAOvB,IAAI,UACpBE,EAAAA,GAAeuS,IAClBlO,EAAI,EACJC,EAAI,IAGJiO,EAAShN,KAAKC,IAAI3F,EAAOI,GAAU,EACnCoE,EAAIxE,EAAQ,EACZyE,EAAIrE,EAAS,GAGd,IAAIuS,EAAKnT,KAAKS,IAAI,KACd2S,EAAKpT,KAAKS,IAAI,KACR,MAAN0S,IACHnO,EAAI0B,EAAAA,GAAuByM,EAAI3S,IAGtB,MAAN4S,IACHnO,EAAIyB,EAAAA,GAAuB0M,EAAIxS,IAGhC,MAAMmL,EAAW/L,KAAKC,MAAMC,UAAUmT,qBAAqBrO,EAAGC,EAAG,EAAGD,EAAGC,EAAGiO,GACpEjH,EAAQjM,KAAKS,IAAI,SACvB,GAAIwL,EAAO,CACV,IAAI7C,EAAI,EACR8C,EAAAA,GAAYD,GAAQE,IAEnB,IAAIC,EAASD,EAAKC,OAEbzL,EAAAA,GAAeyL,KACnBA,EAAShD,GAAK6C,EAAMvD,OAAS,IAG9B,IAAI2D,EAAUF,EAAKE,QAEd1L,EAAAA,GAAe0L,KACnBA,EAAU,GAGX,IAAI/G,EAAQ6G,EAAK7G,MAEjB,GAAIA,EAAO,CAEV,MAAMgH,EAAUH,EAAKG,QACjBA,IACHhH,EAAQiH,EAAAA,GAAMD,QAAQhH,EAAOgH,IAG9B,MAAME,EAAWL,EAAKK,SAClBA,IACHlH,EAAQiH,EAAAA,GAAMC,SAASlH,EAAOkH,IAG/BT,EAASxB,aAAa6B,EAAQ,QAAU9G,EAAMhD,EAAI,IAAMgD,EAAMmH,EAAI,IAAMnH,EAAMqG,EAAI,IAAMU,EAAU,I,CAEnGjD,GAAG,G,CAIL,OAAO2C,CACR,EAhFAjM,OAAAC,eAAAkT,EAAA,a,gDAAkC,mBAClCnT,OAAAC,eAAAkT,EAAA,c,gDAA0C/I,EAAAA,EAASzH,WAAWC,OAAO,CAACuQ,EAAetQ,c,cCAhF,MAAO2Q,WAAsBzC,EAAAA,EAQ3BlE,cAAAA,GACNrM,MAAMqM,iBAEF3M,KAAKO,QAAQ,SAChBP,KAAK4M,QAAS,EAEhB,CAEU2G,KAAAA,GACTjT,MAAMiT,QAEN,MAAMC,EAAYxT,KAAKS,IAAI,aAAa,GAClCgT,EAAWzT,KAAKS,IAAI,YAAY,GAChCiT,EAAM1T,KAAKS,IAAI,MAAO,GACtB+K,EAAWxL,KAAKS,IAAI,WAAY,GACtC,IAAI0B,EAAInC,KAAKS,IAAI,QAAS,KACtB4B,EAAIrC,KAAKS,IAAI,SAAU,KACvByS,EAASlT,KAAKS,IAAI,SAAU,GAE5BkT,EAAiB,EAATT,EAAaQ,EACrBE,EAAiB,EAATV,EAAaQ,EAErB/B,EAAOzL,KAAK8L,MAAM7P,EAAIwR,GACtB/B,EAAO1L,KAAK8L,MAAM3P,EAAIuR,GAE1BD,EAAQxR,EAAIwP,EACZiC,EAAQvR,EAAIuP,EAEI,GAAZpG,IAEHxL,KAAKU,SAASsE,EAAI2O,EAAQrM,GAAAA,GAAUkE,GACpCxL,KAAKU,SAASuE,EAAI2O,EAAQtM,GAAAA,GAAUkE,IAGrC,MAAMlG,EAAQtF,KAAKS,IAAI,SACjBoT,EAAe7T,KAAKS,IAAI,iBAC1B6E,GAASuO,IACZ7T,KAAKU,SAASoT,UAAUxO,EAAOuO,GAGhC,IAAK,IAAIvR,EAAgB,GAAZkJ,EAAgB,EAAY,GAAPoG,EAAUtP,EAAW,EAAPsP,EAAUtP,IACzD,IAAK,IAAIsM,EAAgB,GAAZpD,EAAgB,EAAY,GAAPmG,EAAU/C,EAAW,EAAP+C,EAAU/C,IACzD,IAAK4E,GAAyB,IAAN,EAAJlR,IAA0B,IAAN,EAAJsM,IAA4B,IAAN,EAAJtM,IAA0B,IAAN,EAAJsM,GAAc,CACnF,IAAI5J,EAAI4J,EAAI+E,EACR1O,EAAI3C,EAAIsR,EACRH,IACHzO,GAAK2O,EAAQD,EAAM,EACnBzO,GAAK2O,EAAQF,EAAM,GAEpB1T,KAAKU,SAASqT,WAAW/O,EAAIkO,EAAQjO,EAAIiO,EAAQA,E,CAKhDM,GACHrR,EAAIA,EAAI,EAAU,EAANuR,EACZrR,EAAIA,EAAI,EAAU,EAANqR,IAGZvR,GAAKuR,EACLrR,GAAKqR,IAGFpO,GAASuO,IACZ7T,KAAKU,SAASsT,SAGhB,EAtEAlU,OAAAC,eAAAuT,GAAA,a,gDAAkC,kBAClCxT,OAAAC,eAAAuT,GAAA,c,gDAA0CzC,EAAAA,EAAQpO,WAAWC,OAAO,CAAC4Q,GAAc3Q,cC7B9E,MAAOsR,WAAoBpD,EAAAA,EAQzBlE,cAAAA,GACNrM,MAAMqM,iBAEF3M,KAAKO,QAAQ,SAChBP,KAAK4M,QAAS,EAEhB,CAEU2G,KAAAA,GACTjT,MAAMiT,QAEN,MAAMpR,EAAInC,KAAKS,IAAI,QAAS,KACtB4B,EAAIrC,KAAKS,IAAI,SAAU,KACvBiT,EAAM1T,KAAKS,IAAI,MAAO,GACtByT,EAAclU,KAAKS,IAAI,cAAe,GAE5C,GAAKiT,EAIA,CACJ,IAAIzM,EAAOyM,EAAMQ,EACb1L,EAAQnG,EAAI4E,EAEhB,IAAK,IAAImC,GAAKZ,EAAOY,EAAY,EAARZ,EAAWY,IAAK,CACxC,MAAMnE,EAAIiB,KAAK8L,MAAM5I,EAAInC,EAAOA,EAAO,GAAK,GAC5CjH,KAAKU,SAASwM,QAAQ/K,EAAG8C,GACzBjF,KAAKU,SAASyM,OAAW,EAAJhL,EAAO8C,E,OAV7BjF,KAAKU,SAASwM,OAAO,EAAG,GACxBlN,KAAKU,SAASyM,OAAOhL,EAAG,GAazBnC,KAAKU,SAASyT,UAAUD,EAAalU,KAAKS,IAAI,SAAUT,KAAKS,IAAI,iBAEjE,IAAI2T,EAAkBpU,KAAKS,IAAI,mBAC3BE,EAAAA,GAAeyT,KAEjBA,EADGA,EAAkB,GACH,CAAC,GAGD,CAACA,IAGrBpU,KAAKU,SAAS2T,YAAYD,GAE1B,MAAME,EAAmBtU,KAAKS,IAAI,oBAC9B6T,GACHtU,KAAKU,SAAS6T,kBAAkBD,GAGjCtU,KAAKU,SAAS8T,WACf,EArDA1U,OAAAC,eAAAkU,GAAA,a,gDAAkC,gBAClCnU,OAAAC,eAAAkU,GAAA,c,gDAA0CpD,EAAAA,EAAQpO,WAAWC,OAAO,CAACuR,GAAYtR,c,eCwB5E,MAAO8R,WAAyB5D,EAAAA,EAO9BlE,cAAAA,GACNrM,MAAMqM,iBAEF3M,KAAKO,QAAQ,SAChBP,KAAK4M,QAAS,EAEhB,CAEU2G,KAAAA,GACTjT,MAAMiT,QAEN,MAAMC,EAAYxT,KAAKS,IAAI,aAAa,GAClCgT,EAAWzT,KAAKS,IAAI,YAAY,GAChCiT,EAAM1T,KAAKS,IAAI,MAAO,GACtB+K,EAAWxL,KAAKS,IAAI,WAAY,GACtC,IAAI0B,EAAInC,KAAKS,IAAI,QAAS,KACtB4B,EAAIrC,KAAKS,IAAI,SAAU,KACvBiU,EAAQ1U,KAAKS,IAAI,WAAY,GAC7BkU,EAAQ3U,KAAKS,IAAI,YAAa,GAElC,MAAMoM,EAAU7M,KAAKU,SAErB,IAAIiT,EAAQe,EAAQhB,EAChBE,EAAQe,EAAQjB,EAEhB/B,EAAOzL,KAAK8L,MAAM7P,EAAIwR,GACtB/B,EAAO1L,KAAK8L,MAAM3P,EAAIuR,GAE1BD,EAAQxR,EAAIwP,EACZiC,EAAQvR,EAAIuP,EAEI,GAAZpG,IAEHqB,EAAQ7H,EAAI2O,EAAQ,EAAIrM,GAAAA,GAAUkE,GAClCqB,EAAQ5H,GAAK2O,EAAQ,EAAItM,GAAAA,GAAUkE,IAGpC,IAAK,IAAIlJ,EAAgB,GAAZkJ,EAAgB,EAAY,GAAPoG,EAAUtP,EAAW,EAAPsP,EAAUtP,IACzD,IAAK,IAAIsM,EAAgB,GAAZpD,EAAgB,EAAY,GAAPmG,EAAU/C,EAAW,EAAP+C,EAAU/C,IACzD,IAAK4E,GAAyB,IAAN,EAAJlR,IAA0B,IAAN,EAAJsM,IAA4B,IAAN,EAAJtM,IAA0B,IAAN,EAAJsM,GAAc,CACnF,IAAI5J,EAAI4J,EAAI+E,EACR1O,EAAI3C,EAAIsR,EACRH,IACHzO,IAAM2O,EAAQe,GAAS,EACvBzP,IAAM2O,EAAQe,GAAS,GAExB9H,EAAQ+H,SAAS5P,EAAGC,EAAGyP,EAAOC,E,CAK7BnB,GACHrR,EAAIA,EAAI,EAAU,EAANuR,EACZrR,EAAIA,EAAI,EAAU,EAANqR,IAGZvR,GAAKuR,EACLrR,GAAKqR,GAGN,MAAMpO,EAAQtF,KAAKS,IAAI,SACjBoT,EAAe7T,KAAKS,IAAI,iBAC1B6E,GAASuO,KAGZhH,EAAQiH,UAAUxO,EAAOuO,GACzBhH,EAAQmH,UAGV,EAxEAlU,OAAAC,eAAA0U,GAAA,a,gDAAkC,qBAClC3U,OAAAC,eAAA0U,GAAA,c,gDAA0C5D,EAAAA,EAAQpO,WAAWC,OAAO,CAAC+R,GAAiB9R,cCGjF,MAAOkS,WAAoBhE,EAAAA,EAOzBlE,cAAAA,GACNrM,MAAMqM,iBAEF3M,KAAKO,QAAQ,aAChBP,KAAK4M,QAAS,EAEhB,CAEU2G,KAAAA,GACTjT,MAAMiT,QAkDN,MAAMuB,EAAU9U,KAAKS,IAAI,WACV,MAAXqU,GACH9U,KAAKU,SAASoU,QAAQA,GAGvB,MAAMxP,EAAQtF,KAAKS,IAAI,SACjBoT,EAAe7T,KAAKS,IAAI,iBAC1B6E,GAASuO,KAGZ7T,KAAKU,SAASoT,UAAUxO,EAAOuO,GAC/B7T,KAAKU,SAASsT,UAGhB,EA5EAlU,OAAAC,eAAA8U,GAAA,a,gDAAkC,gBAClC/U,OAAAC,eAAA8U,GAAA,c,gDAA0ChE,EAAAA,EAAQpO,WAAWC,OAAO,CAACmS,GAAYlS,cCT5E,MAAOoS,WAAmB5K,EAAAA,GAOrBhH,SAAAA,GAIT,GAFA7C,MAAM8J,uBAEkC,IAApCpK,KAAKS,IAAI,WAAY,IAAIiI,OAAc,CAC1C,MAAMpD,EAAQtF,KAAKS,IAAI,QAAST,KAAKuE,KAAKyQ,gBAAgBvU,IAAI,WAC9DT,KAAKoD,IAAI,WAAY,CACpBpD,KAAKiV,eAAe,CACnBzU,MAAO,IACPI,OAAQ,IACR4K,SAAU,GACV0I,YAAa,EAEb5O,MAAOA,IAERtF,KAAKkV,oBAAoB,CACxB1U,MAAO,GACPI,OAAQ,GACR4K,SAAU,EACV2J,SAAU,EACVC,UAAW,EACX9P,MAAOA,IAERtF,KAAKiV,eAAe,CACnBzU,MAAO,IACPI,OAAQ,IACR4K,UAAW,GACX0I,YAAa,EACbR,IAAK,EACLpO,MAAOA,IAERtF,KAAKqV,iBAAiB,CACrB7U,MAAO,GACPI,OAAQ,GACRsS,OAAQ,EACR5N,MAAOA,IAERtF,KAAKiV,eAAe,CACnBzU,MAAO,EACPI,OAAQ,EACR4K,SAAU,GACV0I,YAAa,EACb5O,MAAOA,IAERtF,KAAKkV,oBAAoB,CACxB1U,MAAO,GACPI,OAAQ,GACR4K,SAAU,GACVkI,IAAK,EACLyB,SAAU,EACVC,UAAW,EACX5B,WAAW,EACXlO,MAAOA,IAERtF,KAAKiV,eAAe,CACnBzU,MAAO,EACPI,OAAQ,EACR4K,SAAU,EACV0I,YAAa,EACb5O,MAAOA,IAERtF,KAAKkV,oBAAoB,CACxB1U,MAAO,GACPI,OAAQ,GACR4K,SAAU,EACVkI,IAAK,EACLyB,SAAU,EACVC,UAAW,EACX5B,WAAW,EACXlO,MAAOA,IAERtF,KAAKiV,eAAe,CACnBzU,MAAO,IACPI,OAAQ,IACR4K,SAAU,GACV0I,YAAa,EACbR,IAAK,EACLU,gBAAiB,CAAC,EAAG,GACrB9O,MAAOA,IAERtF,KAAKqV,iBAAiB,CACrB7U,MAAO,GACPI,OAAQ,GACRsS,OAAQ,EACRQ,IAAK,EACLF,WAAW,EACXlO,MAAOA,IAERtF,KAAKiV,eAAe,CACnBzU,MAAO,IACPI,OAAQ,IACR4K,UAAW,GACX0I,YAAa,EACbR,IAAK,EACLU,gBAAiB,CAAC,EAAG,GACrB9O,MAAOA,IAERtF,KAAKkV,oBAAoB,CACxB1U,MAAO,GACPI,OAAQ,GACR4K,SAAU,EACVkI,IAAK,EACLyB,SAAU,EACVC,UAAW,EACX9P,MAAOA,IAERtF,KAAKiV,eAAe,CACnBzU,MAAO,IACPI,OAAQ,IACR4K,UAAW,GACX0I,YAAa,EACbR,IAAK,EACLpO,MAAOA,IAERtF,KAAKiV,eAAe,CACnBzU,MAAO,IACPI,OAAQ,IACR4K,SAAU,GACV0I,YAAa,EACbR,IAAK,EACLpO,MAAOA,IAERtF,KAAKiV,eAAe,CACnBzU,MAAO,IACPI,OAAQ,IACR4K,SAAU,EACV0I,YAAa,EACbR,IAAK,EACLpO,MAAOA,IAERtF,KAAKiV,eAAe,CACnBzU,MAAO,IACPI,OAAQ,IACR4K,SAAU,GACV0I,YAAa,EACbR,IAAK,EACLpO,MAAOA,K,CAKVtF,KAAKsV,OAAiB,UAAI,CAE3B,CAEO3I,cAAAA,GACF3M,KAAKO,QAAQ,aAChBP,KAAKuV,OAEP,CAQOC,QAAAA,CAASC,GACf,MAAMC,EAAW1V,KAAKS,IAAI,WAAY,IAEtC,GAAKgV,EAAQC,EAAShN,QAA+B,OAApBgN,EAASD,GACzC,OAAOC,EAASD,GAKjB,GAAIA,EAASC,EAAShN,OAAS,EAAI,CAElC,OAAOgN,EADeD,EAAQvP,KAAK+L,MAAMwD,GAASA,EAAQC,EAAShN,S,CAGpE,OAAOgN,EAASD,EACjB,CAOOE,IAAAA,GACN,IAAIC,EAAc5V,KAAKoC,WAAW,cAAepC,KAAKS,IAAI,aAAc,IAExE,OADAT,KAAKuQ,WAAW,cAAeqF,EAAc5V,KAAKS,IAAI,OAAQ,IACvDT,KAAKwV,SAASI,EACtB,CAMOL,KAAAA,GACNvV,KAAKuQ,WAAW,cAAevQ,KAAKS,IAAI,aAAc,GACvD,CAQOwU,cAAAA,CAAeY,GAErB,OADc5B,GAAYhR,IAAIjD,KAAKuE,KAAMsR,EAE1C,CAQOX,mBAAAA,CAAoBW,GAE1B,OADcpB,GAAiBxR,IAAIjD,KAAKuE,KAAMsR,EAE/C,CAQOR,gBAAAA,CAAiBQ,GAEvB,OADcvC,GAAcrQ,IAAIjD,KAAKuE,KAAMsR,EAE5C,EArOA/V,OAAAC,eAAAgV,GAAA,a,gDAAkC,eAClCjV,OAAAC,eAAAgV,GAAA,c,gDAA0C5K,EAAAA,GAAO1H,WAAWC,OAAO,CAACqS,GAAWpS,c","sources":["../node_modules/src/.internal/core/render/Picture.ts","../node_modules/src/.internal/core/render/ZoomTools.ts","../node_modules/src/.internal/core/render/ZoomableContainer.ts","../node_modules/src/.internal/core/render/gradients/Gradient.ts","../node_modules/src/.internal/core/render/gradients/LinearGradient.ts","../node_modules/src/.internal/core/render/Star.ts","../node_modules/src/.internal/core/render/HeatLegend.ts","../node_modules/src/.internal/core/render/Slider.ts","../node_modules/src/.internal/core/render/patterns/GrainPattern.ts","../node_modules/src/.internal/core/render/gradients/RadialGradient.ts","../node_modules/src/.internal/core/render/patterns/CirclePattern.ts","../node_modules/src/.internal/core/render/patterns/LinePattern.ts","../node_modules/src/.internal/core/render/patterns/RectanglePattern.ts","../node_modules/src/.internal/core/render/patterns/PathPattern.ts","../node_modules/src/.internal/core/util/PatternSet.ts"],"sourcesContent":["import type { IPicture } from \"./backend/Renderer\";\nimport type { Color } from \"../util/Color\";\n\nimport { Sprite, ISpriteEvents, ISpriteSettings, ISpritePrivate } from \"./Sprite\";\n\nimport * as $type from \"../util/Type\";\n\nexport interface IPictureSettings extends ISpriteSettings {\n\n\t/**\n\t * A source URI of the image.\n\t *\n\t * Can be relative or absolute URL, or data-uri.\n\t */\n\tsrc?: string;\n\n\t/**\n\t * CORS settings for loading the image. Defaults to \"anonymous\".\n\t *\n\t * @since 5.3.6\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/crossOrigin} for more info\n\t */\n\tcors?: string | null;\n\n\t/**\n\t * Color of the element's shadow.\n\t *\n\t * For this to work at least one of the following needs to be set as well:\n\t * `shadowBlur`, `shadowOffsetX`, `shadowOffsetY`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowColor?: Color | null;\n\n\t/**\n\t * Blurriness of the the shadow.\n\t *\n\t * The bigger the number, the more blurry shadow will be.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowBlur?: number;\n\n\t/**\n\t * Horizontal shadow offset in pixels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowOffsetX?: number;\n\n\t/**\n\t * Vertical shadow offset in pixels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowOffsetY?: number;\n\n\t/**\n\t * Opacity of the shadow (0-1).\n\t *\n\t * If not set, will use the same as `fillOpacity` of the element.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowOpacity?: number;\n\n}\n\nexport interface IPicturePrivate extends ISpritePrivate {\n}\n\nexport interface IPictureEvents extends ISpriteEvents {\n\n\t/**\n\t * Invoked when picture is loaded.\n\t */\n\tloaded: {};\n\n\t/**\n\t * Invoked when picture load error happens.\n\t */\n\tloaderror: {};\n}\n\n/**\n * Displays an image.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/images/} for more info\n * @important\n */\nexport class Picture extends Sprite {\n\n\tdeclare public _settings: IPictureSettings;\n\tdeclare public _privateSettings: IPicturePrivate;\n\n\tpublic _display: IPicture = this._root._renderer.makePicture(undefined);\n\n\tpublic static className: string = \"Picture\";\n\tpublic static classNames: Array<string> = Sprite.classNames.concat([Picture.className]);\n\tdeclare public _events: IPictureEvents;\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this.isDirty(\"width\")) {\n\t\t\tconst width = this.get(\"width\");\n\t\t\tthis._display.width = $type.isNumber(width) ? width : undefined;\n\t\t}\n\n\t\tif (this.isDirty(\"height\")) {\n\t\t\tconst height = this.get(\"height\");\n\t\t\tthis._display.height = $type.isNumber(height) ? height : undefined;\n\t\t}\n\n\t\tif (this.isDirty(\"shadowColor\")) {\n\t\t\tthis._display.clear();\n\t\t\tconst shadowColor = this.get(\"shadowColor\");\n\t\t\tthis._display.shadowColor = shadowColor == null ? undefined : shadowColor;\n\t\t}\n\n\t\tif (this.isDirty(\"shadowBlur\")) {\n\t\t\tthis._display.clear();\n\t\t\tthis._display.shadowBlur = this.get(\"shadowBlur\");\n\t\t}\n\n\t\tif (this.isDirty(\"shadowOffsetX\")) {\n\t\t\tthis._display.clear();\n\t\t\tthis._display.shadowOffsetX = this.get(\"shadowOffsetX\");\n\t\t}\n\n\t\tif (this.isDirty(\"shadowOffsetY\")) {\n\t\t\tthis._display.clear();\n\t\t\tthis._display.shadowOffsetY = this.get(\"shadowOffsetY\");\n\t\t}\n\n\t\tif (this.isDirty(\"shadowOpacity\")) {\n\t\t\tthis._display.clear();\n\t\t\tthis._display.shadowOpacity = this.get(\"shadowOpacity\");\n\t\t}\n\n\t\tif (this.isDirty(\"src\") || this.isDirty(\"cors\")) {\n\t\t\tthis._display.clear();\n\t\t\tthis._load();\n\t\t}\n\t}\n\n\tprotected _load() {\n\t\tconst src = this.get(\"src\");\n\t\tif (src) {\n\t\t\tconst image = new Image();\n\t\t\timage.crossOrigin = this.get(\"cors\", \"anonymous\");\n\t\t\timage.src = src!;\n\t\t\tconst events = this.events;\n\t\t\t\n\t\t\timage.decode().then(() => {\n\t\t\t\tthis._display.image = image;\n\t\t\t\tthis._updateSize();\n\t\t\t\tif (!events.isDisposed() && events.isEnabled(\"loaded\")) {\n\t\t\t\t\tevents.dispatch(\"loaded\", { type: \"loaded\", target: this });\n\t\t\t\t}\n\t\t\t}).catch((_error: any) => {\n\t\t\t\tif (!events.isDisposed() && events.isEnabled(\"loaderror\")) {\n\t\t\t\t\tevents.dispatch(\"loaderror\", { type: \"loaderror\", target: this });\n\t\t\t\t}\n\t\t\t});\n\n\t\t}\n\t}\n\n\tpublic _updateSize() {\n\t\tsuper._updateSize();\n\n\t\tconst image = this._display.image;\n\t\tif (image) {\n\t\t\tlet w = this.getPrivate(\"width\", this.get(\"width\"));\n\t\t\tlet h = this.getPrivate(\"height\", this.get(\"height\"));\n\t\t\tconst r = image.width && image.height ? image.width / image.height : 0;\n\n\t\t\tif ($type.isNumber(w) && $type.isNumber(h)) {\n\t\t\t\tthis._display.width = w;\n\t\t\t\tthis._display.height = h;\n\t\t\t}\n\t\t\telse if ($type.isNumber(w) && r) {\n\t\t\t\th = w / r;\n\t\t\t}\n\t\t\telse if ($type.isNumber(h) && r) {\n\t\t\t\tw = h * r;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tw = image.width;\n\t\t\t\th = image.height;\n\t\t\t}\n\n\t\t\tif ($type.isNumber(w)) {\n\t\t\t\tthis._display.width = w;\n\t\t\t}\n\t\t\tif ($type.isNumber(h)) {\n\t\t\t\tthis._display.height = h;\n\t\t\t}\n\t\t\tthis.markDirtyBounds();\n\t\t\tthis.markDirty();\n\t\t}\n\t}\n}\n","import { Container, IContainerPrivate, IContainerSettings, IContainerEvents } from \"../../core/render/Container\";\r\nimport { Button } from \"../../core/render/Button\";\r\nimport { Graphics } from \"../../core/render/Graphics\";\r\nimport { MultiDisposer, IDisposer } from \"../../core/util/Disposer\";\r\nimport { ZoomableContainer } from \"./ZoomableContainer\";\r\n\r\nexport interface IZoomable {\r\n\tzoomIn(): void;\r\n\tzoomOut(): void;\r\n\tgoHome(): void;\r\n}\r\n\r\nexport interface IZoomToolsSettings extends IContainerSettings {\r\n\r\n\t/**\r\n\t * A target element that zoom tools will control, e.g. [[ZoomableContainer]].\r\n\t */\r\n\ttarget?: IZoomable;\r\n\r\n}\r\n\r\nexport interface IZoomToolsPrivate extends IContainerPrivate {\r\n}\r\n\r\nexport interface IZoomToolsEvents extends IContainerEvents {\r\n}\r\n\r\n/**\r\n * A tool that displays button for zoomable targets.\r\n *\r\n * @since 5.8.0\r\n * @important\r\n */\r\nexport class ZoomTools extends Container {\r\n\r\n\tpublic static className: string = \"ZoomTools\";\r\n\tpublic static classNames: Array<string> = Container.classNames.concat([ZoomTools.className]);\r\n\tdeclare public _events: IContainerEvents;\r\n\r\n\t/**\r\n\t * A [[Button]] for home.\r\n\t */\r\n\tpublic readonly homeButton: Button = this.children.push(Button.new(this._root, { width: 35, height: 35, themeTags: [\"home\"] }));\r\n\r\n\t/**\r\n\t * A [[Button]] for zoom in.\r\n\t */\r\n\tpublic readonly plusButton: Button = this.children.push(Button.new(this._root, { width: 35, height: 35, themeTags: [\"plus\"] }));\r\n\r\n\t/**\r\n\t * A [[Button]] for zoom out.\r\n\t */\r\n\tpublic readonly minusButton: Button = this.children.push(Button.new(this._root, { width: 35, height: 35, themeTags: [\"minus\"] }));\r\n\r\n\tdeclare public _settings: IZoomToolsSettings;\r\n\tdeclare public _privateSettings: IZoomToolsPrivate;\r\n\r\n\tprotected _disposer: MultiDisposer | undefined;\r\n\tprotected _targetDisposer: IDisposer | undefined;\r\n\r\n\tprotected _afterNew() {\r\n\t\tsuper._afterNew();\r\n\r\n\t\tthis.set(\"position\", \"absolute\");\r\n\r\n\t\tthis.set(\"layout\", this._root.verticalLayout);\r\n\t\tthis.addTag(\"zoomtools\");\r\n\r\n\t\tthis.plusButton.setAll({\r\n\t\t\ticon: Graphics.new(this._root, { themeTags: [\"icon\"] }),\r\n\t\t\tlayout: undefined\r\n\t\t});\r\n\r\n\t\tthis.minusButton.setAll({\r\n\t\t\ticon: Graphics.new(this._root, { themeTags: [\"icon\"] }),\r\n\t\t\tlayout: undefined\r\n\t\t});\r\n\r\n\t\tthis.homeButton.setAll({\r\n\t\t\ticon: Graphics.new(this._root, { themeTags: [\"icon\"] }),\r\n\t\t\tlayout: undefined\r\n\t\t});\r\n\t}\r\n\r\n\tpublic _prepareChildren() {\r\n\t\tsuper._prepareChildren();\r\n\r\n\t\tif (this.isDirty(\"target\")) {\r\n\t\t\tconst target = this.get(\"target\");\r\n\r\n\t\t\tconst previous = this._prevSettings.target;\r\n\t\t\tif (target) {\r\n\t\t\t\tif (target instanceof ZoomableContainer) {\r\n\t\t\t\t\tthis._targetDisposer = this.addDisposer(target.contents.on(\"scale\", (scale) => {\r\n\t\t\t\t\t\tif (scale == target.get(\"minZoomLevel\")) {\r\n\t\t\t\t\t\t\tthis.minusButton.set(\"disabled\", true)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.minusButton.set(\"disabled\", false)\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (scale == target.get(\"maxZoomLevel\")) {\r\n\t\t\t\t\t\t\tthis.plusButton.set(\"disabled\", true)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.plusButton.set(\"disabled\", false)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}))\r\n\t\t\t\t\tthis.root.events.once(\"frameended\", () => {\r\n\t\t\t\t\t\tif (target.get(\"scale\") == target.get(\"minZoomLevel\")) {\r\n\t\t\t\t\t\t\tthis.minusButton.set(\"disabled\", true)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._disposer = new MultiDisposer([\r\n\t\t\t\t\tthis.plusButton.events.on(\"click\", () => {\r\n\t\t\t\t\t\ttarget.zoomIn()\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tthis.minusButton.events.on(\"click\", () => {\r\n\t\t\t\t\t\ttarget.zoomOut()\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tthis.homeButton.events.on(\"click\", () => {\r\n\t\t\t\t\t\ttarget.goHome()\r\n\t\t\t\t\t})])\r\n\t\t\t}\r\n\r\n\t\t\tif (previous) {\r\n\t\t\t\tif (this._disposer) {\r\n\t\t\t\t\tthis._disposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t\tif (this._targetDisposer) {\r\n\t\t\t\t\tthis._targetDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","import type { Time } from \"../../core/util/Animation\";\r\nimport type { Animation } from \"../../core/util/Entity\";\r\nimport type { IDisposer } from \"../../core/util/Disposer\";\r\nimport type { IPoint } from \"../../core/util/IPoint\";\r\nimport type { ISpritePointerEvent } from \"../../core/render/Sprite\";\r\n\r\nimport { Container, IContainerSettings, IContainerPrivate, IContainerEvents } from \"../../core/render/Container\";\r\nimport { p100 } from \"../../core/util/Percent\";\r\nimport { Rectangle } from \"../../core/render/Rectangle\";\r\nimport { color } from \"../../core/util/Color\";\r\n\r\nimport * as $utils from \"../../core/util/Utils\";\r\nimport * as $math from \"../../core/util/Math\";\r\nimport * as $object from \"../../core/util/Object\";\r\nimport * as $type from \"../../core/util/Type\";\r\n\r\nexport interface IZoomableContainerSettings extends IContainerSettings {\r\n\r\n\t/**\r\n\t * Maximum zoom-in level.\r\n\t * \r\n\t * @default 32\r\n\t */\r\n\tmaxZoomLevel?: number;\r\n\r\n\t/**\r\n\t * Maximum zoom-out level.\r\n\t * \r\n\t * @default 1\r\n\t */\r\n\tminZoomLevel?: number;\r\n\r\n\t/**\r\n\t * Zoom level increase/decrease factor with each zoom action.\r\n\t * \r\n\t * @defult 2\r\n\t */\r\n\tzoomStep?: number;\r\n\r\n\t/**\r\n\t * Pinch-zooming is enabled on touch devices.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpinchZoom?: boolean;\r\n\r\n\t/**\r\n\t * Animation duration (ms) for zoom animations.\r\n\t *\r\n\t * @default 600\r\n\t */\r\n\tanimationDuration?: number;\r\n\r\n\t/**\r\n\t * Easing function to use for zoom animations.\r\n\t * \r\n\t * @default am5.ease.out(am5.ease.cubic)\r\n\t */\r\n\tanimationEasing?: (t: Time) => Time;\r\n\r\n\t/**\r\n\t * How much of a content can go outside the viewport.\r\n\t *\r\n\t * @default 0.4\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n}\r\n\r\nexport interface IZoomableContainerPrivate extends IContainerPrivate {\r\n}\r\n\r\nexport interface IZoomableContainerEvents extends IContainerEvents {\r\n}\r\n\r\n/**\r\n * A version of [[Container]] which adds zooming capabilities.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Zoomable_container} for more info\r\n * @since 5.8.0\r\n * @important\r\n */\r\nexport class ZoomableContainer extends Container {\r\n\tpublic static className: string = \"ZoomableContainer\";\r\n\tpublic static classNames: Array<string> = Container.classNames.concat([ZoomableContainer.className]);\r\n\r\n\tdeclare public _settings: IZoomableContainerSettings;\r\n\tdeclare public _privateSettings: IZoomableContainerPrivate;\r\n\tdeclare public _events: IZoomableContainerEvents;\r\n\r\n\tprotected _za?: Animation<this[\"_settings\"][\"scale\"]>;\r\n\tprotected _txa?: Animation<this[\"_settings\"][\"x\"]>;\r\n\tprotected _tya?: Animation<this[\"_settings\"][\"y\"]>;\r\n\r\n\r\n\tprotected _movePoints: { [index: number]: IPoint } = {};\r\n\tprotected _downScale: number = 1;\r\n\tprotected _downX: number = 0;\r\n\tprotected _downY: number = 0;\r\n\r\n\tprotected _pinchDP?: IDisposer;\r\n\r\n\t/**\r\n\t * All elements must be added to `contents.children` instead of `children` of\r\n\t * [[ZoomableContainer]].\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Zoomable_container} for more info\r\n\t */\r\n\tpublic contents = this.children.push(Container.new(this._root, {\r\n\t\twidth: p100,\r\n\t\theight: p100,\r\n\t\tx: 0,\r\n\t\ty: 0,\r\n\t\tdraggable: true,\r\n\t\tbackground: Rectangle.new(this._root, {\r\n\t\t\tfill: color(0xffffff),\r\n\t\t\tfillOpacity: 0\r\n\t\t})\r\n\t}))\r\n\r\n\tprotected _wheelDp: IDisposer | undefined;\r\n\r\n\tprotected _afterNew(): void {\r\n\t\tsuper._afterNew();\r\n\r\n\t\tconst events = this.contents.events;\r\n\r\n\t\tthis._disposers.push(events.on(\"pointerdown\", (event) => {\r\n\t\t\tthis._handleThisDown(event);\r\n\t\t}));\r\n\r\n\t\tthis._disposers.push(events.on(\"globalpointerup\", (event) => {\r\n\t\t\tthis._handleThisUp(event);\r\n\t\t}));\r\n\r\n\t\tthis._disposers.push(events.on(\"globalpointermove\", (event) => {\r\n\t\t\tthis._handleThisMove(event);\r\n\t\t}));\r\n\r\n\t\tconst bg = this.contents.get(\"background\");\r\n\t\tif (bg) {\r\n\t\t\tbg.adapters.add(\"width\", (width) => {\r\n\t\t\t\treturn Number(width) * 5;\r\n\t\t\t})\r\n\t\t\tbg.adapters.add(\"height\", (height) => {\r\n\t\t\t\treturn Number(height) * 5;\r\n\t\t\t})\r\n\t\t\tbg.adapters.add(\"x\", (x) => {\r\n\t\t\t\treturn Number(x) - bg.width() / 5 * 2;\r\n\t\t\t})\r\n\t\t\tbg.adapters.add(\"y\", (y) => {\r\n\t\t\t\treturn Number(y) - bg.height() / 5 * 2;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tconst contents = this.contents;\r\n\r\n\t\tcontents.adapters.add(\"x\", (x) => {\r\n\t\t\tif($type.isNumber(x)){\r\n\t\t\t\tlet maxPanOut = this.get(\"maxPanOut\", 0.4);\r\n\t\t\t\tlet w = contents.width();\r\n\r\n\t\t\t\tx = Math.min(w * maxPanOut, x);\r\n\t\t\t\tx = Math.max(this.width() - w * contents.get(\"scale\", 1) * (1 + maxPanOut), x);\r\n\t\t\t}\r\n\t\t\treturn x;\r\n\t\t})\r\n\r\n\t\tcontents.adapters.add(\"y\", (y) => {\r\n\t\t\tif($type.isNumber(y)){\r\n\t\t\t\tlet maxPanOut = this.get(\"maxPanOut\", 0.4);\r\n\t\t\t\tlet h = contents.height();\r\n\r\n\t\t\t\ty = Math.min(h * maxPanOut, y);\r\n\t\t\t\ty = Math.max(this.height() - h * contents.get(\"scale\", 1) * (1 + maxPanOut), y);\r\n\t\t\t}\r\n\t\t\treturn y;\r\n\t\t})\r\n\t}\r\n\r\n\tpublic _prepareChildren() {\r\n\t\tsuper._prepareChildren();\r\n\t\tif (this.isDirty(\"wheelable\")) {\r\n\t\t\tthis._handleSetWheel();\r\n\t\t}\r\n\r\n\t\tthis.contents._display.cancelTouch = this.get(\"pinchZoom\", false);\r\n\t}\r\n\r\n\r\n\tprotected _handleSetWheel() {\r\n\t\tif (this.get(\"wheelable\")) {\r\n\t\t\tif (this._wheelDp) {\r\n\t\t\t\tthis._wheelDp.dispose();\r\n\t\t\t}\r\n\r\n\t\t\tthis._wheelDp = this.events.on(\"wheel\", (event) => {\r\n\t\t\t\tconst wheelEvent = event.originalEvent;\r\n\r\n\t\t\t\t// Ignore wheel event if it is happening on a non-ZoomableContainer element, e.g. if\r\n\t\t\t\t// some page element is over the ZoomableContainer.\r\n\t\t\t\tif ($utils.isLocalEvent(wheelEvent, this)) {\r\n\t\t\t\t\twheelEvent.preventDefault();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst point = this.toLocal(event.point);\r\n\r\n\t\t\t\tthis._handleWheelZoom(wheelEvent.deltaY, point);\r\n\t\t\t});\r\n\r\n\t\t\tthis._disposers.push(this._wheelDp);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._wheelDp) {\r\n\t\t\t\tthis._wheelDp.dispose();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _handleWheelZoom(delta: number, point: IPoint) {\r\n\t\tlet step = this.get(\"zoomStep\", 2);\r\n\t\tlet zoomLevel = this.contents.get(\"scale\", 1);\r\n\r\n\t\tlet newZoomLevel = zoomLevel;\r\n\t\tif (delta > 0) {\r\n\t\t\tnewZoomLevel = zoomLevel / step;\r\n\t\t}\r\n\t\telse if (delta < 0) {\r\n\t\t\tnewZoomLevel = zoomLevel * step;\r\n\t\t}\r\n\r\n\t\tif (newZoomLevel != zoomLevel) {\r\n\t\t\tthis.zoomToPoint(point, newZoomLevel)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to specific X/Y point.\r\n\t * \r\n\t * @param   point  Center point\r\n\t * @param   level  Zoom level\r\n\t * @return         Zoom Animation object\r\n\t */\r\n\tpublic zoomToPoint(point: IPoint, level: number): Animation<this[\"_settings\"][\"scale\"]> | undefined {\r\n\t\tif (level) {\r\n\t\t\tlevel = $math.fitToRange(level, this.get(\"minZoomLevel\", 1), this.get(\"maxZoomLevel\", 32));\r\n\t\t}\r\n\r\n\t\tconst zoomLevel = this.contents.get(\"scale\", 1);\r\n\r\n\t\tlet x = point.x;\r\n\t\tlet y = point.y;\r\n\r\n\t\tlet cx = x;\r\n\t\tlet cy = y;\r\n\r\n\t\tconst contents = this.contents;\r\n\r\n\t\tlet tx = contents.x();\r\n\t\tlet ty = contents.y();\r\n\r\n\t\tlet xx = cx - ((x - tx) / zoomLevel * level);\r\n\t\tlet yy = cy - ((y - ty) / zoomLevel * level);\r\n\r\n\t\tthis._animateTo(xx, yy, level);\r\n\r\n\t\treturn this._za;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the container contents in by `zoomStep`.\r\n\t * \r\n\t * @return Zoom Animation object\r\n\t */\r\n\tpublic zoomIn(): Animation<this[\"_settings\"][\"scale\"]> | undefined {\r\n\t\treturn this.zoomToPoint({ x: this.width() / 2, y: this.height() / 2 }, this.contents.get(\"scale\", 1) * this.get(\"zoomStep\", 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the container contents out by `zoomStep`.\r\n\t * \r\n\t * @return Zoom Animation object\r\n\t */\r\n\tpublic zoomOut(): Animation<this[\"_settings\"][\"scale\"]> | undefined {\r\n\t\treturn this.zoomToPoint({ x: this.width() / 2, y: this.height() / 2 }, this.contents.get(\"scale\", 1) / this.get(\"zoomStep\", 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Fully zooms out the container contents.\r\n\t * \r\n\t * @return Zoom Animation object\r\n\t */\r\n\tpublic goHome() {\r\n\t\treturn this._animateTo(0, 0, 1);\r\n\t}\r\n\r\n\tprotected _animateTo(x: number, y: number, scale: number) {\r\n\t\tconst duration = this.get(\"animationDuration\", 0);\r\n\t\tconst easing = this.get(\"animationEasing\");\r\n\r\n\t\tconst contents = this.contents;\r\n\t\tthis._txa = contents.animate({ key: \"x\", to: x, duration: duration, easing: easing });\r\n\t\tthis._tya = contents.animate({ key: \"y\", to: y, duration: duration, easing: easing });\r\n\t\tthis._za = contents.animate({ key: \"scale\", to: scale, duration: duration, easing: easing });\r\n\t}\r\n\r\n\r\n\tprotected _handleThisUp(_event: ISpritePointerEvent) {\r\n\t\tthis._downPoints = {}\r\n\t}\r\n\r\n\tprotected _handleThisDown(event: ISpritePointerEvent) {\r\n\r\n\t\tconst contents = this.contents;\r\n\r\n\t\tthis._downScale = contents.get(\"scale\", 1);\r\n\t\tconst downPoints = contents._downPoints;\r\n\r\n\t\tlet count = $object.keys(downPoints).length;\r\n\r\n\t\tif (count == 1) {\r\n\t\t\t// workaround to solve a problem when events are added to some children of chart container (rotation stops working)\r\n\t\t\tlet downPoint = downPoints[1];\r\n\t\t\tif (!downPoint) {\r\n\t\t\t\tdownPoint = downPoints[0];\r\n\t\t\t}\r\n\r\n\t\t\tif (downPoint && (downPoint.x == event.point.x && downPoint.y == event.point.y)) {\r\n\t\t\t\tcount = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (count > 0) {\r\n\t\t\tthis._downX = contents.x();\r\n\t\t\tthis._downY = contents.y();\r\n\r\n\t\t\tconst downId = contents._getDownPointId();\r\n\t\t\tif (downId) {\r\n\t\t\t\tlet movePoint = this._movePoints[downId];\r\n\t\t\t\tif (movePoint) {\r\n\t\t\t\t\tcontents._downPoints[downId] = movePoint;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected _handleThisMove(event: ISpritePointerEvent) {\r\n\t\tconst originalEvent = event.originalEvent as any;\r\n\r\n\t\tconst pointerId = originalEvent.pointerId;\r\n\r\n\t\tif (this.get(\"pinchZoom\")) {\r\n\t\t\tif (pointerId) {\r\n\t\t\t\tthis._movePoints[pointerId] = event.point;\r\n\r\n\t\t\t\tif ($object.keys(this.contents._downPoints).length > 1) {\r\n\t\t\t\t\tthis._handlePinch();\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _handlePinch() {\r\n\t\tlet i = 0;\r\n\t\tlet downPoints: Array<IPoint> = [];\r\n\t\tlet movePoints: Array<IPoint> = [];\r\n\r\n\t\t$object.each(this.contents._downPoints, (k, point) => {\r\n\t\t\tdownPoints[i] = point;\r\n\t\t\tlet movePoint = this._movePoints[k];\r\n\t\t\tif (movePoint) {\r\n\t\t\t\tmovePoints[i] = movePoint;\r\n\t\t\t}\r\n\t\t\ti++;\r\n\t\t});\r\n\r\n\t\tif (downPoints.length > 1 && movePoints.length > 1) {\r\n\r\n\t\t\tthis.contents._isDragging = false;\r\n\r\n\t\t\tlet downPoint0 = downPoints[0];\r\n\t\t\tlet downPoint1 = downPoints[1];\r\n\r\n\t\t\tlet movePoint0 = movePoints[0];\r\n\t\t\tlet movePoint1 = movePoints[1];\r\n\r\n\t\t\tif (downPoint0 && downPoint1 && movePoint0 && movePoint1) {\r\n\t\t\t\tdownPoint0 = this.toLocal(downPoint0);\r\n\t\t\t\tdownPoint1 = this.toLocal(downPoint1);\r\n\r\n\t\t\t\tmovePoint0 = this.toLocal(movePoint0);\r\n\t\t\t\tmovePoint1 = this.toLocal(movePoint1);\r\n\r\n\t\t\t\tlet initialDistance = Math.hypot(downPoint1.x - downPoint0.x, downPoint1.y - downPoint0.y);\r\n\t\t\t\tlet currentDistance = Math.hypot(movePoint1.x - movePoint0.x, movePoint1.y - movePoint0.y);\r\n\r\n\t\t\t\tlet level = currentDistance / initialDistance * this._downScale;\r\n\t\t\t\tlet moveCenter = { x: movePoint0.x + (movePoint1.x - movePoint0.x) / 2, y: movePoint0.y + (movePoint1.y - movePoint0.y) / 2 };\r\n\t\t\t\tlet downCenter = { x: downPoint0.x + (downPoint1.x - downPoint0.x) / 2, y: downPoint0.y + (downPoint1.y - downPoint0.y) / 2 };\r\n\r\n\t\t\t\tlet tx = this._downX || 0;\r\n\t\t\t\tlet ty = this._downY || 0;\r\n\r\n\t\t\t\tlet zoomLevel = this._downScale;\r\n\r\n\t\t\t\tlet xx = moveCenter.x - (- tx + downCenter.x) / zoomLevel * level;\r\n\t\t\t\tlet yy = moveCenter.y - (- ty + downCenter.y) / zoomLevel * level;\r\n\r\n\t\t\t\tthis.contents.setAll({\r\n\t\t\t\t\tx: xx,\r\n\t\t\t\t\ty: yy,\r\n\t\t\t\t\tscale: level\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","import type { IBounds } from \"../../util/IBounds\"\nimport type { IGradient, IGradientStop } from \"../backend/Renderer\";\nimport type { Sprite } from \"../Sprite\";\n\nimport { Entity, IEntitySettings, IEntityPrivate } from \"../../util/Entity\"\n\n\nexport interface IGradientSettings extends IEntitySettings {\n\n\t/**\n\t * A list of color steps for the gradient.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\n\t */\n\tstops?: Array<IGradientStop>;\n\n\t/**\n\t * Gradient target.\n\t */\n\ttarget?: Sprite;\n\n}\n\nexport interface IGradientPrivate extends IEntityPrivate {\n}\n\n/**\n * Base class for gradients.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\n */\nexport abstract class Gradient extends Entity {\n\n\tdeclare public _settings: IGradientSettings;\n\tdeclare public _privateSettings: IGradientPrivate;\n\n\tpublic static className: string = \"Gradient\";\n\tpublic static classNames: Array<string> = Entity.classNames.concat([Gradient.className]);\n\n\tprotected _afterNew() {\n\t\t// Applying themes because gradient will not have parent\n\t\tsuper._afterNewApplyThemes();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getFill(_target: Sprite): IGradient {\n\t\treturn {\n\t\t\taddColorStop: (_offset: number, _color: string) => { }\n\t\t};\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\t//if (this.isDirty(\"target\") && this.get(\"target\")) {\n\t\t//\tthis.get(\"target\")!.events.on(\"boundschanged\", () => {\n\n\t\t//\t});\n\t\t//}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getBounds(target: Sprite): IBounds {\n\t\tconst gradientTarget = this.get(\"target\");\n\t\tif (gradientTarget) {\n\t\t\tlet bounds = gradientTarget.globalBounds();\n\n\t\t\tconst p0 = target.toLocal({ x: bounds.left, y: bounds.top });\n\t\t\tconst p1 = target.toLocal({ x: bounds.right, y: bounds.top });\n\t\t\tconst p2 = target.toLocal({ x: bounds.right, y: bounds.bottom });\n\t\t\tconst p3 = target.toLocal({ x: bounds.left, y: bounds.bottom });\n\n\t\t\treturn {\n\t\t\t\tleft: Math.min(p0.x, p1.x, p2.x, p3.x),\n\t\t\t\ttop: Math.min(p0.y, p1.y, p2.y, p3.y),\n\t\t\t\tright: Math.max(p0.x, p1.x, p2.x, p3.x),\n\t\t\t\tbottom: Math.max(p0.y, p1.y, p2.y, p3.y)\n\t\t\t}\n\t\t}\n\t\treturn target._display.getLocalBounds();\n\t}\n\n}\n","import type { IGradient } from \"../backend/Renderer\";\nimport type { Sprite } from \"../Sprite\";\n\nimport { Gradient, IGradientSettings, IGradientPrivate } from \"./Gradient\";\nimport { Color } from \"../../util/Color\";\n\nimport * as $array from \"../../util/Array\";\nimport * as $type from \"../../util/Type\";\nimport * as $math from \"../../util/Math\";\n\n\nexport interface ILinearGradientSettings extends IGradientSettings {\n\n\t/**\n\t * Gradient rotation, in degrees.\n\t *\n\t * @default 90\n\t */\n\trotation?: number;\n\n}\n\nexport interface ILinearGradientPrivate extends IGradientPrivate {\n}\n\n/**\n * Linear gradient.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\n */\nexport class LinearGradient extends Gradient {\n\n\tdeclare public _settings: ILinearGradientSettings;\n\tdeclare public _privateSettings: ILinearGradientPrivate;\n\n\tpublic static className: string = \"LinearGradient\";\n\tpublic static classNames: Array<string> = Gradient.classNames.concat([LinearGradient.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getFill(target: Sprite): IGradient {\n\t\tconst rotation = this.get(\"rotation\", 0);\n\t\tlet bounds = this.getBounds(target);\n\n\t\tlet l = bounds.left || 0;\n\t\tlet r = bounds.right || 0;\n\t\tlet t = bounds.top || 0;\n\t\tlet b = bounds.bottom || 0;\n\n\t\tlet cos = $math.cos(rotation);\n\t\tlet sin = $math.sin(rotation);\n\n\t\tlet w = cos * (r - l);\n\t\tlet h = sin * (b - t);\n\n\t\tif (w == 0) {\n\t\t\tw = 1;\n\t\t}\n\n\t\tif (h == 0) {\n\t\t\th = 1;\n\t\t}\n\n\t\tlet longer = Math.max(w, h);\n\n\t\tconst gradient = this._root._renderer.createLinearGradient(\n\t\t\tl,\n\t\t\tt,\n\t\t\tl + longer * cos,\n\t\t\tt + longer * sin\n\t\t);\n\n\t\tconst stops = this.get(\"stops\")!;\n\t\tif (stops) {\n\t\t\tlet i = 0;\n\t\t\t$array.each(stops, (stop) => {\n\n\t\t\t\tlet offset = stop.offset;\n\n\t\t\t\tif (!$type.isNumber(offset)) {\n\t\t\t\t\toffset = i / (stops.length - 1);\n\t\t\t\t}\n\n\t\t\t\tlet opacity = stop.opacity;\n\n\t\t\t\tif (!$type.isNumber(opacity)) {\n\t\t\t\t\topacity = 1;\n\t\t\t\t}\n\n\t\t\t\tlet color = stop.color;\n\n\t\t\t\tif (color) {\n\n\t\t\t\t\tconst lighten = stop.lighten;\n\t\t\t\t\tif (lighten) {\n\t\t\t\t\t\tcolor = Color.lighten(color, lighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tconst brighten = stop.brighten;\n\t\t\t\t\tif (brighten) {\n\t\t\t\t\t\tcolor = Color.brighten(color, brighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tgradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t})\n\t\t}\n\t\treturn gradient;\n\t}\n}\n","import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\r\nimport type { Percent } from \"../../core/util/Percent\";\r\nimport * as $utils from \"../../core/util/Utils\";\r\n\r\nexport interface IStarSettings extends IGraphicsSettings {\r\n\r\n\t/**\r\n\t * Star's radius in pixels.\r\n\t */\r\n\tradius?: number;\r\n\r\n\t/**\r\n\t * Star's inner radius in pixels.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Number of spikes\r\n\t */\r\n\tspikes?: number;\r\n\r\n}\r\n\r\nexport interface IStarPrivate extends IGraphicsPrivate {\r\n}\r\n\r\n/**\r\n * Draws a Star.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\r\nexport class Star extends Graphics {\r\n\r\n\tdeclare public _settings: IStarSettings;\r\n\tdeclare public _privateSettings: IStarPrivate;\r\n\r\n\tpublic static className: string = \"Star\";\r\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([Star.className]);\r\n\r\n\tpublic _beforeChanged() {\r\n\t\tsuper._beforeChanged();\r\n\r\n\t\tif (this.isDirty(\"radius\") || this.isDirty(\"innerRadius\") || this.isDirty(\"spikes\")) {\r\n\t\t\tthis._clear = true;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic _changed() {\r\n\t\tsuper._changed();\r\n\r\n\t\tif (this._clear) {\r\n\t\t\tconst display = this._display;\r\n\t\t\tconst r = this.get(\"radius\", 0);\r\n\t\t\tconst ir = $utils.relativeToValue(this.get(\"innerRadius\", 0), r);\r\n\t\t\tconst spikes = this.get(\"spikes\", 0);\r\n\t\t\tconst step = Math.PI / spikes;\r\n\t\t\tlet angle = Math.PI / 2 * 3;\r\n\r\n\t\t\tdisplay.moveTo(0, - r)\r\n\r\n\t\t\tfor (let i = 0; i < spikes; i++) {\r\n\t\t\t\tdisplay.lineTo(Math.cos(angle) * r, Math.sin(angle) * r)\r\n\t\t\t\tangle += step\r\n\r\n\t\t\t\tdisplay.lineTo(Math.cos(angle) * ir, Math.sin(angle) * ir)\r\n\t\t\t\tangle += step\r\n\t\t\t}\r\n\t\t\tdisplay.lineTo(0, -r)\r\n\t\t\tdisplay.closePath();\r\n\t\t}\r\n\t}\r\n}\r\n","import type { IPoint } from \"../../core/util/IPoint\";\n\nimport { Container, IContainerSettings, IContainerPrivate } from \"./Container\";\nimport { Label } from \"../../core/render/Label\";\nimport { p100 } from \"../../core/util/Percent\";\nimport { RoundedRectangle } from \"../../core/render/RoundedRectangle\";\nimport { Template } from \"../../core/util/Template\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { Color } from \"../../core/util/Color\";\nimport { Tooltip } from \"../../core/render/Tooltip\";\nimport { LinearGradient } from \"../../core/render/gradients/LinearGradient\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $type from \"../../core/util/Type\";\n\nexport interface IHeatLegendSettings extends IContainerSettings {\n\n\t/**\n\t * Starting (lowest value) color.\n\t */\n\tstartColor: Color;\n\n\t/**\n\t * Ending (highest value) color.\n\t */\n\tendColor: Color;\n\n\t/**\n\t * Start (lowest) value.\n\t */\n\tstartValue?: number;\n\n\t/**\n\t * End (highest) value.\n\t */\n\tendValue?: number;\n\n\t/**\n\t * Text for start label.\n\t */\n\tstartText?: string;\n\n\t/**\n\t * Text for end label.\n\t */\n\tendText?: string;\n\n\t/**\n\t * Number of steps\n\t *\n\t * @default 1\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/legend/heat-legend/#Gradient_or_steps} for more info\n\t */\n\tstepCount?: number;\n\n\t/**\n\t * Orientation of the heat legend.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/legend/heat-legend/#Orientation} for more info\n\t */\n\torientation: \"horizontal\" | \"vertical\";\n\n}\n\nexport interface IHeatLegendPrivate extends IContainerPrivate {\n}\n\n/**\n * Heat legend.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/legend/heat-legend/} for more info\n */\nexport class HeatLegend extends Container {\n\n\t/**\n\t * A [[Container]] that all labels are placed in.\n\t *\n\t * @default Container.new()\n\t */\n\tpublic readonly labelContainer: Container = this.children.push(Container.new(this._root, {}));\n\n\t/**\n\t * A [[Container]] that all markers are placed in.\n\t *\n\t * @default Container.new()\n\t */\n\tpublic readonly markerContainer: Container = this.children.push(Container.new(this._root, {}));\n\n\t/**\n\t * A start [[Label]].\n\t *\n\t * @default Label.new()\n\t */\n\tpublic readonly startLabel: Label = this.labelContainer.children.push(Label.new(this._root, { themeTags: [\"start\"] }));\n\n\t/**\n\t * An end [[Label]].\n\t *\n\t * @default Label.new()\n\t */\n\tpublic readonly endLabel: Label = this.labelContainer.children.push(Label.new(this._root, { themeTags: [\"end\"] }));\n\n\tpublic static className: string = \"HeatLegend\";\n\tpublic static classNames: Array<string> = Container.classNames.concat([HeatLegend.className]);\n\n\tdeclare public _settings: IHeatLegendSettings;\n\tdeclare public _privateSettings: IHeatLegendPrivate;\n\n\n\tprotected _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"heatlegend\", this._settings.orientation]);\n\t\tsuper._afterNew();\n\t\tthis.set(\"tooltip\", Tooltip.new(this._root, {\n\t\t\tthemeTags: [\"heatlegend\"]\n\t\t}));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeMarker(): RoundedRectangle {\n\t\tconst marker = this.markers.make();\n\t\tmarker.states.create(\"disabled\", {});\n\t\treturn marker;\n\t}\n\n\t/**\n\t * List of rectangle elements used for default legend markers.\n\t *\n\t * @default new ListTemplate<RoundedRectangle>\n\t */\n\tpublic readonly markers: ListTemplate<RoundedRectangle> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => RoundedRectangle._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.markers.template.get(\"themeTags\", []), [this.get(\"orientation\"), \"heatlegend\", \"marker\"])\n\t\t}, [this.markers.template])\n\t);\n\n\n\t/**\n\t * Moves and shows tooltip at specific value.\n\t *\n\t * Can also specify optional text to show in tooltip, as well as the color.\n\t *\n\t * @param  value  Value\n\t * @param  text   Text\n\t * @param  color  Color\n\t */\n\tpublic showValue(value: number, text?: string, color?: Color) {\n\t\tconst tooltip = this.getTooltip();\n\t\tif (tooltip && $type.isNumber(value)) {\n\n\t\t\tconst startValue = this.get(\"startValue\", 0);\n\t\t\tconst endValue = this.get(\"endValue\", 1);\n\n\t\t\tlet c = (value - startValue) / (endValue - startValue);\n\n\t\t\tif(c == Infinity || c == -Infinity || isNaN(c)) {\n\t\t\t\tc = 0.5;\n\t\t\t}\n\n\t\t\tconst startColor = this.get(\"startColor\")!;\n\t\t\tconst endColor = this.get(\"endColor\")!;\n\n\t\t\tif (!text) {\n\t\t\t\ttext = this.getNumberFormatter().format(value);\n\t\t\t}\n\n\t\t\tif (!color) {\n\t\t\t\tcolor = Color.interpolate(c, startColor, endColor);\n\t\t\t}\n\n\t\t\ttooltip.label.set(\"text\", text);\n\t\t\tlet p:IPoint;\n\n\t\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\t\tp = this.markerContainer.toGlobal({ x: 0, y: this.innerHeight() * (1 - c) });\n\t\t\t}\n\t\t\telse {\n\t\t\t\tp = this.markerContainer.toGlobal({ x: this.innerWidth() * c, y: 0 });\n\t\t\t}\n\n\t\t\tlet background = tooltip.get(\"background\");\n\t\t\tif (background) {\n\t\t\t\tbackground.set(\"fill\", color)\n\t\t\t}\n\t\t\ttooltip.set(\"pointTo\", p);\n\t\t\ttooltip.show();\n\t\t}\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tconst labelContainer = this.labelContainer;\n\t\tconst orientation = this.get(\"orientation\");\n\t\tconst startLabel = this.startLabel;\n\t\tconst endLabel = this.endLabel;\n\t\tconst tooltip = this.getTooltip();\n\n\t\tif (this.isDirty(\"orientation\")) {\n\t\t\tif (orientation == \"vertical\") {\n\t\t\t\tthis.markerContainer.setAll({ layout: this._root.verticalLayout, height: p100 });\n\t\t\t\tthis.set(\"layout\", this._root.horizontalLayout);\n\t\t\t\tstartLabel.setAll({ y: p100, x: undefined, centerY: p100, centerX: p100 });\n\t\t\t\tendLabel.setAll({ y: 0, x: undefined, centerY: 0, centerX: p100 });\n\t\t\t\tlabelContainer.setAll({ height: p100, width: undefined });\n\t\t\t\tif (tooltip) {\n\t\t\t\t\ttooltip.set(\"pointerOrientation\", \"horizontal\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.markerContainer.setAll({ layout: this._root.horizontalLayout, width: p100 });\n\t\t\t\tthis.set(\"layout\", this._root.verticalLayout);\n\t\t\t\tstartLabel.setAll({ x: 0, y: undefined, centerX: 0, centerY: 0 });\n\t\t\t\tendLabel.setAll({ x: p100, y: undefined, centerX: p100, centerY: 0 });\n\t\t\t\tlabelContainer.setAll({ width: p100, height: undefined });\n\t\t\t\tif (tooltip) {\n\t\t\t\t\ttooltip.set(\"pointerOrientation\", \"vertical\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"stepCount\")) {\n\t\t\tconst stepCount = this.get(\"stepCount\", 1);\n\t\t\tconst startColor = this.get(\"startColor\")!;\n\t\t\tconst endColor = this.get(\"endColor\")!;\n\t\t\tthis.markerContainer.children.clear();\n\t\t\tif (stepCount > 1) {\n\t\t\t\tfor (let i = 0; i < stepCount; i++) {\n\t\t\t\t\tconst marker = this.makeMarker();\n\n\t\t\t\t\tif (orientation == \"vertical\") {\n\t\t\t\t\t\tthis.markerContainer.children.moveValue(marker, 0);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.markerContainer.children.push(marker);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (startColor && endColor) {\n\t\t\t\t\t\tmarker.set(\"fill\", Color.interpolate(i / stepCount, startColor, endColor));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (stepCount == 1) {\n\t\t\t\tconst marker = this.makeMarker();\n\t\t\t\tthis.markerContainer.children.push(marker);\n\t\t\t\tconst gradient = LinearGradient.new(this._root, { stops: [{ color: startColor }, { color: endColor }] });\n\n\t\t\t\tif (orientation == \"vertical\") {\n\t\t\t\t\tgradient.set(\"rotation\", 90);\n\t\t\t\t\tlet stops = gradient.get(\"stops\");\n\t\t\t\t\tif (stops) {\n\t\t\t\t\t\tstops.reverse();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tgradient.set(\"rotation\", 0);\n\t\t\t\t}\n\t\t\t\tif (startColor && endColor) {\n\t\t\t\t\tmarker.set(\"fillGradient\", gradient);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"startText\") || this.isDirty(\"startValue\")) {\n\t\t\tstartLabel.set(\"text\", this.get(\"startText\", this.getNumberFormatter().format(this.get(\"startValue\", 0))));\n\t\t}\n\n\t\tif (this.isDirty(\"endText\") || this.isDirty(\"endValue\")) {\n\t\t\tendLabel.set(\"text\", this.get(\"endText\", this.getNumberFormatter().format(this.get(\"endValue\", 1))))\n\t\t}\n\t}\n}\n","import { Scrollbar, IScrollbarPrivate, IScrollbarSettings, IScrollbarEvents } from \"./Scrollbar\";\r\n\r\nexport interface ISliderSettings extends IScrollbarSettings {\r\n}\r\n\r\nexport interface ISliderPrivate extends IScrollbarPrivate {\r\n}\r\n\r\nexport interface ISliderEvents extends IScrollbarEvents {\r\n}\r\n\r\n/**\r\n * A control that allows zooming chart's axes, or other uses requiring range\r\n * selection.\r\n */\r\nexport class Slider extends Scrollbar {\r\n\r\n\tdeclare public _settings: ISliderSettings;\r\n\tdeclare public _privateSettings: ISliderPrivate;\r\n\tdeclare public _events: ISliderEvents;\r\n\r\n\tpublic static className: string = \"Slider\";\r\n\tpublic static classNames: Array<string> = Scrollbar.classNames.concat([Slider.className]);\r\n\r\n\r\n\tprotected _afterNew() {\r\n\t\tthis._addOrientationClass();\r\n\t\tsuper._afterNew();\r\n\r\n\t\tthis.endGrip.setPrivate(\"visible\", false);\r\n\t\tthis.thumb.setPrivate(\"visible\", false);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateGrips() {\r\n\t\tsuper.updateGrips();\r\n\t\tconst startGrip = this.startGrip;\r\n\t\tthis.endGrip.setAll({ x: startGrip.x(), y: startGrip.y() });\r\n\t\tthis.setRaw(\"end\", this.get(\"start\"));\r\n\t}\r\n}\r\n","import { Pattern, IPatternSettings, IPatternPrivate } from \"./Pattern\";\r\nimport { Color } from \"../../util/Color\";\r\n\r\nexport interface IGrainPatternSettings extends IPatternSettings {\r\n\r\n\t/**\r\n\t * Size of a grain in pixels.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tsize?: number;\r\n\r\n\t/**\r\n\t * Density of noise.\r\n\t *\r\n\t * Value range: `0` (no noise applied) to `1` (noise is applied to every\r\n\t * pixel).\r\n\t *\r\n\t * The bigger the value, the higher chance that pixel will have another pixel\r\n\t * painted over with random opacity from `minOpacity` to `maxOpacity`.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tdensity?: number;\r\n\r\n\t/**\r\n\t * Minimum opacity of a noise pixel.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tminOpacity?: number;\r\n\r\n\t/**\r\n\t * Maximum opacity of a noise pixel.\r\n\t *\r\n\t * @default 0.3\r\n\t */\r\n\tmaxOpacity?: number;\r\n\r\n\t/**\r\n\t * An array of colors to randomly use for pixels.\r\n\t *\r\n\t * @default [color(0x000000)]\r\n\t */\r\n\tcolors?: Array<Color>;\r\n\r\n\t/**\r\n\t * Horizontal gap between noise pixels measured in `size`.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\thorizontalGap?: number;\r\n\r\n\t/**\r\n\t * Vertical gap between noise pixels measured in `size`.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tverticalGap?: number;\r\n\r\n}\r\n\r\nexport interface IGrainPatternPrivate extends IPatternPrivate {\r\n}\r\n\r\n/**\r\n * Grain pattern.\r\n * \r\n * Allows to add grain (noise) effect to your [[Graphics]] objects.\r\n * \r\n * Note, grain pattern does not support `fill` and `color` setting.\r\n * Use `colors` setting to define colors of a grain pixels.\r\n * \r\n * Note, rotation setting is not supported by this pattern.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Grain_patterns} for more info\r\n * @since 5.5.0\r\n */\r\nexport class GrainPattern extends Pattern {\r\n\tdeclare public _settings: IGrainPatternSettings;\r\n\tdeclare public _privateSettings: IGrainPatternPrivate;\r\n\r\n\tpublic static className: string = \"GrainPattern\";\r\n\tpublic static classNames: Array<string> = Pattern.classNames.concat([GrainPattern.className]);\r\n\r\n\tpublic canvas: HTMLCanvasElement = document.createElement(\"canvas\");\r\n\tpublic context: CanvasRenderingContext2D = this.canvas.getContext(\"2d\")!;\r\n\r\n\tprotected _clearGrain: boolean = false;\r\n\r\n\tpublic _beforeChanged() {\r\n\t\t//document.body.appendChild(this.canvas); // temp\r\n\t\tthis.canvas.width = this.get(\"width\", 200);\r\n\t\tthis.canvas.height = this.get(\"height\", 200);\r\n\r\n\t\tif (this.isDirty(\"size\") || this.isDirty(\"density\") || this.isDirty(\"minOpacity\") || this.isDirty(\"maxOpacity\") || this.isDirty(\"colors\") || this.isDirty(\"horizontalGap\") || this.isDirty(\"verticalGap\")) {\r\n\t\t\tthis._clearGrain = true;\r\n\t\t}\r\n\t\tsuper._beforeChanged();\r\n\t}\r\n\r\n\r\n\tpublic _changed() {\r\n\t\tsuper._changed();\r\n\r\n\t\tif (this._clearGrain) {\r\n\t\t\tconst width = this.get(\"width\", 200);\r\n\t\t\tconst height = this.get(\"height\", 200);\r\n\r\n\t\t\tconst patternData = this.context.getImageData(0, 0, width, height);\r\n\r\n\t\t\tconst size = Math.max(1, this.get(\"size\", 1));\r\n\t\t\tconst minOpacity = this.get(\"minOpacity\", 0);\r\n\t\t\tconst maxOpacity = this.get(\"maxOpacity\", 0.3);\r\n\r\n\t\t\tconst colors = this.get(\"colors\", [this.get(\"color\", Color.fromHex(0x000000))])\r\n\r\n\t\t\tconst cols = width / size;\r\n\t\t\tconst rows = height / size;\r\n\t\t\tconst density = this.get(\"density\", 1);\r\n\t\t\tconst horizontalGap = this.get(\"horizontalGap\", 0) + 1;\r\n\t\t\tconst verticalGap = this.get(\"verticalGap\", 0) + 1;\r\n\r\n\t\t\tfor (let r = 0; r < rows; r++) {\r\n\r\n\t\t\t\tif (verticalGap > 0) {\r\n\t\t\t\t\tif (r / verticalGap != Math.round(r / verticalGap)) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let c = 0; c < cols; c++) {\r\n\t\t\t\t\tconst color = colors[Math.floor(Math.random() * colors.length)];\r\n\t\t\t\t\tconst alpha = (minOpacity + Math.random() * (maxOpacity - minOpacity)) * 255;\r\n\t\t\t\t\tconst rnd = Math.random();\r\n\r\n\t\t\t\t\tif (horizontalGap > 0) {\r\n\t\t\t\t\t\tif (c / horizontalGap != Math.round(c / horizontalGap)) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (rnd < density) {\r\n\t\t\t\t\t\tthis._setRectData(c, r, size, width, patternData.data, color.r, color.g, color.b, alpha);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.context.putImageData(patternData, 0, 0);\r\n\t\t\tthis._pattern = this.context.createPattern(this.canvas, \"repeat\");\r\n\t\t}\r\n\r\n\t\tthis._clearGrain = false;\r\n\t}\r\n\r\n\tprotected _checkDirtyFill() {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected _setRectData(col: number, row: number, size: number, width: number, data: Uint8ClampedArray, rc: number, gc: number, bc: number, ac: number) {\r\n\t\tfor (var c = col * size; c < col * size + size; c++) {\r\n\t\t\tfor (var r = row * size; r < row * size + size; r++) {\r\n\t\t\t\tvar i = (r * width + c) * 4;\r\n\r\n\t\t\t\tdata[i] = rc;\r\n\t\t\t\tdata[i + 1] = gc;\r\n\t\t\t\tdata[i + 2] = bc;\r\n\t\t\t\tdata[i + 3] = ac;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","import type { IGradient } from \"../backend/Renderer\";\nimport type { Sprite } from \"../Sprite\";\nimport type { Percent } from \"../../util/Percent\";\n\nimport { Gradient, IGradientSettings, IGradientPrivate } from \"./Gradient\";\nimport { Color } from \"../../util/Color\";\n\nimport * as $array from \"../../util/Array\";\nimport * as $type from \"../../util/Type\";\nimport * as $utils from \"../../util/Utils\";\n\n\nexport interface IRadialGradientSettings extends IGradientSettings {\n\n\t/**\n\t * Gradient radius in pixels or percent (relative to the `target`).\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * X position.\n\t */\n\tx?: number | Percent;\n\n\t/**\n\t * Y position.\n\t */\n\ty?: number | Percent;\n\n}\n\nexport interface IRadialGradientPrivate extends IGradientPrivate {\n}\n\n/**\n * Radial gradient.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\n */\nexport class RadialGradient extends Gradient {\n\n\tdeclare public _settings: IRadialGradientSettings;\n\tdeclare public _privateSettings: IRadialGradientPrivate;\n\n\tpublic static className: string = \"RadialGradient\";\n\tpublic static classNames: Array<string> = Gradient.classNames.concat([RadialGradient.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getFill(target: Sprite): IGradient {\n\t\tconst bounds = this.getBounds(target);\n\n\t\tlet x = 0;\n\t\tlet y = 0;\n\n\t\tlet l = bounds.left || 0;\n\t\tlet r = bounds.right || 0;\n\t\tlet t = bounds.top || 0;\n\t\tlet b = bounds.bottom || 0;\n\n\t\tconst width = r - l;\n\t\tconst height = b - t;\n\n\t\tlet radius = target.get(\"radius\" as any);\n\t\tif ($type.isNumber(radius)) {\n\t\t\tx = 0;\n\t\t\ty = 0;\n\t\t}\n\t\telse {\n\t\t\tradius = Math.min(width, height) / 2;\n\t\t\tx = width / 2;\n\t\t\ty = height / 2;\n\t\t}\n\n\t\tlet ux = this.get(\"x\");\n\t\tlet uy = this.get(\"y\");\n\t\tif (ux != null) {\n\t\t\tx = $utils.relativeToValue(ux, width);\n\t\t}\n\n\t\tif (uy != null) {\n\t\t\ty = $utils.relativeToValue(uy, height);\n\t\t}\n\n\t\tconst gradient = this._root._renderer.createRadialGradient(x, y, 0, x, y, radius);\n\t\tconst stops = this.get(\"stops\")!;\n\t\tif (stops) {\n\t\t\tlet i = 0;\n\t\t\t$array.each(stops, (stop) => {\n\n\t\t\t\tlet offset = stop.offset;\n\n\t\t\t\tif (!$type.isNumber(offset)) {\n\t\t\t\t\toffset = i / (stops.length - 1);\n\t\t\t\t}\n\n\t\t\t\tlet opacity = stop.opacity;\n\n\t\t\t\tif (!$type.isNumber(opacity)) {\n\t\t\t\t\topacity = 1;\n\t\t\t\t}\n\n\t\t\t\tlet color = stop.color;\n\n\t\t\t\tif (color) {\n\n\t\t\t\t\tconst lighten = stop.lighten;\n\t\t\t\t\tif (lighten) {\n\t\t\t\t\t\tcolor = Color.lighten(color, lighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tconst brighten = stop.brighten;\n\t\t\t\t\tif (brighten) {\n\t\t\t\t\t\tcolor = Color.brighten(color, brighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tgradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t})\n\t\t}\n\n\t\treturn gradient\n\t}\n}\n","import { Pattern, IPatternSettings, IPatternPrivate } from \"./Pattern\";\n\nimport * as $math from \"../../util/Math\";\n\nexport interface ICirclePatternSettings extends IPatternSettings {\n\n\t/**\n\t * Gap between circles, in pixels.\n\t *\n\t * @default 3\n\t */\n\tgap?: number;\n\n\t/**\n\t * Radius of the circles, in pixels.\n\t *\n\t * @default 3\n\t */\n\tradius?: number;\n\n\t/**\n\t * If set to `true`, will place every second circle, creating checkered\n\t * pattern.\n\t *\n\t * @default false\n\t */\n\tcheckered?: boolean;\n\n\t/**\n\t * Center circles.\n\t *\n\t * @default true\n\t */\n\tcentered?: boolean;\n\n}\n\nexport interface ICirclePatternPrivate extends IPatternPrivate {\n}\n\n/**\n * Circle pattern.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class CirclePattern extends Pattern {\n\n\tdeclare public _settings: ICirclePatternSettings;\n\tdeclare public _privateSettings: ICirclePatternPrivate;\n\n\tpublic static className: string = \"CirclePattern\";\n\tpublic static classNames: Array<string> = Pattern.classNames.concat([CirclePattern.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"gap\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tprotected _draw() {\n\t\tsuper._draw();\n\n\t\tconst checkered = this.get(\"checkered\", false);\n\t\tconst centered = this.get(\"centered\", true);\n\t\tconst gap = this.get(\"gap\", 0);\n\t\tconst rotation = this.get(\"rotation\", 0);\n\t\tlet w = this.get(\"width\", 100);\n\t\tlet h = this.get(\"height\", 100);\n\t\tlet radius = this.get(\"radius\", 3);\n\n\t\tlet cellW = radius * 2 + gap;\n\t\tlet cellH = radius * 2 + gap;\n\n\t\tlet cols = Math.round(w / cellW);\n\t\tlet rows = Math.round(h / cellH);\n\n\t\tcellW = w / cols;\n\t\tcellH = h / rows;\n\n\t\tif (rotation != 0) {\n\t\t\t// @todo this is probably not right\n\t\t\tthis._display.x = cellW * $math.cos(rotation);\n\t\t\tthis._display.y = cellH * $math.sin(rotation);\n\t\t}\n\n\t\tconst color = this.get(\"color\");\n\t\tconst colorOpacity = this.get(\"colorOpacity\");\n\t\tif (color || colorOpacity) {\n\t\t\tthis._display.beginFill(color, colorOpacity);\n\t\t}\n\n\t\tfor (let r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++) {\n\t\t\tfor (let c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++) {\n\t\t\t\tif (!checkered || ((r & 1) != 1 && (c & 1) != 1) || ((r & 1) == 1 && (c & 1) == 1)) {\n\t\t\t\t\tlet x = c * cellW;\n\t\t\t\t\tlet y = r * cellH;\n\t\t\t\t\tif (centered) {\n\t\t\t\t\t\tx += cellW + gap / 2;\n\t\t\t\t\t\ty += cellH + gap / 2;\n\t\t\t\t\t}\n\t\t\t\t\tthis._display.drawCircle(x - radius, y - radius, radius);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (checkered) {\n\t\t\tw = w / 2 - gap * 2;\n\t\t\th = h / 2 - gap * 2;\n\t\t}\n\t\telse {\n\t\t\tw -= gap;\n\t\t\th -= gap;\n\t\t}\n\n\t\tif (color || colorOpacity) {\n\t\t\tthis._display.endFill();\n\t\t}\n\n\t}\n}\n","import { Pattern, IPatternSettings, IPatternPrivate } from \"./Pattern\";\nimport * as $type from \"../../util//Type\";\n\nexport interface ILinePatternSettings extends IPatternSettings {\n\n\t/**\n\t * Gap between  lines, in pixels.\n\t *\n\t * @default 6\n\t */\n\tgap?: number;\n\n}\n\nexport interface ILinePatternPrivate extends IPatternPrivate {\n}\n\n/**\n * Line pattern.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class LinePattern extends Pattern {\n\n\tdeclare public _settings: ILinePatternSettings;\n\tdeclare public _privateSettings: ILinePatternPrivate;\n\n\tpublic static className: string = \"LinePattern\";\n\tpublic static classNames: Array<string> = Pattern.classNames.concat([LinePattern.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"gap\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tprotected _draw() {\n\t\tsuper._draw();\n\n\t\tconst w = this.get(\"width\", 100);\n\t\tconst h = this.get(\"height\", 100);\n\t\tconst gap = this.get(\"gap\", 0);\n\t\tconst strokeWidth = this.get(\"strokeWidth\", 1);\n\n\t\tif (!gap) {\n\t\t\tthis._display.moveTo(0, 0);\n\t\t\tthis._display.lineTo(w, 0);\n\t\t}\n\t\telse {\n\t\t\tlet step = gap + strokeWidth;\n\t\t\tlet count = h / step;\n\n\t\t\tfor (let i = -count; i < count * 2; i++) {\n\t\t\t\tconst y = Math.round(i * step - step / 2) + 0.5;\n\t\t\t\tthis._display.moveTo(-w, y);\n\t\t\t\tthis._display.lineTo(w * 2, y);\n\t\t\t}\n\t\t}\n\n\t\tthis._display.lineStyle(strokeWidth, this.get(\"color\"), this.get(\"colorOpacity\"));\n\n\t\tlet strokeDasharray = this.get(\"strokeDasharray\");\n\t\tif ($type.isNumber(strokeDasharray)) {\n\t\t\tif (strokeDasharray < 0.5) {\n\t\t\t\tstrokeDasharray = [0];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstrokeDasharray = [strokeDasharray]\n\t\t\t}\n\t\t}\n\t\tthis._display.setLineDash(strokeDasharray as number[]);\n\n\t\tconst strokeDashoffset = this.get(\"strokeDashoffset\");\n\t\tif (strokeDashoffset) {\n\t\t\tthis._display.setLineDashOffset(strokeDashoffset);\n\t\t}\n\n\t\tthis._display.endStroke();\n\t}\n}\n","import { Pattern, IPatternSettings, IPatternPrivate } from \"./Pattern\";\n\nimport * as $math from \"../../util/Math\";\n\nexport interface IRectanglePatternSettings extends IPatternSettings {\n\n\t/**\n\t * Gap between rectangles, in pixels.\n\t *\n\t * @default 6\n\t */\n\tgap?: number;\n\n\t/**\n\t * Maximum width of the rectangle, in pixels.\n\t *\n\t * @default 5\n\t */\n\tmaxWidth?: number;\n\n\t/**\n\t * Maximum height of the rectangle, in pixels.\n\t *\n\t * @default 5\n\t */\n\tmaxHeight?: number;\n\n\t/**\n\t * If set to `true`, will place every second rectangle, creating checkered\n\t * pattern.\n\t *\n\t * @default false\n\t */\n\tcheckered?: boolean;\n\n\t/**\n\t * Center rectangles.\n\t *\n\t * @default true\n\t */\n\tcentered?: boolean;\n\n}\n\nexport interface IRectanglePatternPrivate extends IPatternPrivate {\n}\n\n/**\n * Rectangle pattern.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class RectanglePattern extends Pattern {\n\tdeclare public _settings: IRectanglePatternSettings;\n\tdeclare public _privateSettings: IRectanglePatternPrivate;\n\n\tpublic static className: string = \"RectanglePattern\";\n\tpublic static classNames: Array<string> = Pattern.classNames.concat([RectanglePattern.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"gap\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tprotected _draw() {\n\t\tsuper._draw();\n\n\t\tconst checkered = this.get(\"checkered\", false);\n\t\tconst centered = this.get(\"centered\", true);\n\t\tconst gap = this.get(\"gap\", 0);\n\t\tconst rotation = this.get(\"rotation\", 0);\n\t\tlet w = this.get(\"width\", 100);\n\t\tlet h = this.get(\"height\", 100);\n\t\tlet rectW = this.get(\"maxWidth\", 5);\n\t\tlet rectH = this.get(\"maxHeight\", 5);\n\n\t\tconst display = this._display;\n\n\t\tlet cellW = rectW + gap;\n\t\tlet cellH = rectH + gap;\n\n\t\tlet cols = Math.round(w / cellW);\n\t\tlet rows = Math.round(h / cellH);\n\n\t\tcellW = w / cols;\n\t\tcellH = h / rows;\n\n\t\tif (rotation != 0) {\n\t\t\t// @todo this is probably not right\n\t\t\tdisplay.x = cellW / 2 * $math.cos(rotation);\n\t\t\tdisplay.y = -cellH / 2 * $math.sin(rotation);\n\t\t}\n\n\t\tfor (let r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++) {\n\t\t\tfor (let c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++) {\n\t\t\t\tif (!checkered || ((r & 1) != 1 && (c & 1) != 1) || ((r & 1) == 1 && (c & 1) == 1)) {\n\t\t\t\t\tlet x = c * cellW;\n\t\t\t\t\tlet y = r * cellH;\n\t\t\t\t\tif (centered) {\n\t\t\t\t\t\tx += (cellW - rectW) / 2;\n\t\t\t\t\t\ty += (cellH - rectH) / 2;\n\t\t\t\t\t}\n\t\t\t\t\tdisplay.drawRect(x, y, rectW, rectH);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (checkered) {\n\t\t\tw = w / 2 - gap * 2;\n\t\t\th = h / 2 - gap * 2;\n\t\t}\n\t\telse {\n\t\t\tw -= gap;\n\t\t\th -= gap;\n\t\t}\n\n\t\tconst color = this.get(\"color\");\n\t\tconst colorOpacity = this.get(\"colorOpacity\");\n\t\tif (color || colorOpacity) {\n\t\t\t// this._display.lineStyle(strokeWidth, stroke, colorOpacity);\n\t\t\t// this._display.endStroke();\n\t\t\tdisplay.beginFill(color, colorOpacity);\n\t\t\tdisplay.endFill();\n\t\t}\n\n\t}\n}\n","import { Pattern, IPatternSettings, IPatternPrivate } from \"./Pattern\";\n\n//import * as $math from \"../../util/Math\";\n\nexport interface IPathPatternSettings extends IPatternSettings {\n\n\t// /**\n\t//  * Gap between Paths, in pixels.\n\t//  *\n\t//  * @default 6\n\t//  */\n\t// gap?: number;\n\n\t// /**\n\t//  * Maximum width of the Path, in pixels.\n\t//  *\n\t//  * @default 5\n\t//  */\n\t// maxWidth?: number;\n\n\t// /**\n\t//  * Maximum height of the Path, in pixels.\n\t//  *\n\t//  * @default 5\n\t//  */\n\t// maxHeight?: number;\n\n\t// /**\n\t//  * If set to `true`, will place every second Path, creating checkered\n\t//  * pattern.\n\t//  *\n\t//  * @default false\n\t//  */\n\t// checkered?: boolean;\n\n\t// /**\n\t//  * Center image.\n\t//  *\n\t//  * @default true\n\t//  */\n\t// centered?: boolean;\n\n\t/**\n\t * Use an SVG path as pattern.\n\t *\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths} for more information\n\t */\n\tsvgPath?: string;\n\n}\n\nexport interface IPathPatternPrivate extends IPatternPrivate {\n}\n\n/**\n * A pattern that uses an SVG path.\n *\n * @since 5.2.33\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class PathPattern extends Pattern {\n\tdeclare public _settings: IPathPatternSettings;\n\tdeclare public _privateSettings: IPathPatternPrivate;\n\n\tpublic static className: string = \"PathPattern\";\n\tpublic static classNames: Array<string> = Pattern.classNames.concat([PathPattern.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"svgPath\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tprotected _draw() {\n\t\tsuper._draw();\n\n\t\t// const checkered = this.get(\"checkered\", false);\n\t\t// const centered = this.get(\"centered\", true);\n\t\t// const gap = this.get(\"gap\", 0);\n\t\t// const rotation = this.get(\"rotation\", 0);\n\t\t// let w = this.get(\"width\", 100);\n\t\t// let h = this.get(\"height\", 100);\n\t\t// let rectW = this.get(\"maxWidth\", 5);\n\t\t// let rectH = this.get(\"maxHeight\", 5);\n\n\n\t\t// let cellW = rectW + gap;\n\t\t// let cellH = rectH + gap;\n\n\t\t// let cols = Math.round(w / cellW);\n\t\t// let rows = Math.round(h / cellH);\n\n\t\t// cellW = w / cols;\n\t\t// cellH = h / rows;\n\n\t\t// if (rotation != 0) {\n\t\t// \t// @todo this is probably not right\n\t\t// \tthis._display.x = cellW / 2 * $math.cos(rotation);\n\t\t// \tthis._display.y = -cellH / 2 * $math.sin(rotation);\n\t\t// }\n\n\t\t// for (let r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++) {\n\t\t// \tfor (let c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++) {\n\t\t// \t\tif (!checkered || ((r & 1) != 1 && (c & 1) != 1) || ((r & 1) == 1 && (c & 1) == 1)) {\n\t\t// \t\t\tlet x = c * cellW;\n\t\t// \t\t\tlet y = r * cellH;\n\t\t// \t\t\tif (centered) {\n\t\t// \t\t\t\tx += (cellW - rectW) / 2;\n\t\t// \t\t\t\ty += (cellH - rectH) / 2;\n\t\t// \t\t\t}\n\t\t// \t\t\tthis._display.drawRect(x, y, rectW, rectH);\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\n\t\t// if (checkered) {\n\t\t// \tw = w / 2 - gap * 2;\n\t\t// \th = h / 2 - gap * 2;\n\t\t// }\n\t\t// else {\n\t\t// \tw -= gap;\n\t\t// \th -= gap;\n\t\t// }\n\n\t\tconst svgPath = this.get(\"svgPath\");\n\t\tif (svgPath != null) {\n\t\t\tthis._display.svgPath(svgPath!);\n\t\t}\n\n\t\tconst color = this.get(\"color\");\n\t\tconst colorOpacity = this.get(\"colorOpacity\");\n\t\tif (color || colorOpacity) {\n\t\t\t// this._display.lineStyle(strokeWidth, stroke, colorOpacity);\n\t\t\t// this._display.endStroke();\n\t\t\tthis._display.beginFill(color, colorOpacity);\n\t\t\tthis._display.endFill();\n\t\t}\n\n\t}\n}\n","import type { Pattern } from \"../render/patterns/Pattern\";\nimport type { Color } from \"./Color\";\n\nimport { LinePattern, ILinePatternSettings } from \"../render/patterns/LinePattern\";\nimport { RectanglePattern, IRectanglePatternSettings } from \"../render/patterns/RectanglePattern\";\nimport { CirclePattern, ICirclePatternSettings } from \"../render/patterns/CirclePattern\";\nimport { Entity, IEntitySettings, IEntityPrivate } from \"./Entity\";\n\n\nexport interface IPatternSetSettings extends IEntitySettings {\n\n\t/**\n\t * List of colors in the set.\n\t */\n\tpatterns?: Pattern[];\n\n\t/**\n\t * A step size when using `next()`.\n\t *\n\t * E.g. setting to `2` will make it return every second pattern in the list.\n\t *\n\t * @default 1\n\t */\n\tstep?: number;\n\n\t/**\n\t * A base color to use for all patterns.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Colors} for more info\n\t */\n\tcolor?: Color;\n\n\t/**\n\t * Start iterating patterns from specific index.\n\t */\n\tstartIndex?: number;\n\n}\n\nexport interface IPatternSetPrivate extends IEntityPrivate {\n\n\t/**\n\t * Current step.\n\t */\n\tcurrentStep?: number;\n\n}\n\n\n/**\n * An object which holds list of [[Pattern]] objects and can serve them up in\n * an interative way.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Pattern_sets} for more info\n * @since 5.10.0\n */\nexport class PatternSet extends Entity {\n\tpublic static className: string = \"PatternSet\";\n\tpublic static classNames: Array<string> = Entity.classNames.concat([PatternSet.className]);\n\n\tdeclare public _settings: IPatternSetSettings;\n\tdeclare public _privateSettings: IPatternSetPrivate;\n\n\tprotected _afterNew() {\n\t\t// Applying themes because pattern set will not have parent\n\t\tsuper._afterNewApplyThemes();\n\n\t\tif (this.get(\"patterns\", []).length === 0) {\n\t\t\tconst color = this.get(\"color\", this.root.interfaceColors.get(\"stroke\"));\n\t\t\tthis.set(\"patterns\", [\n\t\t\t\tthis.getLinePattern({\n\t\t\t\t\twidth: 1000,\n\t\t\t\t\theight: 1000,\n\t\t\t\t\trotation: 45,\n\t\t\t\t\tstrokeWidth: 1,\n\t\t\t\t\t//gap: 6,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getRectanglePattern({\n\t\t\t\t\twidth: 10,\n\t\t\t\t\theight: 10,\n\t\t\t\t\trotation: 0,\n\t\t\t\t\tmaxWidth: 4,\n\t\t\t\t\tmaxHeight: 4,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getLinePattern({\n\t\t\t\t\twidth: 1000,\n\t\t\t\t\theight: 1000,\n\t\t\t\t\trotation: -45,\n\t\t\t\t\tstrokeWidth: 1,\n\t\t\t\t\tgap: 6,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getCirclePattern({\n\t\t\t\t\twidth: 11,\n\t\t\t\t\theight: 11,\n\t\t\t\t\tradius: 2,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getLinePattern({\n\t\t\t\t\twidth: 6,\n\t\t\t\t\theight: 6,\n\t\t\t\t\trotation: 90,\n\t\t\t\t\tstrokeWidth: 1,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getRectanglePattern({\n\t\t\t\t\twidth: 14,\n\t\t\t\t\theight: 14,\n\t\t\t\t\trotation: 45,\n\t\t\t\t\tgap: 4,\n\t\t\t\t\tmaxWidth: 6,\n\t\t\t\t\tmaxHeight: 6,\n\t\t\t\t\tcheckered: true,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getLinePattern({\n\t\t\t\t\twidth: 6,\n\t\t\t\t\theight: 6,\n\t\t\t\t\trotation: 0,\n\t\t\t\t\tstrokeWidth: 1,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getRectanglePattern({\n\t\t\t\t\twidth: 15,\n\t\t\t\t\theight: 15,\n\t\t\t\t\trotation: 0,\n\t\t\t\t\tgap: 5,\n\t\t\t\t\tmaxWidth: 5,\n\t\t\t\t\tmaxHeight: 5,\n\t\t\t\t\tcheckered: true,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getLinePattern({\n\t\t\t\t\twidth: 1000,\n\t\t\t\t\theight: 1000,\n\t\t\t\t\trotation: 45,\n\t\t\t\t\tstrokeWidth: 2,\n\t\t\t\t\tgap: 3,\n\t\t\t\t\tstrokeDasharray: [4, 2],\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getCirclePattern({\n\t\t\t\t\twidth: 20,\n\t\t\t\t\theight: 20,\n\t\t\t\t\tradius: 3,\n\t\t\t\t\tgap: 4,\n\t\t\t\t\tcheckered: true,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getLinePattern({\n\t\t\t\t\twidth: 1000,\n\t\t\t\t\theight: 1000,\n\t\t\t\t\trotation: -45,\n\t\t\t\t\tstrokeWidth: 2,\n\t\t\t\t\tgap: 3,\n\t\t\t\t\tstrokeDasharray: [4, 2],\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getRectanglePattern({\n\t\t\t\t\twidth: 10,\n\t\t\t\t\theight: 10,\n\t\t\t\t\trotation: 0,\n\t\t\t\t\tgap: 1,\n\t\t\t\t\tmaxWidth: 9,\n\t\t\t\t\tmaxHeight: 9,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getLinePattern({\n\t\t\t\t\twidth: 1000,\n\t\t\t\t\theight: 1000,\n\t\t\t\t\trotation: -45,\n\t\t\t\t\tstrokeWidth: 2,\n\t\t\t\t\tgap: 1,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getLinePattern({\n\t\t\t\t\twidth: 1000,\n\t\t\t\t\theight: 1000,\n\t\t\t\t\trotation: 45,\n\t\t\t\t\tstrokeWidth: 2,\n\t\t\t\t\tgap: 1,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getLinePattern({\n\t\t\t\t\twidth: 1000,\n\t\t\t\t\theight: 1000,\n\t\t\t\t\trotation: 0,\n\t\t\t\t\tstrokeWidth: 3,\n\t\t\t\t\tgap: 1,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getLinePattern({\n\t\t\t\t\twidth: 1000,\n\t\t\t\t\theight: 1000,\n\t\t\t\t\trotation: 90,\n\t\t\t\t\tstrokeWidth: 3,\n\t\t\t\t\tgap: 1,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t])\n\t\t}\n\n\t\tthis._dirty[\"patterns\"] = false;\n\n\t}\n\n\tpublic _beforeChanged(): void {\n\t\tif (this.isDirty(\"patterns\")) {\n\t\t\tthis.reset();\n\t\t}\n\t}\n\n\t/**\n\t * Returns a [[Pattern]] at specific index.\n\t *\n\t * @param   index  Index\n\t * @return         Color\n\t */\n\tpublic getIndex(index: number): Pattern {\n\t\tconst patterns = this.get(\"patterns\", []);\n\n\t\tif ((index < patterns.length) && patterns[index] !== null) {\n\t\t\treturn patterns[index];\n\t\t}\n\n\n\n\t\tif (index > (patterns.length - 1)) {\n\t\t\tconst adjustedIndex = index - Math.floor(index * (index / patterns.length));\n\t\t\treturn patterns[adjustedIndex];\n\t\t}\n\t\treturn patterns[index];\n\t}\n\n\t/**\n\t * Returns next [[Color]] in the list.\n\t *\n\t * If the list is out of colors, new ones are generated dynamically.\n\t */\n\tpublic next(): Pattern {\n\t\tlet currentStep = this.getPrivate(\"currentStep\", this.get(\"startIndex\", 0));\n\t\tthis.setPrivate(\"currentStep\", currentStep + this.get(\"step\", 1));\n\t\treturn this.getIndex(currentStep);\n\t}\n\n\t/**\n\t * Resets counter to the start of the list, so the next call for `next()` will\n\t * return the first pattern.\n\t */\n\tpublic reset(): void {\n\t\tthis.setPrivate(\"currentStep\", this.get(\"startIndex\", 0));\n\t}\n\n\t/**\n\t * Returns a [[LinePattern].\n\t *\n\t * @param   settings  Pattern settings\n\t * @return            Pattern object\n\t */\n\tpublic getLinePattern(settings: ILinePatternSettings): LinePattern {\n\t\tlet pattern = LinePattern.new(this.root, settings);\n\t\treturn pattern;\n\t}\n\n\t/**\n\t * Returns a [[RectanglePattern].\n\t *\n\t * @param   settings  Pattern settings\n\t * @return            Pattern object\n\t */\n\tpublic getRectanglePattern(settings: IRectanglePatternSettings): RectanglePattern {\n\t\tlet pattern = RectanglePattern.new(this.root, settings);\n\t\treturn pattern;\n\t}\n\n\t/**\n\t * Returns a [[CirclePattern].\n\t *\n\t * @param   settings  Pattern settings\n\t * @return            Pattern object\n\t */\n\tpublic getCirclePattern(settings: ICirclePatternSettings): CirclePattern {\n\t\tlet pattern = CirclePattern.new(this.root, settings);\n\t\treturn pattern;\n\t}\n\n}"],"names":["Picture","Sprite","constructor","Object","defineProperty","this","_root","_renderer","makePicture","undefined","_changed","super","isDirty","width","get","_display","$type","height","clear","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","shadowOpacity","_load","src","image","Image","crossOrigin","events","decode","then","_updateSize","isDisposed","isEnabled","dispatch","type","target","catch","_error","w","getPrivate","h","r","markDirtyBounds","markDirty","classNames","concat","className","ZoomTools","Container","children","push","Button","new","themeTags","_afterNew","set","verticalLayout","addTag","plusButton","setAll","icon","Graphics","layout","minusButton","homeButton","_prepareChildren","previous","_prevSettings","ZoomableContainer","_targetDisposer","addDisposer","contents","on","scale","root","once","_disposer","MultiDisposer","zoomIn","zoomOut","goHome","dispose","p100","x","y","draggable","background","Rectangle","fill","color","fillOpacity","_disposers","event","_handleThisDown","_handleThisUp","_handleThisMove","bg","adapters","add","Number","maxPanOut","Math","min","max","_handleSetWheel","cancelTouch","_wheelDp","wheelEvent","originalEvent","$utils","preventDefault","point","toLocal","_handleWheelZoom","deltaY","delta","step","zoomLevel","newZoomLevel","zoomToPoint","level","$math","cx","cy","xx","yy","_animateTo","_za","duration","easing","_txa","animate","key","to","_tya","_event","_downPoints","_downScale","downPoints","count","$object","length","downPoint","_downX","_downY","downId","_getDownPointId","movePoint","_movePoints","pointerId","_handlePinch","i","movePoints","k","_isDragging","downPoint0","downPoint1","movePoint0","movePoint1","initialDistance","hypot","moveCenter","downCenter","tx","ty","Gradient","Entity","_afterNewApplyThemes","getFill","_target","addColorStop","_offset","_color","getBounds","gradientTarget","bounds","globalBounds","p0","left","top","p1","right","p2","bottom","p3","getLocalBounds","LinearGradient","rotation","l","t","b","cos","sin","longer","gradient","createLinearGradient","stops","$array","stop","offset","opacity","lighten","Color","brighten","g","Star","_beforeChanged","_clear","display","ir","spikes","PI","angle","moveTo","lineTo","closePath","HeatLegend","labelContainer","Label","ListTemplate","Template","RoundedRectangle","_new","markers","template","_settings","orientation","Tooltip","makeMarker","marker","make","states","create","showValue","value","text","tooltip","getTooltip","startValue","c","Infinity","isNaN","startColor","endColor","p","getNumberFormatter","format","interpolate","label","markerContainer","toGlobal","innerHeight","innerWidth","show","startLabel","endLabel","horizontalLayout","centerY","centerX","stepCount","moveValue","reverse","Slider","Scrollbar","_addOrientationClass","endGrip","setPrivate","thumb","updateGrips","startGrip","setRaw","GrainPattern","Pattern","document","createElement","canvas","getContext","_clearGrain","patternData","context","getImageData","size","minOpacity","maxOpacity","colors","fromHex","cols","rows","density","horizontalGap","verticalGap","round","floor","random","alpha","rnd","_setRectData","data","putImageData","_pattern","createPattern","_checkDirtyFill","col","row","rc","gc","bc","ac","RadialGradient","radius","ux","uy","createRadialGradient","CirclePattern","_draw","checkered","centered","gap","cellW","cellH","colorOpacity","beginFill","drawCircle","endFill","LinePattern","strokeWidth","lineStyle","strokeDasharray","setLineDash","strokeDashoffset","setLineDashOffset","endStroke","RectanglePattern","rectW","rectH","drawRect","PathPattern","svgPath","PatternSet","interfaceColors","getLinePattern","getRectanglePattern","maxWidth","maxHeight","getCirclePattern","_dirty","reset","getIndex","index","patterns","next","currentStep","settings"],"sourceRoot":""}