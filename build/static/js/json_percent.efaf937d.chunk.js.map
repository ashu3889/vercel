{"version":3,"file":"static/js/json_percent.efaf937d.chunk.js","mappings":"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","sources":["../node_modules/src/.internal/core/render/RadialLabel.ts","../node_modules/src/.internal/core/render/RadialText.ts","../node_modules/src/.internal/core/render/Slice.ts","../node_modules/src/.internal/charts/percent/PercentDefaultTheme.ts","../node_modules/src/.internal/charts/percent/PercentChart.ts","../node_modules/src/.internal/charts/percent/PercentSeries.ts","../node_modules/src/.internal/charts/pie/PieChart.ts","../node_modules/src/.internal/charts/pie/PieSeries.ts","../node_modules/src/.internal/charts/funnel/FunnelSlice.ts","../node_modules/src/.internal/charts/funnel/FunnelSeries.ts","../node_modules/src/.internal/charts/funnel/PyramidSeries.ts","../node_modules/src/.internal/charts/funnel/PictorialStackedSeries.ts","../node_modules/src/.internal/charts/funnel/SlicedChart.ts","../node_modules/d3-shape/src/math.js","../node_modules/d3-shape/src/arc.js"],"sourcesContent":["// import * as $object from \"../util/Object\";\nimport { p50, Percent } from \"../util/Percent\";\nimport { Label, ILabelPrivate, ILabelSettings } from \"./Label\";\nimport { RadialText } from \"./RadialText\";\n\nimport * as $math from \"../util/Math\";\nimport * as $utils from \"../util/Utils\";\n\n\nexport interface IRadialLabelSettings extends ILabelSettings {\n\n\t/**\n\t * Pixel value to adjust radius with.\n\t *\n\t * Will add to (or subtract from if negative) whatever value `baseRadius` evaluates\n\t * to.\n\t */\n\tradius?: number;\n\n\t/**\n\t * Radius of the label's position.\n\t *\n\t * Can be either set in absolute pixel value, or percent.\n\t *\n\t * Relative value, depending on the situation, will most often mean its\n\t * position within certain circular object, like a slice: 0% meaning inner\n\t * edge, and 100% - the outer edge.\n\t *\n\t * @default 100%\n\t */\n\tbaseRadius?: number | Percent;\n\n\t/**\n\t * Label anngle in degrees.\n\t *\n\t * In most cases it will be set by the chart/series and does not need to\n\t * be set manually.\n\t */\n\tlabelAngle?: number;\n\n\t/**\n\t * Should the text \"face\" inward or outward from the arc the text is\n\t * following.\n\t *\n\t * `\"auto\"` means that facing will be chosen automatically based on the angle\n\t * to enhance readbility.\n\t *\n\t * Only applies if `type = \"circluar\"`.\n\t * \n\t * @default \"auto\"\n\t */\n\torientation?: \"inward\" | \"outward\" | \"auto\";\n\n\t/**\n\t * Should label be drawn inside (`true`) or outside (`false`) the arc.\n\t *\n\t * @default false\n\t */\n\tinside?: boolean;\n\n\t/**\n\t * Label type.\n\t *\n\t * * `\"regular\"` (default) - normal horizontal label.\n\t * * `\"circular\"` - arched label.\n\t * * `\"radial\"` - label radiating from the center of the arc.\n\t * * `\"aligned\"` - horizontal label aligned with other labels horizontally.\n\t * * `\"adjusted\"` - horizontal label adjusted in postion.\n\t *\n\t * **IMPORTANT!** If the label is used in a [[PieSeries]], its `alignLabels` setting\n\t * (default: `true`) takes precedence over `textType`. If you need to set this\n\t * to anything else than `regular`, make sure you also set `alignLabels: falese` on\n\t * `PieSeries`.\n\t *\n\t * @default \"regular\"\n\t */\n\ttextType?: \"regular\" | \"circular\" | \"radial\" | \"aligned\" | \"adjusted\";\n\n\t/**\n\t * Extra spacing between characters, in pixels.\n\t *\n\t * @default 0\n\t */\n\tkerning?: number;\n\n}\n\nexport interface IRadialLabelPrivate extends ILabelPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tleft?: boolean;\n\n\t/**\n\t * @ignore\n\t */\n\tradius?: number;\n\n\t/**\n\t * @ignore\n\t */\n\tinnerRadius?: number;\n\n}\n\nexport class RadialLabel extends Label {\n\n\tdeclare public _settings: IRadialLabelSettings;\n\tdeclare public _privateSettings: IRadialLabelPrivate;\n\n\tdeclare protected _text: RadialText;\n\n\tpublic static className: string = \"RadialLabel\";\n\tpublic static classNames: Array<string> = Label.classNames.concat([RadialLabel.className]);\n\n\tprotected _flipped: boolean = false;\n\n\tprotected _afterNew() {\n\t\tthis._textKeys.push(\"textType\", \"kerning\");\n\t\tsuper._afterNew();\n\t}\n\n\n\tpublic _makeText() {\n\t\tthis._text = this.children.push(RadialText.new(this._root, {}));\n\t}\n\n\t/**\n\t * Returns base radius in pixels.\n\t * \n\t * @return Base radius\n\t */\n\tpublic baseRadius(): number {\n\t\tconst radiusPrivate = this.getPrivate(\"radius\", 0);\n\t\tconst innerRadiusPrivate = this.getPrivate(\"innerRadius\", 0);\n\t\tconst baseRadius = this.get(\"baseRadius\", 0);\n\t\treturn innerRadiusPrivate + $utils.relativeToValue(baseRadius, radiusPrivate - innerRadiusPrivate);\n\t}\n\n\t/**\n\t * Returns radius adjustment in pixels.\n\t * \n\t * @return Radius\n\t */\n\tpublic radius(): number {\n\t\tconst inside = this.get(\"inside\", false);\n\t\treturn this.baseRadius() + this.get(\"radius\", 0) * (inside ? -1 : 1);\n\t}\n\n\tpublic _updateChildren() {\n\t\tsuper._updateChildren();\n\n\t\tif (this.isDirty(\"baseRadius\") || this.isPrivateDirty(\"radius\") || this.isPrivateDirty(\"innerRadius\") || this.isDirty(\"labelAngle\") || this.isDirty(\"radius\") || this.isDirty(\"inside\") || this.isDirty(\"orientation\") || this.isDirty(\"textType\")) {\n\n\t\t\tconst textType = this.get(\"textType\", \"adjusted\");\n\n\t\t\tconst inside = this.get(\"inside\", false);\n\n\t\t\tconst orientation = this.get(\"orientation\");\n\t\t\tlet labelAngle = $math.normalizeAngle(this.get(\"labelAngle\", 0));\n\n\t\t\tthis._text.set(\"startAngle\", this.get(\"labelAngle\", 0));\n\t\t\tthis._text.set(\"inside\", inside);\n\n\t\t\tconst sin = $math.sin(labelAngle);\n\t\t\tconst cos = $math.cos(labelAngle);\n\n\t\t\tlet baseRadius = this.baseRadius();\n\t\t\tlet radius = this.radius();\n\n\t\t\tthis._display.angle = 0;\n\n\t\t\tif (textType == \"circular\") {\n\n\t\t\t\tthis.setAll({\n\t\t\t\t\tpaddingTop: 0,\n\t\t\t\t\tpaddingBottom: 0,\n\t\t\t\t\tpaddingLeft: 0,\n\t\t\t\t\tpaddingRight: 0\n\t\t\t\t});\n\n\t\t\t\tthis.setRaw(\"x\", undefined);\n\t\t\t\tthis.setRaw(\"y\", undefined);\t\t\t\t\n\n\t\t\t\t// Circular labels are handled and positioned differently\n\n\t\t\t\tthis._text.set(\"orientation\", orientation);\n\t\t\t\tthis._text.set(\"radius\", radius);\n\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (baseRadius == 0) {\n\t\t\t\t\tlabelAngle = 0;\n\t\t\t\t\tradius = 0;\n\t\t\t\t}\n\n\t\t\t\t// Positioning of radial/regular labels are teh same\n\t\t\t\tlet x = radius * cos;\n\t\t\t\tlet y = radius * sin;\n\n\t\t\t\tif (textType == \"radial\") {\n\n\t\t\t\t\tthis.setRaw(\"x\", x);\n\t\t\t\t\tthis.setRaw(\"y\", y);\n\n\t\t\t\t\tif ((labelAngle < 90) || (labelAngle > 270) || orientation != \"auto\") {\n\t\t\t\t\t\tthis._display.angle = labelAngle;// + 90;\n\t\t\t\t\t\tthis._flipped = false;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis._display.angle = labelAngle + 180;\n\t\t\t\t\t\tthis._flipped = true;\n\t\t\t\t\t}\n\t\t\t\t\tthis._dirty.rotation = false;\n\t\t\t\t}\n\t\t\t\telse if (textType == \"adjusted\") {\n\t\t\t\t\tthis.setRaw(\"centerX\", p50);\n\t\t\t\t\tthis.setRaw(\"centerY\", p50);\n\t\t\t\t\tthis.setRaw(\"x\", x);\n\t\t\t\t\tthis.setRaw(\"y\", y);\n\t\t\t\t}\n\t\t\t\telse if (textType == \"regular\") {\n\t\t\t\t\tthis.setRaw(\"x\", x);\n\t\t\t\t\tthis.setRaw(\"y\", y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.markDirtyPosition();\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\t}\n\n\n\tpublic _updatePosition() {\n\n\t\tconst textType = this.get(\"textType\", \"regular\");\n\t\tconst inside = this.get(\"inside\", false);\n\n\t\tlet dx = 0;\n\t\tlet dy = 0;\n\t\tlet labelAngle = this.get(\"labelAngle\", 0);\n\t\tlet bounds = this.localBounds();\n\t\tlet w = bounds.right - bounds.left;\n\t\tlet h = bounds.bottom - bounds.top;\n\n\t\tif (textType == \"radial\") {\n\t\t\tif (this._flipped) {\n\t\t\t\tlet centerX = this.get(\"centerX\");\n\t\t\t\tif (centerX instanceof Percent) {\n\t\t\t\t\tw = w * (1 - centerX.value * 2);\n\t\t\t\t}\n\n\t\t\t\tdx = w * $math.cos(labelAngle);\n\t\t\t\tdy = w * $math.sin(labelAngle);\n\t\t\t}\n\t\t}\n\t\telse if (!inside && textType == \"adjusted\") {\n\t\t\tdx = w / 2 * $math.cos(labelAngle);\n\t\t\tdy = h / 2 * $math.sin(labelAngle);\n\t\t}\n\n\n\t\tthis.setRaw(\"dx\", dx);\n\t\tthis.setRaw(\"dy\", dy);\n\n\t\tsuper._updatePosition();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic get text(): RadialText {\n\t\treturn this._text;\n\t}\n\n}\n","import { Text, ITextSettings, ITextPrivate } from \"./Text\";\nimport * as $math from \"../util/Math\";\nimport type { IRadialText } from \"./backend/Renderer\";\n\n/**\n * @ignore\n */\nexport interface IRadialTextSettings extends ITextSettings {\n\ttextType?: \"regular\" | \"circular\" | \"radial\" | \"aligned\" | \"adjusted\";\n\tradius?: number;\n\tstartAngle?: number;\n\tinside?: boolean;\n\torientation?: \"inward\" | \"outward\" | \"auto\";\n\tkerning?: number;\n}\n\n/**\n * @ignore\n */\nexport interface IRadialTextPrivate extends ITextPrivate {\n}\n\n/**\n * @ignore\n */\nexport class RadialText extends Text {\n\n\tdeclare public _settings: IRadialTextSettings;\n\tdeclare public _privateSettings: IRadialTextPrivate;\n\n\tpublic _display: IRadialText = this._root._renderer.makeRadialText(\"\", this.textStyle);\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t}\n\n\tpublic static className: string = \"RadialText\";\n\tpublic static classNames: Array<string> = Text.classNames.concat([RadialText.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tthis._display.clear();\n\n\t\tif (this.isDirty(\"textType\")) {\n\t\t\tthis._display.textType = this.get(\"textType\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"radius\")) {\n\t\t\tthis._display.radius = this.get(\"radius\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"startAngle\")) {\n\t\t\tthis._display.startAngle = (this.get(\"startAngle\", 0)! + 90) * $math.RADIANS;\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"inside\")) {\n\t\t\tthis._display.inside = this.get(\"inside\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"orientation\")) {\n\t\t\tthis._display.orientation = this.get(\"orientation\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"kerning\")) {\n\t\t\tthis._display.kerning = this.get(\"kerning\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\t}\n\n}\n","import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\nimport type { IPoint } from \"../util/IPoint\";\nimport { arc } from \"d3-shape\";\nimport * as $math from \"../util/Math\";\n\nexport interface ISliceSettings extends IGraphicsSettings {\n\n\t/**\n\t * Radius in pixels.\n\t */\n\tradius?: number;\n\n\t/**\n\t * Slice \"width\" in degrees.\n\t */\n\tarc?: number;\n\n\t/**\n\t * Inner radius of the slice in pixels.\n\t */\n\tinnerRadius?: number;\n\n\t/**\n\t * Start angle in degrees.\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * Slice corner radius in pixels.\n\t */\n\tcornerRadius?: number;\n\n\t/**\n\t * Slice \"pull out\" radius in pixels.\n\t */\n\tshiftRadius?: number;\n\n\t/**\n\t * Number of pixels to add to whatever slice's `radius` value is. Negative\n\t * numbers can also be used.\n\t */\n\tdRadius?: number;\n\n\t/**\n\t * Number of pixels to add to whatever slice's `innerRadius` value is.\n\t * Negative numbers can also be used.\n\t */\n\tdInnerRadius?: number;\n\n}\n\nexport interface ISlicePrivate extends IGraphicsPrivate {\n}\n\n/**\n * Draws a slice shape.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\n */\nexport class Slice extends Graphics {\n\n\tdeclare public _settings: ISliceSettings;\n\tdeclare public _privateSettings: ISlicePrivate;\n\n\tpublic static className: string = \"Slice\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([Slice.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic ix: number = 0;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic iy: number = 0;\n\n\tprotected _generator = arc();\n\n\tpublic _getTooltipPoint(): IPoint {\n\t\tlet tooltipX = this.get(\"tooltipX\");\n\t\tlet tooltipY = this.get(\"tooltipY\");\n\n\t\tlet x = 0;\n\t\tlet y = 0;\n\n\t\tif ($type.isNumber(tooltipX)) {\n\t\t\tx = tooltipX;\n\t\t}\n\n\t\tif ($type.isNumber(tooltipY)) {\n\t\t\ty = tooltipY;\n\t\t}\n\n\t\tlet radius = this.get(\"radius\", 0);\n\t\tlet innerRadius = this.get(\"innerRadius\", 0);\n\n\t\tlet dRadius = this.get(\"dRadius\", 0);\n\t\tlet dInnerRadius = this.get(\"dInnerRadius\", 0);\n\n\t\tradius += dRadius;\n\t\tinnerRadius += dInnerRadius;\n\n\t\tif (innerRadius < 0) {\n\t\t\tinnerRadius = radius + innerRadius;\n\t\t}\n\n\t\tif (tooltipX instanceof Percent) {\n\t\t\tx = this.ix * (innerRadius + (radius - innerRadius) * tooltipX.value)\n\t\t}\n\n\t\tif (tooltipY instanceof Percent) {\n\t\t\ty = this.iy * (innerRadius + (radius - innerRadius) * tooltipY.value)\n\t\t}\n\n\t\tif (this.get(\"arc\") >= 360 && innerRadius == 0) {\n\t\t\tx = 0;\n\t\t\ty = 0;\n\t\t}\n\n\n\t\treturn { x, y };\n\t}\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"radius\") || this.isDirty(\"arc\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"dRadius\") || this.isDirty(\"dInnerRadius\") || this.isDirty(\"cornerRadius\") || this.isDirty(\"shiftRadius\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this._clear) {\n\t\t\tlet startAngle = this.get(\"startAngle\", 0);\n\t\t\tlet arc = this.get(\"arc\", 0);\n\t\t\tconst generator = this._generator;\n\n\t\t\tif(arc < 0){\n\t\t\t\tstartAngle = startAngle + arc;\n\t\t\t\tarc = arc * -1;\n\t\t\t}\n\n\t\t\tif(arc > 0.1){ // this fixes bug with full circle when arc is very small\n\t\t\t\tgenerator.cornerRadius(this.get(\"cornerRadius\", 0));\n\t\t\t}\n\t\t\tgenerator.context(this._display as any);\n\n\t\t\tlet radius = this.get(\"radius\", 0);\n\t\t\tlet innerRadius = this.get(\"innerRadius\", 0);\n\n\t\t\tlet dRadius = this.get(\"dRadius\", 0);\n\t\t\tlet dInnerRadius = this.get(\"dInnerRadius\", 0);\n\n\t\t\tradius += dRadius;\n\t\t\tinnerRadius += dInnerRadius;\t\t\t\n\n\t\t\tif (innerRadius < 0) {\n\t\t\t\tinnerRadius = radius + innerRadius;\n\t\t\t}\n\n\t\t\tgenerator({ innerRadius: innerRadius, outerRadius: radius, startAngle: (startAngle + 90) * $math.RADIANS, endAngle: (startAngle + arc + 90) * $math.RADIANS });\n\n\t\t\tlet middleAngle = startAngle + arc / 2;\n\n\t\t\tthis.ix = $math.cos(middleAngle);\n\t\t\tthis.iy = $math.sin(middleAngle);\n\n\t\t\tconst shiftRadius = this.get(\"shiftRadius\", 0);\n\t\t\tthis.setRaw(\"dx\", this.ix * shiftRadius);\n\t\t\tthis.setRaw(\"dy\", this.iy * shiftRadius);\t\t\t\n\t\t\tthis.markDirtyPosition();\n\t\t}\n\t}\n}\n","import { Theme } from \"../../core/Theme\";\r\nimport { percent, p50, p100 } from \"../../core/util/Percent\";\r\nimport { ColorSet } from \"../../core/util/ColorSet\";\r\nimport { setColor } from \"../../themes/DefaultTheme\";\r\n\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class PercentDefaultTheme extends Theme {\r\n\tprotected setupDefaultRules() {\r\n\t\tsuper.setupDefaultRules();\r\n\r\n\t\tconst ic = this._root.interfaceColors;\r\n\t\tconst r = this.rule.bind(this);\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/percent\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"PercentSeries\").setAll({\r\n\t\t\tlegendLabelText: \"{category}\",\r\n\t\t\tlegendValueText: \"{valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcolors: ColorSet.new(this._root, {}),\r\n\t\t\twidth: p100,\r\n\t\t\theight: p100\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/pie\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"PieChart\").setAll({\r\n\t\t\tradius: percent(80),\r\n\t\t\tstartAngle: -90,\r\n\t\t\tendAngle: 270\r\n\t\t})\r\n\r\n\t\tr(\"PieSeries\").setAll({\r\n\t\t\talignLabels: true,\r\n\t\t\tstartAngle: -90,\r\n\t\t\tendAngle: 270\r\n\t\t});\r\n\r\n\t\tr(\"PieSeries\").states.create(\"hidden\", { endAngle: -90, opacity: 0 });\r\n\r\n\t\tr(\"Slice\", [\"pie\"]).setAll({\r\n\t\t\tposition: \"absolute\",\r\n\t\t\tisMeasured: false,\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\ttoggleKey: \"active\",\r\n\t\t\ttooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tstrokeWidth: 1,\r\n\t\t\tstrokeOpacity: 1,\r\n\t\t\trole: \"figure\",\r\n\t\t\tlineJoin:\"round\"\r\n\t\t});\r\n\r\n\t\tr(\"Slice\", [\"pie\"]).states.create(\"active\", { shiftRadius: 20, scale: 1 });\r\n\t\tr(\"Slice\", [\"pie\"]).states.create(\"hoverActive\", { scale: 1.04 });\r\n\t\tr(\"Slice\", [\"pie\"]).states.create(\"hover\", { scale: 1.04 });\r\n\r\n\t\tr(\"RadialLabel\", [\"pie\"]).setAll({\r\n\t\t\ttextType: \"aligned\",\r\n\t\t\tradius: 10,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tpaddingTop: 5,\r\n\t\t\tpaddingBottom: 5,\r\n\t\t\tpopulateText: true\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"pie\"]).setAll({\r\n\t\t\tlocation: 1\r\n\t\t});\r\n\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/funnel\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"SlicedChart\").setAll({\r\n\t\t\tpaddingLeft: 10,\r\n\t\t\tpaddingRight: 10,\r\n\t\t\tpaddingTop: 10,\r\n\t\t\tpaddingBottom: 10\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t * charts/funnel: Funnel\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\tr(\"FunnelSeries\").setAll({\r\n\t\t\tstartLocation: 0,\r\n\t\t\tendLocation: 1,\r\n\t\t\torientation: \"vertical\",\r\n\t\t\talignLabels: true,\r\n\t\t\tsequencedInterpolation: true\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\").setAll({\r\n\t\t\tinteractive: true,\r\n\t\t\texpandDistance: 0,\r\n\t\t\t//tooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\"\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\").states.create(\"hover\", { expandDistance: 0.15 })\r\n\r\n\t\tr(\"Label\", [\"funnel\"]).setAll({\r\n\t\t\tpopulateText: true,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcenterY: p50\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"funnel\", \"horizontal\"]).setAll({\r\n\t\t\tcenterX: 0,\r\n\t\t\tcenterY: p50,\r\n\t\t\trotation: -90\r\n\t\t});\r\n\r\n\t\t// Class: Label\r\n\t\tr(\"Label\", [\"funnel\", \"vertical\"]).setAll({\r\n\t\t\tcenterY: p50,\r\n\t\t\tcenterX: 0\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"funnel\"]).setAll({\r\n\t\t\tlocation: 1\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"funnel\", \"link\"]).setAll({\r\n\t\t\tfillOpacity: 0.5,\r\n\t\t\tstrokeOpacity: 0,\r\n\t\t\texpandDistance: -0.1\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"funnel\", \"link\", \"vertical\"]).setAll({\r\n\t\t\theight: 10,\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"funnel\", \"link\", \"horizontal\"]).setAll({\r\n\t\t\twidth: 10\r\n\t\t});\r\n\r\n\r\n\t\t/**\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t * charts/funnel: Pyramid\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\tr(\"PyramidSeries\").setAll({\r\n\t\t\tvalueIs: \"area\"\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\", \"link\"]).setAll({\r\n\t\t\tfillOpacity: 0.5\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\", \"link\", \"vertical\"]).setAll({\r\n\t\t\theight: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\", \"link\", \"horizontal\"]).setAll({\r\n\t\t\twidth: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\"]).setAll({\r\n\t\t\tinteractive: true,\r\n\t\t\texpandDistance: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\"]).states.create(\"hover\", { expandDistance: 0.15 });\r\n\r\n\t\tr(\"Label\", [\"pyramid\"]).setAll({\r\n\t\t\tpopulateText: true,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcenterY: p50\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pyramid\", \"horizontal\"]).setAll({\r\n\t\t\tcenterX: 0,\r\n\t\t\tcenterY: p50,\r\n\t\t\trotation: -90\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pyramid\", \"vertical\"]).setAll({\r\n\t\t\tcenterY: p50,\r\n\t\t\tcenterX: 0\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"pyramid\"]).setAll({\r\n\t\t\tlocation: 1\r\n\t\t});\r\n\r\n\r\n\t\t/**\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t * charts/funnel: Pictorial\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\t// Class: FunnelSlice\r\n\t\tr(\"FunnelSlice\", [\"pictorial\"]).setAll({\r\n\t\t\tinteractive: true,\r\n\t\t\ttooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\"\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pictorial\"]).setAll({\r\n\t\t\tpopulateText: true,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcenterY: p50\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pictorial\", \"horizontal\"]).setAll({\r\n\t\t\tcenterX: 0,\r\n\t\t\tcenterY: p50,\r\n\t\t\trotation: -90\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pictorial\", \"vertical\"]).setAll({\r\n\t\t\tcenterY: p50,\r\n\t\t\tcenterX: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pictorial\", \"link\"]).setAll({\r\n\t\t\tfillOpacity: 0.5,\r\n\t\t\twidth: 0,\r\n\t\t\theight: 0\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"pictorial\"]).setAll({\r\n\t\t\tlocation: 0.5\r\n\t\t});\r\n\r\n\t\t{\r\n\t\t\tconst rule = r(\"Graphics\", [\"pictorial\", \"background\"]);\r\n\r\n\t\t\trule.setAll({\r\n\t\t\t\tfillOpacity: 0.2\r\n\t\t\t});\r\n\r\n\t\t\tsetColor(rule, \"fill\", ic, \"alternativeBackground\");\r\n\t\t}\r\n\r\n\t}\r\n}\r\n","import type { PercentSeries } from \"./PercentSeries\";\nimport { SerialChart, ISerialChartPrivate, ISerialChartSettings } from \"../../core/render/SerialChart\";\nimport { PercentDefaultTheme } from \"./PercentDefaultTheme\";\n\nexport interface IPercentChartSettings extends ISerialChartSettings {\n}\n\nexport interface IPercentChartPrivate extends ISerialChartPrivate {\n}\n\n/**\n * Base class for [[PieChart]].\n *\n * Also used for percent-based series, like [[FunnelSeries]], [[PyramidSeries]], etc.\n *\n * @important\n */\nexport abstract class PercentChart extends SerialChart {\n\tpublic static className: string = \"PercentChart\";\n\tpublic static classNames: Array<string> = SerialChart.classNames.concat([PercentChart.className]);\n\n\tdeclare public _settings: IPercentChartSettings;\n\tdeclare public _privateSettings: IPercentChartPrivate;\n\tdeclare public _seriesType: PercentSeries;\n\n\tprotected _afterNew() {\n\t\tthis._defaultThemes.push(PercentDefaultTheme.new(this._root));\n\n\t\tsuper._afterNew();\n\n\t\tthis.chartContainer.children.push(this.seriesContainer);\n\t\tthis.seriesContainer.children.push(this.bulletsContainer);\n\t}\n\n\tprotected _processSeries(series: this[\"_seriesType\"]) {\n\t\tsuper._processSeries(series);\n\t\tthis.seriesContainer.children.moveValue(this.bulletsContainer, this.seriesContainer.children.length - 1);\t\n\t}\t\n}\n","import type { DataItem } from \"../../core/render/Component\";\nimport type { Graphics } from \"../../core/render/Graphics\";\nimport type { Label } from \"../../core/render/Label\";\nimport type { Tick } from \"../../core/render/Tick\";\nimport type { ListTemplate } from \"../../core/util/List\";\nimport type { ColorSet } from \"../../core/util/ColorSet\";\nimport type { ILegendDataItem } from \"../../core/render/Legend\";\nimport type { Color } from \"../../core/util/Color\";\nimport type { PercentChart } from \"./PercentChart\";\nimport type { PatternSet } from \"../../core/util/PatternSet\";\nimport type { Pattern } from \"../../core/render/patterns/Pattern\";\n\nimport { Series, ISeriesSettings, ISeriesDataItem, ISeriesPrivate } from \"../../core/render/Series\";\nimport { Container } from \"../../core/render/Container\";\nimport { visualSettings } from \"../../core/render/Graphics\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\n\nexport interface IPercentSeriesDataItem extends ISeriesDataItem {\n\n\t/**\n\t * Percent of the series value total.\n\t */\n\tvaluePercentTotal: number;\n\n\t/**\n\t * Category.\n\t */\n\tcategory: string;\n\n\t/**\n\t * Slice visual element.\n\t */\n\tslice: Graphics;\n\n\t/**\n\t * Slice label.\n\t */\n\tlabel: Label;\n\n\t/**\n\t * Slice tick.\n\t */\n\ttick: Tick;\n\n\t/**\n\t * A related legend data item.\n\t */\n\tlegendDataItem: DataItem<ILegendDataItem>;\n\n\t/**\n\t * Fill color used for the slice and related elements, e.g. legend marker.\n\t */\n\tfill: Color;\n\n\t/**\n\t * Pattern used for the slice and related elements, e.g. legend marker.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n\t * @since 5.10.0\n\t */\n\tfillPattern: Pattern;\n\n}\n\n//type IPercentSeriesDataItemSettings = { [K in keyof IPercentSeriesDataItem]?: string; };\n\nexport interface IPercentSeriesSettings extends ISeriesSettings {\n\n\t/**\n\t * A [[ColorSet]] to use when asigning colors for slices.\n\t */\n\tcolors?: ColorSet;\n\n\t/**\n\t * A [[PatternSet]] to use when asigning patterns for slices.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Pattern_sets} for more info\n\t * @since 5.10.0\n\t */\n\tpatterns?: PatternSet;\n\n\t/**\n\t * A field in data that holds category names.\n\t */\n\tcategoryField?: string;\n\n\t/**\n\t * Should slice labels be aligned in columns/rows?\n\t */\n\talignLabels?: boolean;\n\n\t/**\n\t * A field that holds color for slice fill.\n\t */\n\tfillField?: string;\n\n}\n\nexport interface IPercentSeriesPrivate extends ISeriesPrivate {\n\n\t/**\n\t * Calculate average value in series.\n\t */\n\tvalueAverage?: number;\n\n\t/**\n\t * Count of items in series.\n\t */\n\tvalueCount?: number;\n\n\t/**\n\t * Sum of values in series.\n\t */\n\tvalueSum?: number;\n\n\t/**\n\t * Sum of all absolute values in series.\n\t */\n\tvalueAbsoluteSum?: number;\n\n\t/**\n\t * Lowest value in series.\n\t */\n\tvalueLow?: number;\n\n\t/**\n\t * Highest value in series.\n\t */\n\tvalueHigh?: number;\n\n}\n\n/**\n * A base class for any percent chart series.\n */\nexport abstract class PercentSeries extends Series {\n\tpublic static className: string = \"PercentSeries\";\n\tpublic static classNames: Array<string> = Series.classNames.concat([PercentSeries.className]);\n\n\tdeclare public _settings: IPercentSeriesSettings;\n\tdeclare public _privateSettings: IPercentSeriesPrivate;\n\tdeclare public _dataItemSettings: IPercentSeriesDataItem;\n\n\tdeclare public _sliceType: Graphics;\n\tdeclare public _labelType: Label;\n\tdeclare public _tickType: Tick;\n\n\tpublic readonly slicesContainer = this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }));\n\tpublic readonly labelsContainer = this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }));\n\tpublic readonly ticksContainer = this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }));\n\n\tprotected _lLabels: Array<{ label: Label, y: number }> = [];\n\tprotected _rLabels: Array<{ label: Label, y: number }> = [];\n\tprotected _hLabels: Array<{ label: Label, y: number }> = [];\n\n\t/**\n\t * A [[ListTemplate]] of all slices in series.\n\t *\n\t * `slices.template` can also be used to configure slices.\n\t */\n\tpublic readonly slices: ListTemplate<this[\"_sliceType\"]> = this._makeSlices();\n\n\tprotected abstract _makeSlices(): ListTemplate<this[\"_sliceType\"]>;\n\n\tpublic abstract chart: PercentChart | undefined;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeSlice(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_sliceType\"] {\n\t\tconst slice = this.slicesContainer.children.push(this.slices.make());\n\n\t\tslice.on(\"fill\", () => {\n\t\t\tthis.updateLegendMarker(dataItem);\n\t\t})\n\n\t\tslice.on(\"fillPattern\", () => {\n\t\t\tthis.updateLegendMarker(dataItem);\n\t\t})\t\t\n\n\t\tslice.on(\"stroke\", () => {\n\t\t\tthis.updateLegendMarker(dataItem);\n\t\t})\n\n\t\tslice._setDataItem(dataItem);\n\t\tdataItem.set(\"slice\", slice);\n\t\tthis.slices.push(slice);\n\n\t\treturn slice;\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all slice labels in series.\n\t *\n\t * `labels.template` can also be used to configure slice labels.\n\t */\n\tpublic readonly labels: ListTemplate<this[\"_labelType\"]> = this._makeLabels();\n\n\tprotected abstract _makeLabels(): ListTemplate<this[\"_labelType\"]>;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeLabel(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_labelType\"] {\n\t\tconst label = this.labelsContainer.children.push(this.labels.make());\n\t\tlabel._setDataItem(dataItem);\n\t\tdataItem.set(\"label\", label);\n\t\tthis.labels.push(label);\n\t\treturn label;\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all slice ticks in series.\n\t *\n\t * `ticks.template` can also be used to configure slice ticks.\n\t */\n\tpublic readonly ticks: ListTemplate<this[\"_tickType\"]> = this._makeTicks();\n\n\tprotected abstract _makeTicks(): ListTemplate<this[\"_tickType\"]>;\n\n\n\tprotected _shouldMakeBullet(dataItem: DataItem<this[\"_dataItemSettings\"]>): boolean {\n\t\tif (dataItem.get(\"value\") != null) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeTick(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_tickType\"] {\n\t\tconst tick = this.ticksContainer.children.push(this.ticks.make());\n\t\ttick._setDataItem(dataItem);\n\t\tdataItem.set(\"tick\", tick);\n\t\tthis.ticks.push(tick);\n\t\treturn tick;\n\t}\n\n\tprotected _afterNew() {\n\t\tthis.fields.push(\"category\", \"fill\");\n\t\tsuper._afterNew();\n\t}\n\n\tprotected _onDataClear() {\n\t\tconst colors = this.get(\"colors\");\n\t\tif (colors) {\n\t\t\tcolors.reset();\n\t\t}\n\t\tconst patterns = this.get(\"patterns\");\n\t\tif (patterns) {\n\t\t\tpatterns.reset();\n\t\t}\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tthis._lLabels = [];\n\t\tthis._rLabels = [];\n\t\tthis._hLabels = [];\n\n\t\tif (this._valuesDirty) {\n\t\t\tlet sum = 0;\n\t\t\tlet absSum = 0;\n\t\t\tlet valueHigh = 0;\n\t\t\tlet valueLow = Infinity;\n\t\t\tlet count = 0;\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tlet valueWorking = dataItem.get(\"valueWorking\", 0);\n\t\t\t\tsum += valueWorking;\n\t\t\t\tabsSum += Math.abs(valueWorking);\n\t\t\t});\n\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tlet value = dataItem.get(\"valueWorking\", 0);\n\n\t\t\t\tif (value > valueHigh) {\n\t\t\t\t\tvalueHigh = value;\n\t\t\t\t}\n\n\t\t\t\tif (value < valueLow) {\n\t\t\t\t\tvalueLow = value;\n\t\t\t\t}\n\n\t\t\t\tcount++;\n\n\t\t\t\tlet percentTotal = value / absSum;\n\n\t\t\t\tif (absSum == 0) {\n\t\t\t\t\tpercentTotal = 0;\n\t\t\t\t}\n\n\t\t\t\tdataItem.setRaw(\"valuePercentTotal\", percentTotal * 100);\n\t\t\t});\n\n\t\t\tthis.setPrivateRaw(\"valueLow\", valueLow);\n\t\t\tthis.setPrivateRaw(\"valueHigh\", valueHigh);\n\t\t\tthis.setPrivateRaw(\"valueSum\", sum);\n\t\t\tthis.setPrivateRaw(\"valueAverage\", sum / count);\n\t\t\tthis.setPrivateRaw(\"valueAbsoluteSum\", absSum);\n\t\t}\n\t}\n\n\t/**\n\t * Shows hidden series.\n\t *\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Animation promise\n\t */\n\tpublic async show(duration?: number): Promise<void> {\n\t\tlet promises: Array<Promise<any>> = [];\n\t\tpromises.push(super.show(duration))\n\n\t\tpromises.push(this._sequencedShowHide(true, duration));\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * Hide whole series.\n\t *\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Animation promise\n\t */\n\tpublic async hide(duration?: number): Promise<void> {\n\t\tlet promises: Array<Promise<any>> = [];\n\t\tpromises.push(super.hide(duration))\n\n\t\tpromises.push(this._sequencedShowHide(false, duration));\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _updateChildren() {\n\t\tsuper._updateChildren();\n\t\tif (this._valuesDirty) {\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tdataItem.get(\"label\").text.markDirtyText();\n\t\t\t});\n\t\t}\n\n\t\tif (this.isDirty(\"legendLabelText\") || this.isDirty(\"legendValueText\")) {\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tthis.updateLegendValue(dataItem);\n\t\t\t});\n\t\t}\n\n\t\tthis._arrange();\n\t}\n\n\tprotected _arrange() {\n\t\tthis._arrangeDown(this._lLabels);\n\t\tthis._arrangeUp(this._lLabels);\n\n\t\tthis._arrangeDown(this._rLabels);\n\t\tthis._arrangeUp(this._rLabels);\n\n\t\tthis._arrangeLeft(this._hLabels);\n\t\tthis._arrangeRight(this._hLabels);\n\n\t\t$array.each(this.dataItems, (dataItem) => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\t}\n\n\n\tpublic _afterChanged() {\n\t\tsuper._afterChanged();\n\t\tthis._arrange();\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tif (dataItem.get(\"fill\") == null) {\n\t\t\tlet colors = this.get(\"colors\");\n\t\t\tif (colors) {\n\t\t\t\tdataItem.setRaw(\"fill\", colors.next());\n\t\t\t}\n\t\t}\n\n\t\tif (dataItem.get(\"fillPattern\") == null) {\n\t\t\tlet patterns = this.get(\"patterns\");\n\t\t\tif (patterns) {\n\t\t\t\tdataItem.setRaw(\"fillPattern\", patterns.next());\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Shows series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async showDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tconst promises = [super.showDataItem(dataItem, duration)];\n\t\tif (!$type.isNumber(duration)) {\n\t\t\tduration = this.get(\"stateAnimationDuration\", 0);\n\t\t}\n\n\t\tconst easing = this.get(\"stateAnimationEasing\");\n\n\t\tlet value = dataItem.get(\"value\");\n\n\t\tconst animation = dataItem.animate({ key: \"valueWorking\", to: value, duration: duration, easing: easing });\n\t\tif (animation) {\n\t\t\tpromises.push(animation.waitForStop());\n\t\t}\n\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\tpromises.push(tick.show(duration));\n\t\t}\n\t\tconst label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tpromises.push(label.show(duration));\n\t\t}\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tif (slice) {\n\t\t\tpromises.push(slice.show(duration));\n\t\t}\n\n\t\tif (slice.get(\"active\")) {\n\t\t\tslice.states.applyAnimate(\"active\");\n\t\t}\n\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * Hides series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async hideDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tconst promises = [super.hideDataItem(dataItem, duration)];\n\t\tconst hiddenState = this.states.create(\"hidden\", {})\n\n\t\tif (!$type.isNumber(duration)) {\n\t\t\tduration = hiddenState.get(\"stateAnimationDuration\", this.get(\"stateAnimationDuration\", 0));\n\t\t}\n\n\t\tconst easing = hiddenState.get(\"stateAnimationEasing\", this.get(\"stateAnimationEasing\"));\n\n\t\tconst animation = dataItem.animate({ key: \"valueWorking\", to: 0, duration: duration, easing: easing });\n\t\tif (animation) {\n\t\t\tpromises.push(animation.waitForStop());\n\t\t}\n\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\tpromises.push(tick.hide(duration));\n\t\t}\n\t\tconst label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tpromises.push(label.hide(duration));\n\t\t}\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tslice.hideTooltip();\n\n\t\tif (slice) {\n\t\t\tpromises.push(slice.hide(duration));\n\t\t}\n\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.disposeDataItem(dataItem);\n\t\tlet label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tthis.labels.removeValue(label);\n\t\t\tlabel.dispose();\n\t\t}\n\t\tlet tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\tthis.ticks.removeValue(tick);\n\t\t\ttick.dispose();\n\t\t}\n\t\tlet slice = dataItem.get(\"slice\");\n\t\tif (slice) {\n\t\t\tthis.slices.removeValue(slice);\n\t\t\tslice.dispose();\n\t\t}\n\t}\n\n\t/**\n\t * Triggers hover on a series data item.\n\t *\n\t * @since 5.0.7\n\t * @param  dataItem  Target data item\n\t */\n\tpublic hoverDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tif (slice && !slice.isHidden()) {\n\t\t\tslice.hover();\n\t\t}\n\t}\n\n\t/**\n\t * Triggers un-hover on a series data item.\n\t *\n\t * @since 5.0.7\n\t * @param  dataItem  Target data item\n\t */\n\tpublic unhoverDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tif (slice) {\n\t\t\tslice.unhover();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLegendMarker(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tif (dataItem) {\n\t\t\tconst slice = dataItem.get(\"slice\");\n\n\t\t\tif (slice) {\n\t\t\t\tconst legendDataItem = dataItem.get(\"legendDataItem\");\n\t\t\t\tif (legendDataItem) {\n\t\t\t\t\tconst markerRectangle = legendDataItem.get(\"markerRectangle\");\n\t\t\t\t\t$array.each(visualSettings, (setting: any) => {\n\t\t\t\t\t\tif (slice.get(setting) != null) {\n\t\t\t\t\t\t\tmarkerRectangle.set(setting, slice.get(setting));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _arrangeDown(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\n\t\t\tlet next = this._getNextDown();\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y > b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y < b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelTop = bounds.top;\n\t\t\t\tif (l.y + labelTop < next) {\n\t\t\t\t\tl.y = next - labelTop;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"y\", l.y);\n\n\t\t\t\tnext = l.y + bounds.bottom;\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _getNextUp() {\n\t\treturn this.labelsContainer.maxHeight();\n\t}\n\n\tprotected _getNextDown() {\n\t\treturn 0;\n\t}\n\n\tprotected _arrangeUp(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\t\t\tlet next = this._getNextUp();\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y < b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y > b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelBottom = bounds.bottom;\n\t\t\t\tif (l.y + labelBottom > next) {\n\t\t\t\t\tl.y = next - labelBottom;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"y\", l.y);\n\t\t\t\tnext = l.y + bounds.top;\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _arrangeRight(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\n\t\t\tlet next = 0;\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y > b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y < b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelLeft = bounds.left;\n\t\t\t\tif (l.y + labelLeft < next) {\n\t\t\t\t\tl.y = next - labelLeft;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"x\", l.y);\n\n\t\t\t\tnext = l.y + bounds.right;\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _arrangeLeft(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\t\t\tlet next = this.labelsContainer.maxWidth();\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y < b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y > b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelRight = bounds.right;\n\t\t\t\tif (l.y + labelRight > next) {\n\t\t\t\t\tl.y = next - labelRight;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"x\", l.y);\n\t\t\t\tnext = l.y + bounds.left;\n\t\t\t})\n\t\t}\n\t}\n\n\tpublic _updateSize() {\n\t\tsuper._updateSize();\n\t\tthis.markDirty();\n\t}\n\n\tprotected _updateTick(_dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\n\t}\n\n\tprotected _dispose() {\n\t\tsuper._dispose();\n\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tchart.series.removeValue(this);\n\t\t}\n\t}\n\n\n}\n","import type { PieSeries } from \"./PieSeries\";\n\nimport { Percent } from \"../../core/util/Percent\";\nimport { PercentChart, IPercentChartPrivate, IPercentChartSettings } from \"../percent/PercentChart\";\nimport { p50 } from \"../../core/util/Percent\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $math from \"../../core/util/Math\";\n\n\nexport interface IPieChartSettings extends IPercentChartSettings {\n\n\t/**\n\t * Outer radius of the pie chart.\n\t *\n\t * Can be set in fixed pixel value, or relative to chart container size in\n\t * percent.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Pie_radius} for more info\n\t * @default 80%\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * Inner radius of the pie chart. Setting to any non-zero value will result\n\t * in a donut chart.\n\t *\n\t * Can be set in fixed pixel value, or relative to chart container size in\n\t * percent.\n\t *\n\t * Setting to negative number will mean pixels from outer radius.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Pie_radius} for more info\n\t */\n\tinnerRadius?: number | Percent;\n\n\t/**\n\t * A start angle of the chart in degrees.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Start_end_angles} for more info\n\t * @default -90\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * An end angle of the chart in degrees.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Start_end_angles} for more info\n\t * @default 270\n\t */\n\tendAngle?: number;\n\n}\n\nexport interface IPieChartPrivate extends IPercentChartPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tirModifyer?: number;\n\n}\n\n/**\n * Creates a pie chart.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\n * @important\n */\nexport class PieChart extends PercentChart {\n\n\tpublic static className: string = \"PieChart\";\n\tpublic static classNames: Array<string> = PercentChart.classNames.concat([PieChart.className]);\n\n\tdeclare public _settings: IPieChartSettings;\n\tdeclare public _privateSettings: IPieChartPrivate;\n\tdeclare public _seriesType: PieSeries;\n\n\tpublic _maxRadius: number = 1;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.seriesContainer.setAll({ x: p50, y: p50 });\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tconst chartContainer = this.chartContainer;\n\t\tconst w = chartContainer.innerWidth();\n\t\tconst h = chartContainer.innerHeight();\n\n\t\tconst startAngle = this.get(\"startAngle\", 0);\n\t\tconst endAngle = this.get(\"endAngle\", 0);\n\t\tconst innerRadius = this.get(\"innerRadius\");\n\n\t\tlet bounds = $math.getArcBounds(0, 0, startAngle, endAngle, 1);\n\n\t\tconst wr = w / (bounds.right - bounds.left);\n\t\tconst hr = h / (bounds.bottom - bounds.top);\n\n\t\tlet innerBounds = { left: 0, right: 0, top: 0, bottom: 0 };\n\n\t\tif (innerRadius instanceof Percent) {\n\t\t\tlet value = innerRadius.value;\n\t\t\tlet mr = Math.min(wr, hr);\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(h, w)) / mr;\n\t\t\tinnerBounds = $math.getArcBounds(0, 0, startAngle, endAngle, value);\n\t\t\tthis.setPrivateRaw(\"irModifyer\", value / innerRadius.value);\n\t\t}\n\n\t\tbounds = $math.mergeBounds([bounds, innerBounds]);\n\n\t\tconst prevRadius = this._maxRadius;\n\t\tthis._maxRadius = Math.min(wr, hr);\n\n\t\tconst radius = $utils.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\n\t\tthis.seriesContainer.setAll({\n\t\t\tdy: -radius * (bounds.bottom + bounds.top) / 2, dx: -radius * (bounds.right + bounds.left) / 2\n\t\t})\n\n\t\tif (this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\") || prevRadius != this._maxRadius) {\n\t\t\tthis.series.each((series) => {\n\t\t\t\tseries._markDirtyKey(\"startAngle\");\n\t\t\t})\n\t\t}\n\n\t\tif(this.isDirty(\"innerRadius\") || this.isDirty(\"radius\")){\n\t\t\tthis.series.each((series) => {\n\t\t\t\tseries._markDirtyKey(\"innerRadius\");\n\t\t\t})\t\t\t\n\t\t}\n\t}\n\n\t/**\n\t * Returns outer radius in pixels.\n\t *\n\t * If optional series parameter is passed in, it will return outer radius\n\t * of that particular series.\n\t *\n\t * @param   series  Series\n\t * @return          Radius in pixels\n\t */\n\tpublic radius(series?: PieSeries): number {\n\n\t\tlet radius = $utils.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\n\t\tlet innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\n\n\t\tif (series) {\n\t\t\tlet index = this.series.indexOf(series);\n\t\t\tlet length = this.series.length;\n\n\t\t\tlet seriesRadius = series.get(\"radius\");\n\t\t\tif (seriesRadius != null) {\n\t\t\t\treturn innerRadius + $utils.relativeToValue(seriesRadius, radius - innerRadius);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn innerRadius + (radius - innerRadius) / length * (index + 1);\n\t\t\t}\n\t\t}\n\t\treturn radius;\n\t}\n\n\t/**\n\t * Returns inner radius in pixels.\n\t *\n\t * If optional series parameter is passed in, it will return inner radius\n\t * of that particular series.\n\t *\n\t * @param   series  Series\n\t * @return          Radius in pixels\n\t */\n\tpublic innerRadius(series?: PieSeries): number {\n\t\tconst radius = this.radius();\n\t\tlet innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\n\n\t\tif (innerRadius < 0) {\n\t\t\tinnerRadius = radius + innerRadius;\n\t\t}\n\n\t\tif (series) {\n\t\t\tlet index = this.series.indexOf(series);\n\t\t\tlet length = this.series.length;\n\n\t\t\tlet seriesInnerRadius = series.get(\"innerRadius\");\n\t\t\tif (seriesInnerRadius != null) {\n\t\t\t\treturn innerRadius + $utils.relativeToValue(seriesInnerRadius, radius - innerRadius);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn innerRadius + (radius - innerRadius) / length * index;\n\t\t\t}\n\t\t}\n\t\treturn innerRadius;\n\t}\n\n\tpublic _updateSize() {\n\t\tsuper._updateSize();\n\t\tthis.markDirtyKey(\"radius\");\n\t}\t\t\n}\n","import type { DataItem } from \"../../core/render/Component\";\nimport type { PieChart } from \"./PieChart\";\n\nimport { PercentSeries, IPercentSeriesSettings, IPercentSeriesDataItem, IPercentSeriesPrivate } from \"../percent/PercentSeries\";\nimport { Template } from \"../../core/util/Template\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport { Slice } from \"../../core/render/Slice\";\nimport { Tick } from \"../../core/render/Tick\";\nimport { RadialLabel } from \"../../core/render/RadialLabel\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { p100, Percent } from \"../../core/util/Percent\";\nimport type { Bullet } from \"../../core/render/Bullet\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $math from \"../../core/util/Math\";\nimport * as $utils from \"../../core/util/Utils\";\n\nexport interface IPieSeriesDataItem extends IPercentSeriesDataItem {\n\tslice: Slice;\n\tlabel: RadialLabel;\n}\n\nexport interface IPieSeriesSettings extends IPercentSeriesSettings {\n\n\t/**\n\t * Radius of the series in pixels or percent.\n\t */\n\tradius?: Percent | number;\n\n\t/**\n\t * Radius of the series in pixels or percent.\n\t *\n\t * Setting to negative number will mean pixels from outer radius.\n\t */\n\tinnerRadius?: Percent | number;\n\n\t/**\n\t * Start angle of the series in degrees.\n\t *\n\t * @default -90\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * End angle of the series in degrees.\n\t *\n\t * @default 270\n\t */\n\tendAngle?: number;\n\n}\n\nexport interface IPieSeriesPrivate extends IPercentSeriesPrivate {\n\n\t/**\n\t * Actual radius of the series in pixels.\n\t */\n\tradius?: number;\n\n}\n\n/**\n * Creates a series for a [[PieChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\n * @important\n */\nexport class PieSeries extends PercentSeries {\n\n\tdeclare public chart: PieChart | undefined;\n\n\tpublic static className: string = \"PieSeries\";\n\tpublic static classNames: Array<string> = PercentSeries.classNames.concat([PieSeries.className]);\n\n\tdeclare public _settings: IPieSeriesSettings;\n\tdeclare public _privateSettings: IPieSeriesPrivate;\n\tdeclare public _dataItemSettings: IPieSeriesDataItem;\n\n\tdeclare public _sliceType: Slice;\n\tdeclare public _labelType: RadialLabel;\n\n\tprotected _makeSlices(): ListTemplate<this[\"_sliceType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Slice._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.slices.template.get(\"themeTags\", []), [\"pie\", \"series\"])\n\t\t\t}, [this.slices.template]),\n\t\t);\n\t}\n\n\tprotected _makeLabels(): ListTemplate<this[\"_labelType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => RadialLabel._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), [\"pie\", \"series\"])\n\t\t\t}, [this.labels.template]),\n\t\t);\n\t}\n\n\tprotected _makeTicks(): ListTemplate<this[\"_tickType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Tick._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.ticks.template.get(\"themeTags\", []), [\"pie\", \"series\"])\n\t\t\t}, [this.ticks.template]),\n\t\t);\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tconst slice = this.makeSlice(dataItem);\n\n\t\tslice.on(\"scale\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\t\tslice.on(\"shiftRadius\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\t\tslice.events.on(\"positionchanged\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tconst label = this.makeLabel(dataItem);\n\n\t\tlabel.events.on(\"positionchanged\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tthis.makeTick(dataItem);\n\n\t\tslice.events.on(\"positionchanged\", () => {\n\t\t\tlabel.markDirty();\n\t\t})\n\t}\n\n\tprotected _getNextUp() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\treturn chart._maxRadius;\n\t\t}\n\t\treturn this.labelsContainer.maxHeight() / 2;\n\t}\n\n\tprotected _getNextDown() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\treturn -chart._maxRadius;\n\t\t}\n\t\treturn -this.labelsContainer.maxHeight() / 2;\n\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\n\t\t\tif (this.isDirty(\"alignLabels\")) {\n\t\t\t\tlet labelsTemplate = this.labels.template;\n\n\t\t\t\tif (this.get(\"alignLabels\")) {\n\t\t\t\t\tlabelsTemplate.set(\"textType\", \"aligned\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlet textType = labelsTemplate.get(\"textType\");\n\t\t\t\t\tif (textType == null || textType == \"aligned\") {\n\t\t\t\t\t\tlabelsTemplate.set(\"textType\", \"adjusted\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tif (this._valuesDirty || this.isDirty(\"radius\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\") || this.isDirty(\"alignLabels\")) {\n\t\t\t\tthis.markDirtyBounds();\n\t\t\t\tconst startAngle = this.get(\"startAngle\", chart.get(\"startAngle\", -90));\n\t\t\t\tconst endAngle = this.get(\"endAngle\", chart.get(\"endAngle\", 270));\n\t\t\t\tconst arc = endAngle - startAngle;\n\t\t\t\tlet currentAngle = startAngle;\n\n\t\t\t\tconst radius = chart.radius(this);\n\t\t\t\tthis.setPrivateRaw(\"radius\", radius);\n\t\t\t\tlet innerRadius = chart.innerRadius(this) * chart.getPrivate(\"irModifyer\", 1);\n\n\t\t\t\tif (innerRadius < 0) {\n\t\t\t\t\tinnerRadius = radius + innerRadius;\n\t\t\t\t}\n\n\t\t\t\t//if (radius > 0) {\n\t\t\t\t$array.each(this._dataItems, (dataItem) => {\n\n\t\t\t\t\tthis.updateLegendValue(dataItem);\n\n\t\t\t\t\tlet currentArc = arc * dataItem.get(\"valuePercentTotal\") / 100;\n\t\t\t\t\tconst slice = dataItem.get(\"slice\");\n\t\t\t\t\tif (slice) {\n\t\t\t\t\t\tslice.set(\"radius\", radius);\n\t\t\t\t\t\tslice.set(\"innerRadius\", innerRadius);\n\t\t\t\t\t\tslice.set(\"startAngle\", currentAngle);\n\n\t\t\t\t\t\tslice.set(\"arc\", currentArc);\n\n\t\t\t\t\t\tconst color = dataItem.get(\"fill\");\n\t\t\t\t\t\tslice._setDefault(\"fill\", color);\n\t\t\t\t\t\tslice._setDefault(\"stroke\", color);\n\n\t\t\t\t\t\tconst fillPattern = dataItem.get(\"fillPattern\");\n\t\t\t\t\t\tslice._setDefault(\"fillPattern\", fillPattern);\t\t\t\t\t\t\n\t\t\t\t\t}\n\n\t\t\t\t\tlet middleAngle = $math.normalizeAngle(currentAngle + currentArc / 2);\n\n\t\t\t\t\tconst label = dataItem.get(\"label\");\n\t\t\t\t\tif (label) {\n\t\t\t\t\t\tlabel.setPrivate(\"radius\", radius);\n\t\t\t\t\t\tlabel.setPrivate(\"innerRadius\", innerRadius);\n\t\t\t\t\t\tlabel.set(\"labelAngle\", middleAngle);\n\n\t\t\t\t\t\tif (label.get(\"textType\") == \"aligned\") {\n\t\t\t\t\t\t\tlet labelRadius = radius + label.get(\"radius\", 0);\n\t\t\t\t\t\t\tlet y = radius * $math.sin(middleAngle);\n\n\t\t\t\t\t\t\tif (middleAngle > 90 && middleAngle <= 270) {\n\t\t\t\t\t\t\t\tif (!label.isHidden() && !label.isHiding()) {\n\t\t\t\t\t\t\t\t\tthis._lLabels.push({ label: label, y: y });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlabelRadius *= -1;\n\t\t\t\t\t\t\t\tlabelRadius -= this.labelsContainer.get(\"paddingLeft\", 0);\n\t\t\t\t\t\t\t\tlabel.set(\"centerX\", p100);\n\t\t\t\t\t\t\t\tlabel.setPrivateRaw(\"left\", true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (!label.isHidden() && !label.isHiding()) {\n\t\t\t\t\t\t\t\t\tthis._rLabels.push({ label: label, y: y });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlabelRadius += this.labelsContainer.get(\"paddingRight\", 0);\n\t\t\t\t\t\t\t\tlabel.set(\"centerX\", 0);\n\t\t\t\t\t\t\t\tlabel.setPrivateRaw(\"left\", false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlabel.set(\"x\", labelRadius);\n\t\t\t\t\t\t\tlabel.set(\"y\", radius * $math.sin(middleAngle));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcurrentAngle += currentArc;\n\t\t\t\t\tthis._updateTick(dataItem);\n\t\t\t\t})\n\t\t\t\t//}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _updateTick(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tconst label = dataItem.get(\"label\");\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tconst location = tick.get(\"location\", 1);\n\t\tif (tick && label && slice) {\n\t\t\tconst radius = (slice.get(\"shiftRadius\", 0) + slice.get(\"radius\", 0)) * slice.get(\"scale\", 1) * location;\n\t\t\tconst labelAngle = label.get(\"labelAngle\", 0);\n\t\t\tconst cos = $math.cos(labelAngle);\n\t\t\tconst sin = $math.sin(labelAngle);\n\n\t\t\tconst labelsContainer = this.labelsContainer;\n\t\t\tconst pl = labelsContainer.get(\"paddingLeft\", 0);\n\t\t\tconst pr = labelsContainer.get(\"paddingRight\", 0);\n\n\t\t\tlet x = 0;\n\t\t\tlet y = 0;\n\n\t\t\tx = label.x();\n\t\t\ty = label.y();\n\t\t\tlet points:Array<IPoint> = [];\n\n\t\t\tif(x != 0 || y != 0){\n\t\t\t\tif (label.get(\"textType\") == \"circular\") {\n\t\t\t\t\tconst labelRadius = label.radius() - label.get(\"paddingBottom\", 0);\n\t\t\t\t\tconst labelAngle = label.get(\"labelAngle\", 0);\n\t\t\t\t\tx = labelRadius * $math.cos(labelAngle);\n\t\t\t\t\ty = labelRadius * $math.sin(labelAngle);\n\t\t\t\t}\n\n\t\t\t\tlet dx = -pr;\n\t\t\t\tif (label.getPrivate(\"left\")) {\n\t\t\t\t\tdx = pl;\n\t\t\t\t}\n\t\t\t\tpoints = [{ x: slice.x() + radius * cos, y: slice.y() + radius * sin }, { x: x + dx, y: y }, { x: x, y: y }];\t\t\t\t\n\t\t\t}\n\n\t\t\ttick.set(\"points\", points);\n\t\t}\n\t}\n\n\tpublic _positionBullet(bullet: Bullet) {\n\n\t\tconst sprite = bullet.get(\"sprite\");\n\t\tif (sprite) {\n\t\t\tconst dataItem = sprite.dataItem as DataItem<this[\"_dataItemSettings\"]>;\n\t\t\tconst slice = dataItem.get(\"slice\");\n\n\t\t\tif (slice) {\n\t\t\t\tconst innerRadius = slice.get(\"innerRadius\", 0);\n\t\t\t\tconst radius = slice.get(\"radius\", 0);\n\t\t\t\tconst startAngle = slice.get(\"startAngle\", 0);\n\t\t\t\tconst arc = slice.get(\"arc\", 0);\n\t\t\t\tconst locationX = bullet.get(\"locationX\", 0.5);\n\t\t\t\tconst locationY = bullet.get(\"locationY\", 0.5);\n\n\t\t\t\tconst angle = startAngle + arc * locationX;\n\t\t\t\tconst r = innerRadius + (radius - innerRadius) * locationY;\n\n\t\t\t\tsprite.setAll({ x: $math.cos(angle) * r, y: $math.sin(angle) * r });\n\t\t\t}\n\t\t}\n\t}\n}\n","import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"../../core/render/Graphics\";\nimport type { IPoint } from \"../../core/util/IPoint\";\n\nexport interface IFunnelSliceSettings extends IGraphicsSettings {\n\n\t/**\n\t * Top width in pixels.\n\t */\n\ttopWidth?: number;\n\n\t/**\n\t * Bottom width in pixels.\n\t */\n\tbottomWidth?: number;\n\n\t/**\n\t * Orientation.\n\t */\n\torientation?: \"vertical\" | \"horizontal\";\n\n\t/**\n\t * A distance in pixels the slice should \"puff up\".\n\t *\n\t * Any non-zero value will make sides of the slide curved.\n\t */\n\texpandDistance?: number;\n\n}\n\nexport interface IFunnelSlicePrivate extends IGraphicsPrivate {\n}\n\n/**\n * Draws a slice for [[FunnelSeries]].\n */\nexport class FunnelSlice extends Graphics {\n\tdeclare public _settings: IFunnelSliceSettings;\n\tdeclare public _privateSettings: IFunnelSlicePrivate;\n\n\tpublic static className: string = \"FunnelSlice\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([FunnelSlice.className]);\n\tprotected _projectionDirty: boolean = false;\n\n\tprotected _tlx: number = 0;\n\tprotected _tly: number = 0;\n\n\tprotected _trx: number = 0;\n\tprotected _try: number = 0;\n\n\tprotected _blx: number = 0;\n\tprotected _bly: number = 0;\n\n\tprotected _brx: number = 0;\n\tprotected _bry: number = 0;\n\n\tprotected _cprx: number = 0;\n\tprotected _cplx: number = 0;\n\tprotected _cpry: number = 0;\n\tprotected _cply: number = 0;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.set(\"draw\", (display) => {\n\t\t\tdisplay.moveTo(this._tlx, this._tly);\n\t\t\tdisplay.lineTo(this._trx, this._try);\n\t\t\tdisplay.quadraticCurveTo(this._cprx, this._cpry, this._brx, this._bry);\n\t\t\tdisplay.lineTo(this._blx, this._bly);\n\t\t\tdisplay.quadraticCurveTo(this._cplx, this._cply, this._tlx, this._tly);\n\t\t})\n\t}\n\n\tpublic getPoint(locationX: number, locationY: number): IPoint {\n\t\tlet w = this.width();\n\t\tlet h = this.height();\n\n\t\tconst tw = this.get(\"topWidth\", 0);\n\t\tconst bw = this.get(\"bottomWidth\", 0);\n\n\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\tlet tlx = -tw / 2;\n\t\t\tlet trx = tw / 2;\n\n\t\t\tlet brx = bw / 2;\n\t\t\tlet blx = - bw / 2;\n\n\t\t\tlet mlx = tlx + (blx - tlx) * locationY;\n\t\t\tlet mrx = trx + (brx - trx) * locationY;\n\n\t\t\treturn { x: mlx + (mrx - mlx) * locationX, y: h * locationY };\n\t\t}\n\t\telse {\n\t\t\tlet tlx = -tw / 2;\n\t\t\tlet trx = tw / 2;\n\n\t\t\tlet brx = bw / 2;\n\t\t\tlet blx = - bw / 2;\n\n\t\t\tlet mlx = tlx + (blx - tlx) * locationX;\n\t\t\tlet mrx = trx + (brx - trx) * locationX;\n\n\t\t\treturn { x: w * locationX, y: mlx + (mrx - mlx) * locationY};\n\t\t}\n\n\t}\n\n\tpublic _changed() {\n\n\t\tif (this.isDirty(\"topWidth\") || this.isDirty(\"bottomWidth\") || this.isDirty(\"expandDistance\") || this.isDirty(\"orientation\") || this.isDirty(\"width\") || this.isDirty(\"height\")) {\n\t\t\tconst w = this.width();\n\t\t\tconst h = this.height();\n\t\t\tconst tw = this.get(\"topWidth\", 0);\n\t\t\tconst bw = this.get(\"bottomWidth\", 0);\n\t\t\tthis._clear = true;\n\n\t\t\tlet ed = this.get(\"expandDistance\", 0);\n\n\t\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\t\tthis._tlx = -tw / 2;\n\t\t\t\tthis._tly = 0;\n\n\t\t\t\tthis._trx = tw / 2;\n\t\t\t\tthis._try = 0;\n\n\t\t\t\tthis._brx = bw / 2;\n\t\t\t\tthis._bry = h;\n\n\t\t\t\tthis._blx = -bw / 2;\n\t\t\t\tthis._bly = h;\n\n\t\t\t\tthis._cprx = this._trx + (this._brx - this._trx) / 2 + ed * h,\n\t\t\t\tthis._cpry = this._try + 0.5 * h;\n\n\t\t\t\tthis._cplx = this._tlx + (this._blx - this._tlx) / 2 - ed * h;\n\t\t\t\tthis._cply = this._tly + 0.5 * h;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._tly = -tw / 2;\n\t\t\t\tthis._tlx = 0;\n\n\t\t\t\tthis._try = tw / 2;\n\t\t\t\tthis._trx = 0;\n\n\t\t\t\tthis._bry = bw / 2;\n\t\t\t\tthis._brx = w;\n\n\t\t\t\tthis._bly = -bw / 2;\n\t\t\t\tthis._blx = w;\n\n\t\t\t\tthis._cpry = this._try + (this._bry - this._try) / 2 + ed * w,\n\t\t\t\tthis._cprx = this._trx + 0.5 * w;\n\n\t\t\t\tthis._cply = this._tly + (this._bly - this._tly) / 2 - ed * w;\n\t\t\t\tthis._cplx = this._tlx + 0.5 * w;\n\t\t\t}\n\t\t}\n\t\tsuper._changed();\n\t}\n}\n","import type { DataItem } from \"../../core/render/Component\";\nimport type { SlicedChart } from \"./SlicedChart\";\n\nimport { PercentSeries, IPercentSeriesSettings, IPercentSeriesDataItem, IPercentSeriesPrivate } from \"../percent/PercentSeries\";\nimport { Template } from \"../../core/util/Template\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { FunnelSlice } from \"./FunnelSlice\";\nimport { Tick } from \"../../core/render/Tick\";\nimport { Label } from \"../../core/render/Label\";\nimport { percent, p50, p100 } from \"../../core/util/Percent\";\nimport type { Bullet } from \"../../core/render/Bullet\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $utils from \"../../core/util/Utils\";\n\n\nexport interface IFunnelSeriesDataItem extends IPercentSeriesDataItem {\n\n\t/**\n\t * A related slice element.\n\t */\n\tslice: FunnelSlice;\n\n\t/**\n\t * A related slice link element\n\t */\n\tlink: FunnelSlice;\n\n\t/**\n\t * Data item's index.\n\t */\n\tindex: number;\n\n}\n\nexport interface IFunnelSeriesSettings extends IPercentSeriesSettings {\n\n\t/**\n\t * Width of the bottom edge of the slice relative to the top edge of the next\n\t * slice.\n\t *\n\t * `1` - means the full width of the slice, resulting in a rectangle.\n\t * `0` - means using width of the next slice, resulting in a trapezoid.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Slice_bottom_width} for more info\n\t * @default 1\n\t */\n\tbottomRatio?: number;\n\n\t/**\n\t * Orientation of the series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/#Series_orientation} for more info\n\t * @default \"vertical\"\n\t */\n\torientation: \"horizontal\" | \"vertical\";\n\n\t/**\n\t * If set to `true`, series will not create slices for data items with zero\n\t * value.\n\t */\n\tignoreZeroValues?: boolean;\n\n\t/**\n\t * Should labels be aligned into columns/rows?\n\t *\n\t * @default false\n\t */\n\talignLabels?: boolean;\n\n\t/**\n\t * Relative location within area available to series where it should start.\n\t *\n\t * `0` - beginning, `1` - end, or any intermediate value.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Start_end_locations} for more info\n\t * @default 0\n\t */\n\tstartLocation?: number;\n\n\t/**\n\t * Relative location within area available to series where it should start.\n\t *\n\t * `0` - beginning, `1` - end, or any intermediate value.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Start_end_locations} for more info\n\t * @default 0\n\t */\n\tendLocation?: number;\n\n}\n\nexport interface IFunnelSeriesPrivate extends IPercentSeriesPrivate {\n}\n\n/**\n * Creates a funnel series for use in a [[SlicedChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/} for more info\n * @important\n */\nexport class FunnelSeries extends PercentSeries {\n\n\t/**\n\t * A chart series is attached to.\n\t */\n\tdeclare public chart: SlicedChart | undefined;\n\n\tprotected _tag = \"funnel\";\n\n\tdeclare public _sliceType: FunnelSlice;\n\tdeclare public _labelType: Label;\n\tdeclare public _tickType: Tick;\n\n\tprotected _makeSlices(): ListTemplate<this[\"_sliceType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => FunnelSlice._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.slices.template.get(\"themeTags\", []), [this._tag, \"series\", \"slice\", this.get(\"orientation\")])\n\t\t\t}, [this.slices.template])\n\t\t);\n\t}\n\n\tprotected _makeLabels(): ListTemplate<this[\"_labelType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Label._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), [this._tag, \"series\", \"label\", this.get(\"orientation\")])\n\t\t\t}, [this.labels.template])\n\t\t);\n\t}\n\n\tprotected _makeTicks(): ListTemplate<this[\"_tickType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Tick._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.ticks.template.get(\"themeTags\", []), [this._tag, \"series\", \"tick\", this.get(\"orientation\")])\n\t\t\t}, [this.ticks.template])\n\t\t);\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all slice links in series.\n\t *\n\t * `links.template` can also be used to configure slice links.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Slice_links} for more info\n\t */\n\tpublic readonly links: ListTemplate<this[\"_sliceType\"]> = this._makeLinks();\n\n\tprotected _makeLinks(): ListTemplate<this[\"_sliceType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => FunnelSlice._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.links.template.get(\"themeTags\", []), [this._tag, \"series\", \"link\", this.get(\"orientation\")])\n\t\t\t}, [this.links.template]),\n\t\t);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeLink(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_sliceType\"] {\n\t\tconst link = this.slicesContainer.children.push(this.links.make());\n\t\tlink._setDataItem(dataItem);\n\t\tdataItem.set(\"link\", link);\n\t\tthis.links.push(link);\n\t\treturn link;\n\t}\n\n\tpublic static className: string = \"FunnelSeries\";\n\tpublic static classNames: Array<string> = PercentSeries.classNames.concat([FunnelSeries.className]);\n\n\tdeclare public _settings: IFunnelSeriesSettings;\n\tdeclare public _privateSettings: IFunnelSeriesPrivate;\n\tdeclare public _dataItemSettings: IFunnelSeriesDataItem;\n\n\tprotected _total: number = 0;\n\tprotected _count: number = 0;\n\tprotected _nextCoord: number = 0;\n\n\tprotected _opposite: boolean = false;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tconst slicesContainer = this.slicesContainer;\n\t\tslicesContainer.setAll({ isMeasured: true, position: \"relative\", width: percent(100), height: percent(100) });\n\t\tslicesContainer.onPrivate(\"width\", () => {\n\t\t\tthis.markDirtySize();\n\t\t})\n\n\t\tslicesContainer.onPrivate(\"height\", () => {\n\t\t\tthis.markDirtySize();\n\t\t})\n\n\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\tthis.set(\"layout\", this._root.horizontalLayout);\n\t\t}\n\t\telse {\n\t\t\tthis.set(\"layout\", this._root.verticalLayout);\n\t\t}\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tconst slice = this.makeSlice(dataItem);\n\n\t\tslice._setDataItem(dataItem);\n\n\t\tdataItem.set(\"slice\", slice);\n\n\t\tthis.makeLink(dataItem);\n\t\tconst label = this.makeLabel(dataItem);\n\n\t\tlabel.on(\"x\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tlabel.on(\"y\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tthis.makeTick(dataItem);\n\n\t\tslice.events.on(\"positionchanged\", () => {\n\t\t\tlabel.markDirty();\n\t\t})\n\n\t\tslice.events.on(\"boundschanged\", () => {\n\t\t\tconst dataItem = slice.dataItem;\n\t\t\tif (dataItem) {\n\t\t\t\tthis._updateTick(dataItem as any);\n\t\t\t}\n\t\t})\n\t}\n\n\n\tpublic _updateChildren() {\n\t\tthis._opposite = false;\n\t\tif (this.children.indexOf(this.labelsContainer) == 0) {\n\t\t\tthis._opposite = true;\n\t\t}\n\n\t\tlet total = 0;\n\t\tlet count = 0;\n\n\t\t$array.each(this.dataItems, (dataItem) => {\n\t\t\tconst value = dataItem.get(\"value\");\n\t\t\tif ($type.isNumber(value)) {\n\t\t\t\tcount++;\n\t\t\t\tif (value > 0) {\n\t\t\t\t\ttotal += Math.abs(dataItem.get(\"valueWorking\", value) / value);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (this.get(\"ignoreZeroValues\", false)) {\n\t\t\t\t\t\tcount--;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (dataItem.isHidden()) {\n\t\t\t\t\t\t\tcount--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\ttotal += 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tthis._total = 1 / count * total;\n\t\tthis._count = count;\n\n\t\tif (this.isDirty(\"alignLabels\")) {\n\t\t\tthis._fixLayout();\n\t\t}\n\n\t\tif (this._total > 0 && (this._valuesDirty || this._sizeDirty)) {\n\n\t\t\tconst slicesContainer = this.slicesContainer;\n\n\t\t\tlet h: number;\n\t\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\t\th = slicesContainer.innerHeight();\n\t\t\t}\n\t\t\telse {\n\t\t\t\th = slicesContainer.innerWidth();\n\t\t\t}\n\n\t\t\tthis._nextCoord = this.get(\"startLocation\", 0) * h;\n\n\t\t\tthis.markDirtyBounds();\n\n\t\t\tlet i = 0;\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tthis.updateLegendValue(dataItem);\n\n\t\t\t\tdataItem.set(\"index\", i);\n\t\t\t\ti++;\n\n\t\t\t\tconst slice = dataItem.get(\"slice\");\n\t\t\t\tconst tick = dataItem.get(\"tick\");\n\t\t\t\tconst label = dataItem.get(\"label\");\n\t\t\t\tconst link = dataItem.get(\"link\");\n\t\t\t\tconst color = dataItem.get(\"fill\");\n\t\t\t\tconst fillPattern = dataItem.get(\"fillPattern\");\n\n\t\t\t\tslice._setDefault(\"fill\", color);\n\t\t\t\tslice._setDefault(\"stroke\", color);\n\t\t\t\tslice._setDefault(\"fillPattern\", fillPattern);\n\t\t\t\tlink._setDefault(\"fill\", color);\n\t\t\t\tlink._setDefault(\"stroke\", color);\n\n\t\t\t\tconst value = dataItem.get(\"value\");\n\t\t\t\tif ($type.isNumber(value)) {\n\t\t\t\t\tif (value == 0 && this.get(\"ignoreZeroValues\")) {\n\t\t\t\t\t\tslice.setPrivate(\"visible\", false);\n\t\t\t\t\t\ttick.setPrivate(\"visible\", false);\n\t\t\t\t\t\tlabel.setPrivate(\"visible\", false);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tslice.setPrivate(\"visible\", true);\n\t\t\t\t\t\ttick.setPrivate(\"visible\", true);\n\t\t\t\t\t\tlabel.setPrivate(\"visible\", true);\n\n\t\t\t\t\t\tthis.decorateSlice(dataItem);\n\n\t\t\t\t\t\tif (this.isLast(dataItem)) {\n\t\t\t\t\t\t\tlink.setPrivate(\"visible\", false);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (!dataItem.isHidden()) {\n\t\t\t\t\t\t\tlink.setPrivate(\"visible\", true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\tsuper._updateChildren();\n\t}\n\n\tprotected _fixLayout() {\n\n\t\tconst orientation = this.get(\"orientation\");\n\t\tconst labelsContainer = this.labelsContainer;\n\t\tconst labelsTemplate = this.labels.template;\n\n\t\tif (this.get(\"alignLabels\")) {\n\t\t\tlabelsContainer.set(\"position\", \"relative\");\n\t\t\tlabelsContainer.setAll({ isMeasured: true });\n\t\t\tif (orientation == \"vertical\") {\n\t\t\t\tthis.set(\"layout\", this._root.horizontalLayout);\n\t\t\t\tlabelsTemplate.setAll({ centerX: p100, x: p100 });\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.set(\"layout\", this._root.verticalLayout);\n\t\t\t\tlabelsTemplate.setAll({ centerX: 0, x: 0 });\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tlabelsContainer.setAll({ isMeasured: false, position: \"absolute\" });\n\t\t\tif (orientation == \"vertical\") {\n\t\t\t\tlabelsContainer.setAll({ x: p50 });\n\t\t\t\tlabelsTemplate.setAll({ centerX: p50, x: 0 });\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlabelsContainer.setAll({ y: p50 });\n\t\t\t\tlabelsTemplate.setAll({ centerX: p50, y: 0 });\n\t\t\t}\n\t\t}\n\t\tthis.markDirtySize();\n\t}\n\n\tprotected getNextValue(dataItem: DataItem<this[\"_dataItemSettings\"]>): number {\n\t\tlet index = dataItem.get(\"index\");\n\t\tlet nextValue = dataItem.get(\"valueWorking\", 0);\n\t\tif (index < this.dataItems.length - 1) {\n\t\t\tlet nextItem = this.dataItems[index + 1];\n\t\t\tnextValue = nextItem.get(\"valueWorking\", 0);\n\n\t\t\tif (nextItem.isHidden() || (nextItem.get(\"value\") == 0 && this.get(\"ignoreZeroValues\"))) {\n\t\t\t\treturn this.getNextValue(nextItem);\n\t\t\t}\n\t\t}\n\t\treturn nextValue;\n\t}\n\n\tprotected isLast(dataItem: DataItem<this[\"_dataItemSettings\"]>): boolean {\n\t\tlet index = dataItem.get(\"index\");\n\t\tif (index == this.dataItems.length - 1) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\tfor (let i = index + 1; i < this.dataItems.length; i++) {\n\t\t\t\tif (!this.dataItems[i].isHidden()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprotected decorateSlice(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst orientation = this.get(\"orientation\");\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tconst label = dataItem.get(\"label\");\n\t\tconst link = dataItem.get(\"link\");\n\n\t\tconst slicesContainer = this.slicesContainer;\n\n\t\tlet maxWidth = slicesContainer.innerWidth();\n\t\tlet maxHeight = slicesContainer.innerHeight();\n\n\t\tlet maxSize = maxWidth;\n\t\tif (orientation == \"horizontal\") {\n\t\t\tmaxSize = maxHeight;\n\t\t}\n\n\t\tconst nextValue = this.getNextValue(dataItem);\n\t\tconst value = dataItem.get(\"value\", 0);\n\t\tconst workingValue = Math.abs(dataItem.get(\"valueWorking\", value));\n\t\tconst bottomRatio = this.get(\"bottomRatio\", 0);\n\t\tconst valueHigh = this.getPrivate(\"valueHigh\", 0);\n\n\n\t\tlet d = 1;\n\t\tif (value != 0) {\n\t\t\td = workingValue / Math.abs(value);\n\t\t}\n\t\telse {\n\t\t\tif (dataItem.isHidden()) {\n\t\t\t\td = 0.000001;\n\t\t\t}\n\t\t}\n\n\t\tif (this._nextCoord == Infinity) {\n\t\t\tthis._nextCoord = 0;\n\t\t}\n\n\t\tlet topWidth = workingValue / valueHigh * maxSize;\n\t\tlet bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / valueHigh * maxSize;\n\n\t\tslice.setAll({ topWidth, bottomWidth, orientation });\n\t\tlink.setAll({ topWidth: bottomWidth, bottomWidth: (workingValue - (workingValue - nextValue)) / valueHigh * maxSize, orientation });\n\n\t\tconst startLocation = this.get(\"startLocation\", 0);\n\t\tconst endLocation = this.get(\"endLocation\", 1);\n\n\t\tif (orientation == \"vertical\") {\n\n\t\t\tlet linkHeight = link.height() * d;\n\n\t\t\tmaxHeight = maxHeight * (endLocation - startLocation) + linkHeight;\n\n\t\t\tslice.set(\"y\", this._nextCoord);\n\n\t\t\tlet height = Math.min(100000, Math.max(0, maxHeight / this._count * d / this._total - linkHeight));\n\n\t\t\tslice.setAll({ height, x: maxWidth / 2 });\n\t\t\tlet labelY = this._nextCoord + height / 2;\n\t\t\tlabel.set(\"y\", labelY);\n\n\t\t\tthis._nextCoord += height + linkHeight;\n\t\t\tlink.setAll({ y: this._nextCoord - linkHeight, x: maxWidth / 2 });\n\t\t}\n\t\telse {\n\t\t\tlet linkHeight = link.width() * d;\n\n\t\t\tmaxWidth = maxWidth * (endLocation - startLocation) + linkHeight;\n\n\t\t\tslice.set(\"x\", this._nextCoord);\n\n\t\t\tlet width = Math.min(100000, Math.max(0, maxWidth / this._count * d / this._total - linkHeight));\n\n\t\t\tslice.setAll({ width, y: maxHeight / 2 });\n\t\t\tconst labelX = this._nextCoord + width / 2;\n\t\t\tlabel.set(\"x\", labelX);\n\n\t\t\tthis._nextCoord += width + linkHeight;\n\t\t\tlink.setAll({ x: this._nextCoord - linkHeight, y: maxHeight / 2 });\n\t\t}\n\t}\n\n\t/**\n\t * Hides series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async hideDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tdataItem.get(\"link\").hide(duration);\n\t\treturn super.hideDataItem(dataItem, duration)\n\t}\n\n\t/**\n\t * Shows series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async showDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tdataItem.get(\"link\").show(duration);\n\t\treturn super.showDataItem(dataItem, duration)\n\t}\n\n\tprotected _updateTick(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tif (this.get(\"alignLabels\")) {\n\t\t\tconst tick = dataItem.get(\"tick\");\n\t\t\tconst label = dataItem.get(\"label\");\n\t\t\tconst slice = dataItem.get(\"slice\");\n\n\t\t\tif (tick && slice && label) {\n\n\t\t\t\tconst labelsContainer = this.labelsContainer;\n\t\t\t\tconst slicesContainer = this.slicesContainer;\n\t\t\t\tlet tickLocation = tick.get(\"location\", 0.5);\n\n\t\t\t\tconst lcw = labelsContainer.width();\n\t\t\t\tconst lch = labelsContainer.height();\n\n\t\t\t\tconst pl = labelsContainer.get(\"paddingLeft\", 0);\n\t\t\t\tconst pr = labelsContainer.get(\"paddingRight\", 0);\n\t\t\t\tconst pt = labelsContainer.get(\"paddingTop\", 0);\n\t\t\t\tconst pb = labelsContainer.get(\"paddingBottom\", 0);\n\n\t\t\t\tlet p0 = { x: 0, y: 0 };\n\t\t\t\tlet p1 = { x: 0, y: 0 };\n\t\t\t\tlet p2 = { x: 0, y: 0 };\n\n\t\t\t\tif (this._opposite) {\n\t\t\t\t\ttickLocation = 1 - tickLocation;\n\t\t\t\t}\n\n\t\t\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\t\t\tp0 = slice.getPoint(tickLocation, 0.5);\n\t\t\t\t\tp0.x += slice.x() + slicesContainer.x();\n\t\t\t\t\tp0.y += slice.y() + slicesContainer.y();\n\n\t\t\t\t\tif (this._opposite) {\n\t\t\t\t\t\tp1.x = lcw;\n\t\t\t\t\t\tp1.y = label.y();\n\n\t\t\t\t\t\tp2.x = lcw - pl;\n\t\t\t\t\t\tp2.y = p1.y;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tp1.x = slicesContainer.x() + slicesContainer.width();\n\t\t\t\t\t\tp1.y = label.y();\n\n\t\t\t\t\t\tp2.x = p1.x + lcw - label.width() - pr;\n\t\t\t\t\t\tp2.y = p1.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tp0 = slice.getPoint(0.5, tickLocation);\n\t\t\t\t\tp0.x += slice.x() + slicesContainer.x();\n\t\t\t\t\tp0.y += slice.y() + slicesContainer.y();\n\n\t\t\t\t\tif (this._opposite) {\n\t\t\t\t\t\tp1.y = lch;\n\t\t\t\t\t\tp1.x = label.x();\n\n\t\t\t\t\t\tp2.y = lch - pt;\n\t\t\t\t\t\tp2.x = p1.x;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tp1.y = slicesContainer.y() + slicesContainer.height();\n\t\t\t\t\t\tp1.x = label.x();\n\n\t\t\t\t\t\tp2.y = p1.y + lch - label.height() - pb;\n\t\t\t\t\t\tp2.x = p1.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttick.set(\"points\", [p0, p1, p2]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.disposeDataItem(dataItem);\n\t\tlet link = dataItem.get(\"link\");\n\t\tif (link) {\n\t\t\tthis.links.removeValue(link);\n\t\t\tlink.dispose();\n\t\t}\n\t}\n\n\tpublic _positionBullet(bullet: Bullet) {\n\n\t\tconst sprite = bullet.get(\"sprite\");\n\t\tif (sprite) {\n\t\t\tconst dataItem = sprite.dataItem as DataItem<this[\"_dataItemSettings\"]>;\n\t\t\tconst slice = dataItem.get(\"slice\");\n\n\t\t\tif (slice) {\n\t\t\t\tconst width = slice.width();\n\t\t\t\tconst height = slice.height();\n\t\t\t\tconst locationX = bullet.get(\"locationX\", 0.5);\n\t\t\t\tconst locationY = bullet.get(\"locationY\", 0.5);\n\n\t\t\t\tlet dx = 0;\n\t\t\t\tlet dy = 0;\n\t\t\t\tif (this.get(\"orientation\") == \"horizontal\") {\n\t\t\t\t\tdy = height / 2\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdx = width / 2\n\t\t\t\t}\n\n\t\t\t\tsprite.setAll({ x: slice.x() + width * locationX - dx, y: slice.y() - dy + height * locationY });\n\t\t\t}\n\t\t}\n\t}\n}\n","import type { DataItem } from \"../../core/render/Component\";\nimport { FunnelSeries, IFunnelSeriesSettings, IFunnelSeriesDataItem, IFunnelSeriesPrivate } from \"./FunnelSeries\";\nimport { Percent, p100 } from \"../../core/util/Percent\";\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $type from \"../../core/util/Type\";\n\nexport interface IPyramidSeriesDataItem extends IFunnelSeriesDataItem {\n\n}\n\nexport interface IPyramidSeriesSettings extends IFunnelSeriesSettings {\n\n\t/**\n\t * The width of the tip of the pyramid.\n\t *\n\t * Can either be a fixed pixel value or percent relative to the space\n\t * available to the series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/#Tip_and_base} for more info\n\t * @default 0\n\t */\n\ttopWidth?: number | Percent;\n\n\t/**\n\t * The width of the base of the pyramid.\n\t *\n\t * Can either be a fixed pixel value or percent relative to the space\n\t * available to the series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/#Tip_and_base} for more info\n\t * @default 0\n\t */\n\tbottomWidth?: number | Percent;\n\n\t/**\n\t * Determines calculation mechanism for the slice area based on value.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/#Slice_size} for more info\n\t * @default \"area\"\n\t */\n\tvalueIs?: \"area\" | \"height\";\n\n}\n\nexport interface IPyramidSeriesPrivate extends IFunnelSeriesPrivate {\n}\n\n/**\n * Creates a pyramid series for use in a [[SlicedChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/} for more info\n * @important\n */\nexport class PyramidSeries extends FunnelSeries {\n\tprotected _tag = \"pyramid\";\n\n\tpublic static className: string = \"PyramidSeries\";\n\tpublic static classNames: Array<string> = FunnelSeries.classNames.concat([PyramidSeries.className]);\n\n\tdeclare public _settings: IPyramidSeriesSettings;\n\tdeclare public _privateSettings: IPyramidSeriesPrivate;\n\tdeclare public _dataItemSettings: IPyramidSeriesDataItem;\n\n\tprotected _nextSize: number | undefined;\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tthis._nextSize = undefined;\n\t}\n\n\tprotected decorateSlice(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst orientation = this.get(\"orientation\");\n\t\tconst slicesContainer = this.slicesContainer;\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tconst label = dataItem.get(\"label\");\n\t\tconst link = dataItem.get(\"link\");\n\t\tconst valueIs = this.get(\"valueIs\", \"area\");\n\n\t\tconst sum = this.getPrivate(\"valueAbsoluteSum\", 0);\n\n\t\tif (sum == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst startLocation = this.get(\"startLocation\", 0);\n\t\tconst endLocation = this.get(\"endLocation\", 1);\n\n\t\tconst tw = this.get(\"topWidth\", 0);\n\t\tconst bw = this.get(\"bottomWidth\", p100);\n\n\t\tconst workingValue = Math.abs(dataItem.get(\"valueWorking\", 0));\n\t\tconst value = dataItem.get(\"value\", 0);\n\n\t\tlet sliceHeight: number;\n\t\tlet sliceBottomWidth: number;\n\n\t\tlet pyramidHeight = slicesContainer.innerHeight();\n\t\tlet pyramidWidth = slicesContainer.innerWidth();\n\t\tlet linkWidth = link.width();\n\t\tlet linkHeight = link.height();\n\n\t\tif (orientation == \"horizontal\") {\n\t\t\t[pyramidWidth, pyramidHeight] = [pyramidHeight, pyramidWidth];\n\t\t\t[linkWidth, linkHeight] = [linkHeight, linkWidth];\n\t\t}\n\n\t\tconst center = pyramidWidth / 2;\n\n\t\tlet d = 1;\n\t\tif (value != 0) {\n\t\t\td = workingValue / Math.abs(value);\n\t\t}\n\t\telse {\n\t\t\tif (dataItem.isHidden()) {\n\t\t\t\td = 0.000001;\n\t\t\t}\n\t\t}\n\n\t\tlinkHeight *= d;\n\n\t\tpyramidHeight = pyramidHeight * (endLocation - startLocation) - linkHeight * (this._count * this._total - 1);\n\n\t\tlet topWidth = $utils.relativeToValue(tw, pyramidWidth);\n\n\t\tif (!$type.isNumber(this._nextSize)) {\n\t\t\tthis._nextSize = topWidth;\n\t\t}\n\n\t\tlet bottomWidth = $utils.relativeToValue(bw, pyramidWidth);\n\t\tlet sliceTopWidth = this._nextSize;\n\n\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\n\t\tlet c = Math.tan(Math.PI / 2 - angle);\n\t\tif (c == 0) {\n\t\t\tc = 0.00000001;\n\t\t}\n\n\t\tif (valueIs == \"area\") {\n\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\n\t\t\tlet square = totalSquare * workingValue / sum;\n\n\t\t\tlet s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\n\n\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\n\n\t\t\tif (sliceHeight > 0) {\n\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsliceBottomWidth = sliceTopWidth;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tsliceHeight = pyramidHeight * workingValue / sum;\n\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\n\t\t}\n\n\t\tlet labelCoord = this._nextCoord + sliceHeight / 2;\n\t\tlet sliceX = center;\n\t\tlet sliceY = this._nextCoord;\n\n\t\tlet linkX = center;\n\t\tlet linkY = sliceY + sliceHeight;\n\n\t\tif (orientation == \"vertical\") {\n\t\t\tlabel.set(\"y\", labelCoord);\n\t\t\tif (label.get(\"opacity\") > 0) {\n\t\t\t\tthis._rLabels.push({ label: label, y: labelCoord });\n\t\t\t}\n\t\t\tslice.set(\"height\", sliceHeight);\n\t\t}\n\t\telse {\n\t\t\tlabel.set(\"x\", labelCoord);\n\t\t\tif (label.get(\"opacity\") > 0) {\n\t\t\t\tthis._hLabels.push({ label: label, y: labelCoord });\n\t\t\t}\n\t\t\t[sliceX, sliceY] = [sliceY, sliceX];\n\t\t\t[linkX, linkY] = [linkY, linkX];\n\n\t\t\tslice.set(\"width\", sliceHeight);\n\t\t}\n\n\t\tslice.setAll({ orientation, bottomWidth: sliceBottomWidth, topWidth: sliceTopWidth, x: sliceX, y: sliceY });\n\t\tlink.setAll({ orientation, x: linkX, y: linkY, topWidth: sliceBottomWidth, bottomWidth: sliceBottomWidth });\n\n\t\tthis._nextSize = sliceBottomWidth;\n\t\tthis._nextCoord += sliceHeight + linkHeight;\n\t}\n}\n","import { PyramidSeries, IPyramidSeriesSettings, IPyramidSeriesDataItem, IPyramidSeriesPrivate } from \"./PyramidSeries\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { p100, p50 } from \"../../core/util/Percent\"\n\n\nexport interface IPictorialStackedSeriesDataItem extends IPyramidSeriesDataItem {\n\n}\n\nexport interface IPictorialStackedSeriesSettings extends IPyramidSeriesSettings {\n\n\t/**\n\t * An SVG path that will define the shape of the pictorial series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pictorial-stacked-series/#Shape_of_the_series} for more info\n\t */\n\tsvgPath?: string;\n\n}\n\nexport interface IPictorialStackedSeriesPrivate extends IPyramidSeriesPrivate {\n}\n\n/**\n * Creates a pictorial series for use in a [[SlicedChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pictorial-stacked-series/} for more info\n * @important\n */\nexport class PictorialStackedSeries extends PyramidSeries {\n\tprotected _tag = \"pictorial\";\n\n\tpublic static className: string = \"PictorialStackedSeries\";\n\tpublic static classNames: Array<string> = PyramidSeries.classNames.concat([PictorialStackedSeries.className]);\n\n\tdeclare public _settings: IPictorialStackedSeriesSettings;\n\tdeclare public _privateSettings: IPictorialStackedSeriesPrivate;\n\tdeclare public _dataItemSettings: IPictorialStackedSeriesDataItem;\n\n\t/**\n\t * A [[Graphics]] element to used as a mask (shape) for the series.\n\t *\n\t * This element is read-only. To modify the mask/shape, use the `svgPath` setting.\n\t */\n\tpublic readonly seriesMask: Graphics = Graphics.new(this._root, { position: \"absolute\", x: p50, y: p50, centerX: p50, centerY: p50 });\n\n\tpublic readonly seriesGraphics: Graphics = this.slicesContainer.children.push(Graphics.new(this._root, { themeTags: [\"pictorial\", \"background\"], position: \"absolute\", x: p50, y: p50, centerX: p50, centerY: p50 }));\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.set(\"topWidth\", p100);\n\t\tthis.set(\"bottomWidth\", p100);\n\t\tthis.set(\"valueIs\", \"height\");\n\t\tthis.slicesContainer.set(\"mask\", this.seriesMask);\n\t}\n\n\tprotected _updateScale() {\n\t\tlet slicesContainer = this.slicesContainer;\n\n\t\tlet w = slicesContainer.innerWidth();\n\t\tlet h = slicesContainer.innerHeight();\n\n\t\tlet seriesMask = this.seriesMask;\n\t\tlet seriesGraphics = this.seriesGraphics;\n\t\tlet scale = seriesMask.get(\"scale\", 1);\n\n\t\tconst bounds = seriesMask.localBounds();\n\n\t\tlet mw = bounds.right - bounds.left;\n\t\tlet mh = bounds.bottom - bounds.top;\n\t\tif (this.get(\"orientation\") == \"horizontal\") {\n\t\t\tscale = w / mw;\n\t\t}\n\t\telse {\n\t\t\tscale = h / mh;\n\t\t}\n\t\tif (scale != Infinity && scale != NaN) {\n\t\t\tseriesMask.set(\"scale\", scale);\n\t\t\tseriesMask.set(\"x\", w / 2);\n\t\t\tseriesMask.set(\"y\", h / 2);\n\n\t\t\tseriesGraphics.set(\"scale\", scale);\n\t\t\tseriesGraphics.set(\"x\", w / 2);\n\t\t\tseriesGraphics.set(\"y\", h / 2);\n\t\t}\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tif (this.isDirty(\"svgPath\")) {\n\t\t\tconst svgPath = this.get(\"svgPath\");\n\t\t\tthis.seriesMask.set(\"svgPath\", svgPath);\n\t\t\tthis.seriesGraphics.set(\"svgPath\", svgPath);\n\t\t}\n\n\t\tthis._updateScale();\n\t}\n\n}\n","import { PercentChart, IPercentChartPrivate, IPercentChartSettings } from \"../percent/PercentChart\";\nimport type { PercentSeries } from \"../percent/PercentSeries\";\n\n\nexport interface ISlicedChartSettings extends IPercentChartSettings {\n}\n\nexport interface ISlicedChartPrivate extends IPercentChartPrivate {\n}\n\n/**\n * Creates a sliced chart for use with [[FunnelSeries]], [[PyramidSeries]], or [[PictorialStackedSeries]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\n * @important\n */\nexport class SlicedChart extends PercentChart {\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\n\t\tthis.seriesContainer.setAll({ isMeasured:true, layout: this._root.horizontalLayout });\n\t}\n\n\tpublic static className: string = \"SlicedChart\";\n\tpublic static classNames: Array<string> = PercentChart.classNames.concat([SlicedChart.className]);\n\n\tdeclare public _settings: ISlicedChartSettings;\n\tdeclare public _privateSettings: ISlicedChartPrivate;\n\tdeclare public _seriesType: PercentSeries;\n}\n","export const abs = Math.abs;\nexport const atan2 = Math.atan2;\nexport const cos = Math.cos;\nexport const max = Math.max;\nexport const min = Math.min;\nexport const sin = Math.sin;\nexport const sqrt = Math.sqrt;\n\nexport const epsilon = 1e-12;\nexport const pi = Math.PI;\nexport const halfPi = pi / 2;\nexport const tau = 2 * pi;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);\n}\n","import constant from \"./constant.js\";\nimport {abs, acos, asin, atan2, cos, epsilon, halfPi, max, min, pi, sin, sqrt, tau} from \"./math.js\";\nimport {withPath} from \"./path.js\";\n\nfunction arcInnerRadius(d) {\n  return d.innerRadius;\n}\n\nfunction arcOuterRadius(d) {\n  return d.outerRadius;\n}\n\nfunction arcStartAngle(d) {\n  return d.startAngle;\n}\n\nfunction arcEndAngle(d) {\n  return d.endAngle;\n}\n\nfunction arcPadAngle(d) {\n  return d && d.padAngle; // Note: optional!\n}\n\nfunction intersect(x0, y0, x1, y1, x2, y2, x3, y3) {\n  var x10 = x1 - x0, y10 = y1 - y0,\n      x32 = x3 - x2, y32 = y3 - y2,\n      t = y32 * x10 - x32 * y10;\n  if (t * t < epsilon) return;\n  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;\n  return [x0 + t * x10, y0 + t * y10];\n}\n\n// Compute perpendicular offset line of length rc.\n// http://mathworld.wolfram.com/Circle-LineIntersection.html\nfunction cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\n  var x01 = x0 - x1,\n      y01 = y0 - y1,\n      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),\n      ox = lo * y01,\n      oy = -lo * x01,\n      x11 = x0 + ox,\n      y11 = y0 + oy,\n      x10 = x1 + ox,\n      y10 = y1 + oy,\n      x00 = (x11 + x10) / 2,\n      y00 = (y11 + y10) / 2,\n      dx = x10 - x11,\n      dy = y10 - y11,\n      d2 = dx * dx + dy * dy,\n      r = r1 - rc,\n      D = x11 * y10 - x10 * y11,\n      d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),\n      cx0 = (D * dy - dx * d) / d2,\n      cy0 = (-D * dx - dy * d) / d2,\n      cx1 = (D * dy + dx * d) / d2,\n      cy1 = (-D * dx + dy * d) / d2,\n      dx0 = cx0 - x00,\n      dy0 = cy0 - y00,\n      dx1 = cx1 - x00,\n      dy1 = cy1 - y00;\n\n  // Pick the closer of the two intersection points.\n  // TODO Is there a faster way to determine which intersection to use?\n  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n\n  return {\n    cx: cx0,\n    cy: cy0,\n    x01: -ox,\n    y01: -oy,\n    x11: cx0 * (r1 / r - 1),\n    y11: cy0 * (r1 / r - 1)\n  };\n}\n\nexport default function() {\n  var innerRadius = arcInnerRadius,\n      outerRadius = arcOuterRadius,\n      cornerRadius = constant(0),\n      padRadius = null,\n      startAngle = arcStartAngle,\n      endAngle = arcEndAngle,\n      padAngle = arcPadAngle,\n      context = null,\n      path = withPath(arc);\n\n  function arc() {\n    var buffer,\n        r,\n        r0 = +innerRadius.apply(this, arguments),\n        r1 = +outerRadius.apply(this, arguments),\n        a0 = startAngle.apply(this, arguments) - halfPi,\n        a1 = endAngle.apply(this, arguments) - halfPi,\n        da = abs(a1 - a0),\n        cw = a1 > a0;\n\n    if (!context) context = buffer = path();\n\n    // Ensure that the outer radius is always larger than the inner radius.\n    if (r1 < r0) r = r1, r1 = r0, r0 = r;\n\n    // Is it a point?\n    if (!(r1 > epsilon)) context.moveTo(0, 0);\n\n    // Or is it a circle or annulus?\n    else if (da > tau - epsilon) {\n      context.moveTo(r1 * cos(a0), r1 * sin(a0));\n      context.arc(0, 0, r1, a0, a1, !cw);\n      if (r0 > epsilon) {\n        context.moveTo(r0 * cos(a1), r0 * sin(a1));\n        context.arc(0, 0, r0, a1, a0, cw);\n      }\n    }\n\n    // Or is it a circular or annular sector?\n    else {\n      var a01 = a0,\n          a11 = a1,\n          a00 = a0,\n          a10 = a1,\n          da0 = da,\n          da1 = da,\n          ap = padAngle.apply(this, arguments) / 2,\n          rp = (ap > epsilon) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),\n          rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\n          rc0 = rc,\n          rc1 = rc,\n          t0,\n          t1;\n\n      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\n      if (rp > epsilon) {\n        var p0 = asin(rp / r0 * sin(ap)),\n            p1 = asin(rp / r1 * sin(ap));\n        if ((da0 -= p0 * 2) > epsilon) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;\n        else da0 = 0, a00 = a10 = (a0 + a1) / 2;\n        if ((da1 -= p1 * 2) > epsilon) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;\n        else da1 = 0, a01 = a11 = (a0 + a1) / 2;\n      }\n\n      var x01 = r1 * cos(a01),\n          y01 = r1 * sin(a01),\n          x10 = r0 * cos(a10),\n          y10 = r0 * sin(a10);\n\n      // Apply rounded corners?\n      if (rc > epsilon) {\n        var x11 = r1 * cos(a11),\n            y11 = r1 * sin(a11),\n            x00 = r0 * cos(a00),\n            y00 = r0 * sin(a00),\n            oc;\n\n        // Restrict the corner radius according to the sector angle. If this\n        // intersection fails, it’s probably because the arc is too small, so\n        // disable the corner radius entirely.\n        if (da < pi) {\n          if (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10)) {\n            var ax = x01 - oc[0],\n                ay = y01 - oc[1],\n                bx = x11 - oc[0],\n                by = y11 - oc[1],\n                kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),\n                lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n            rc0 = min(rc, (r0 - lc) / (kc - 1));\n            rc1 = min(rc, (r1 - lc) / (kc + 1));\n          } else {\n            rc0 = rc1 = 0;\n          }\n        }\n      }\n\n      // Is the sector collapsed to a line?\n      if (!(da1 > epsilon)) context.moveTo(x01, y01);\n\n      // Does the sector’s outer ring have rounded corners?\n      else if (rc1 > epsilon) {\n        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\n        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\n\n        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n        // Have the corners merged?\n        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n        // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\n          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      }\n\n      // Or is the outer ring just a circular arc?\n      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);\n\n      // Is there no inner ring, and it’s a circular sector?\n      // Or perhaps it’s an annular sector collapsed due to padding?\n      if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);\n\n      // Does the sector’s inner ring (or point) have rounded corners?\n      else if (rc0 > epsilon) {\n        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\n        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\n\n        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n        // Have the corners merged?\n        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n        // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);\n          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      }\n\n      // Or is the inner ring just a circular arc?\n      else context.arc(0, 0, r0, a10, a00, cw);\n    }\n\n    context.closePath();\n\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  arc.centroid = function() {\n    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\n        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;\n    return [cos(a) * r, sin(a) * r];\n  };\n\n  arc.innerRadius = function(_) {\n    return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : innerRadius;\n  };\n\n  arc.outerRadius = function(_) {\n    return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : outerRadius;\n  };\n\n  arc.cornerRadius = function(_) {\n    return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : cornerRadius;\n  };\n\n  arc.padRadius = function(_) {\n    return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), arc) : padRadius;\n  };\n\n  arc.startAngle = function(_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : startAngle;\n  };\n\n  arc.endAngle = function(_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : endAngle;\n  };\n\n  arc.padAngle = function(_) {\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : padAngle;\n  };\n\n  arc.context = function(_) {\n    return arguments.length ? ((context = _ == null ? null : _), arc) : context;\n  };\n\n  return arc;\n}\n"],"names":["RadialLabel","Label","constructor","Object","defineProperty","_afterNew","this","_textKeys","push","super","_makeText","_text","children","RadialText","new","_root","baseRadius","radiusPrivate","getPrivate","innerRadiusPrivate","get","$utils","radius","inside","_updateChildren","isDirty","isPrivateDirty","textType","orientation","labelAngle","$math","set","sin","cos","_display","angle","setAll","paddingTop","paddingBottom","paddingLeft","paddingRight","setRaw","undefined","x","y","_flipped","_dirty","rotation","p50","markDirtyPosition","markDirtyBounds","_updatePosition","dx","dy","bounds","localBounds","w","right","left","h","bottom","top","centerX","Percent","value","text","classNames","concat","className","Text","_renderer","makeRadialText","textStyle","_beforeChanged","clear","startAngle","kerning","Slice","Graphics","arc","_getTooltipPoint","tooltipX","tooltipY","$type","innerRadius","ix","iy","_clear","_changed","generator","_generator","cornerRadius","context","outerRadius","endAngle","middleAngle","shiftRadius","PercentDefaultTheme","Theme","setupDefaultRules","ic","interfaceColors","r","rule","bind","legendLabelText","legendValueText","colors","ColorSet","width","p100","height","percent","alignLabels","states","create","opacity","position","isMeasured","toggleKey","tooltipText","strokeWidth","strokeOpacity","role","lineJoin","scale","populateText","location","startLocation","endLocation","sequencedInterpolation","interactive","expandDistance","centerY","fillOpacity","valueIs","setColor","PercentChart","SerialChart","_defaultThemes","chartContainer","seriesContainer","bulletsContainer","_processSeries","series","moveValue","length","PercentSeries","Series","Container","_makeSlices","_makeLabels","_makeTicks","makeSlice","dataItem","slice","slicesContainer","slices","make","on","updateLegendMarker","_setDataItem","makeLabel","label","labelsContainer","labels","_shouldMakeBullet","makeTick","tick","ticksContainer","ticks","fields","_onDataClear","reset","patterns","_prepareChildren","_lLabels","_rLabels","_hLabels","_valuesDirty","sum","absSum","valueHigh","valueLow","Infinity","count","$array","_dataItems","valueWorking","Math","abs","percentTotal","setPrivateRaw","show","duration","promises","_super","call","_sequencedShowHide","Promise","all","hide","markDirtyText","updateLegendValue","_arrange","_arrangeDown","_arrangeUp","_arrangeLeft","_arrangeRight","dataItems","_updateTick","_afterChanged","processDataItem","next","showDataItem","easing","animation","animate","key","to","waitForStop","applyAnimate","hideDataItem","hiddenState","hideTooltip","disposeDataItem","removeValue","dispose","hoverDataItem","isHidden","hover","unhoverDataItem","unhover","legendDataItem","markerRectangle","visualSettings","setting","_getNextDown","sort","a","b","l","adjustedLocalBounds","labelTop","_getNextUp","maxHeight","labelBottom","labelLeft","maxWidth","labelRight","_updateSize","markDirty","_dataItem","_dispose","chart","PieChart","innerWidth","innerHeight","wr","hr","innerBounds","mr","min","max","prevRadius","_maxRadius","each","_markDirtyKey","index","indexOf","seriesRadius","seriesInnerRadius","markDirtyKey","PieSeries","ListTemplate","Template","_new","themeTags","template","Tick","events","labelsTemplate","currentAngle","currentArc","color","_setDefault","fillPattern","setPrivate","labelRadius","isHiding","pl","pr","points","_positionBullet","bullet","sprite","FunnelSlice","display","moveTo","_tlx","_tly","lineTo","_trx","_try","quadraticCurveTo","_cprx","_cpry","_brx","_bry","_blx","_bly","_cplx","_cply","getPoint","locationX","locationY","tw","bw","tlx","trx","mlx","ed","FunnelSeries","_makeLinks","_tag","links","makeLink","link","onPrivate","markDirtySize","horizontalLayout","verticalLayout","_opposite","total","_total","_count","_fixLayout","_sizeDirty","_nextCoord","i","decorateSlice","isLast","getNextValue","nextValue","nextItem","maxSize","workingValue","bottomRatio","d","topWidth","bottomWidth","linkHeight","labelY","labelX","tickLocation","lcw","lch","pt","pb","p0","p1","p2","PyramidSeries","_nextSize","sliceHeight","sliceBottomWidth","pyramidHeight","pyramidWidth","linkWidth","center","sliceTopWidth","atan2","c","tan","PI","square","s","sqrt","labelCoord","sliceX","sliceY","linkX","linkY","PictorialStackedSeries","seriesMask","_updateScale","seriesGraphics","mw","mh","NaN","svgPath","SlicedChart","layout","epsilon","pi","halfPi","tau","asin","arcInnerRadius","arcOuterRadius","arcStartAngle","arcEndAngle","arcPadAngle","padAngle","cornerTangents","x0","y0","x1","y1","r1","rc","cw","x01","y01","lo","ox","oy","x11","y11","x10","y10","x00","y00","d2","D","cx0","cy0","cx1","cy1","dx0","dy0","dx1","dy1","cx","cy","constant","padRadius","path","withPath","buffer","r0","apply","arguments","a0","a1","da","t0","t1","a01","a11","a00","a10","da0","da1","ap","rp","rc0","rc1","oc","x2","y2","x3","y3","x32","y32","t","intersect","ax","ay","bx","by","kc","acos","lc","closePath","centroid","_"],"sourceRoot":""}